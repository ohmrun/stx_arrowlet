// Generated by Haxe 4.2.0-rc.1
(function ($hx_exports, $global) { "use strict";
$hx_exports["stx"] = $hx_exports["stx"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf = new StringBuf();
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf.add(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf.add(HxOverrides.substr(s,offset,p.pos - offset));
			buf.add(f(this));
			if(p.len == 0) {
				buf.add(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf.add(HxOverrides.substr(s,offset,null));
		}
		return buf.toString();
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return js_Lib.get_undefined();
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) a.push(i.next());
	return a;
};
Lambda.list = function(it) {
	var l = new haxe_ds_List();
	var i = $getIterator(it);
	while(i.hasNext()) l.add(i.next());
	return l;
};
Lambda.map = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) l.add(f(x.next()));
	return l;
};
Lambda.mapi = function(it,f) {
	var l = new haxe_ds_List();
	var i = 0;
	var x = $getIterator(it);
	while(x.hasNext()) l.add(f(i++,x.next()));
	return l;
};
Lambda.flatten = function(it) {
	var l = new haxe_ds_List();
	var e = $getIterator(it);
	while(e.hasNext()) {
		var x = $getIterator(e.next());
		while(x.hasNext()) l.add(x.next());
	}
	return l;
};
Lambda.flatMap = function(it,f) {
	return Lambda.flatten(Lambda.map(it,f));
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) if(x.next() == elt) {
		return true;
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) if(f(x.next())) {
		return true;
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) if(!f(x.next())) {
		return false;
	}
	return true;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) f(x.next());
};
Lambda.filter = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			l.add(x1);
		}
	}
	return l;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) first = f(x.next(),first);
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			_.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) if(pred(x.next())) {
			++n;
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		if(v == v2.next()) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Lambda.concat = function(a,b) {
	var l = new haxe_ds_List();
	var x = $getIterator(a);
	while(x.hasNext()) l.add(x.next());
	var x = $getIterator(b);
	while(x.hasNext()) l.add(x.next());
	return l;
};
var Main = function() { };
Main.__name__ = "Main";
Main.main = function() {
	stx_arw_Test.main();
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.saveStack(_g);
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(js_Boot.isClass(f) || js_Boot.isEnum(f));
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (js_Boot.isClass(v) || js_Boot.isEnum(v)) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var Std = function() { };
Std.__name__ = "Std";
Std.isOfType = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.downcast = function(value,c) {
	if(js_Boot.__downcastCheck(value,c)) {
		return value;
	} else {
		return null;
	}
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.int = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = StringTools.fastCodeAt(x,i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = StringTools.fastCodeAt(x,i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,get_length: function() {
		return this.b.length;
	}
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCodePoint(c);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
	,__properties__: {get_length:"get_length"}
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf = new StringBuf();
	var _g = new haxe_iterators_StringIteratorUnicode(s);
	while(_g.hasNext()) {
		var code = _g.next();
		switch(code) {
		case 34:
			if(quotes) {
				buf.add("&quot;");
			} else {
				buf.addChar(code);
			}
			break;
		case 38:
			buf.add("&amp;");
			break;
		case 39:
			if(quotes) {
				buf.add("&#039;");
			} else {
				buf.addChar(code);
			}
			break;
		case 60:
			buf.add("&lt;");
			break;
		case 62:
			buf.add("&gt;");
			break;
		default:
			buf.addChar(code);
		}
	}
	return buf.toString();
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf = new StringBuf();
	l -= s.length;
	while(buf.get_length() < l) buf.add(c);
	buf.add(s);
	return buf.toString();
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf = new StringBuf();
	buf.add(s);
	while(buf.get_length() < l) buf.add(c);
	return buf.toString();
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.utf16CodePointAt = function(s,index) {
	var c = StringTools.fastCodeAt(s,index);
	if(c >= 55296 && c <= 56319) {
		c = c - 55232 << 10 | StringTools.fastCodeAt(s,index + 1) & 1023;
	}
	return c;
};
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
Type.__name__ = "Type";
Type.getClass = function(o) {
	return js_Boot.getClass(o);
};
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.getClassName = function(c) {
	return c.__name__;
};
Type.getEnumName = function(e) {
	return e.__ename__;
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c;
	var _g = e.__constructs__[index];
	if(_g == null) {
		c = null;
	} else {
		var ctor = _g;
		c = ctor._hx_name;
	}
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getEnumConstructs = function(e) {
	var _this = e.__constructs__;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = _this[i]._hx_name;
	}
	return result;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(js_Boot.isClass(v) || js_Boot.isEnum(v)) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumConstructor = function(e) {
	return $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
Type.enumIndex = function(e) {
	return e._hx_index;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.__properties__ = {get_length:"get_length"};
haxe_CallStack.get_length = function(this1) {
	return this1.length;
};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return haxe_CallStack.asArray(fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack()));
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = haxe_CallStack.asArray(stack);
	while(_g < _g1.length) {
		var s = _g1[_g++];
		b.add("\nCalled from ");
		haxe_CallStack.itemToString(b,s);
	}
	return b.toString();
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = haxe_CallStack.get_length(stack);
		while(_g < _g1) if(haxe_CallStack.equalItems(this1[i],haxe_CallStack.get(stack,_g++))) {
			if(startIndex < 0) {
				startIndex = i;
			}
			++i;
			if(i >= this1.length) {
				break;
			}
		} else {
			startIndex = -1;
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.get = function(this1,index) {
	return this1[index];
};
haxe_CallStack.asArray = function(this1) {
	return this1;
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				return item1.m == item2.m;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				if(item1.file == item2.file && item1.line == item2.line && item1.column == item2.column) {
					return haxe_CallStack.equalItems(item1.s,item2.s);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				if(item1.classname == item2.classname) {
					return item1.method == item2.method;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				return item1.v == item2.v;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.add("a C function");
		break;
	case 1:
		b.add("module ");
		b.add(s.m);
		break;
	case 2:
		var _g = s.s;
		var _g1 = s.column;
		if(_g != null) {
			haxe_CallStack.itemToString(b,_g);
			b.add(" (");
		}
		b.add(s.file);
		b.add(" line ");
		b.add(s.line);
		if(_g1 != null) {
			b.add(" column ");
			b.add(_g1);
		}
		if(_g != null) {
			b.add(")");
		}
		break;
	case 3:
		var _g = s.classname;
		b.add(_g == null ? "<unknown>" : _g);
		b.add(".");
		b.add(s.method);
		break;
	case 4:
		b.add("local function #");
		b.add(s.v);
		break;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,keys: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe_DynamicAccess = {};
haxe_DynamicAccess.get = function(this1,key) {
	return this1[key];
};
haxe_DynamicAccess.keys = function(this1) {
	return Reflect.fields(this1);
};
haxe_DynamicAccess.keyValueIterator = function(this1) {
	return new haxe_iterators_DynamicAccessKeyValueIterator(this1);
};
var haxe_EntryPoint = function() { };
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(typeof(window) != "undefined") {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(rqf != null) {
			rqf(haxe_EntryPoint.run);
		} else if(nextTick >= 0) {
			setTimeout(haxe_EntryPoint.run,nextTick * 1000);
		}
	} else if(nextTick >= 0) {
		setTimeout(haxe_EntryPoint.run,nextTick * 1000);
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native"}
});
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	f: null
	,prev: null
	,next: null
	,isBlocking: null
	,nextRun: null
	,priority: null
	,delay: function(t) {
		this.nextRun = t == null ? -Infinity : haxe_Timer.stamp() + t;
	}
	,call: function() {
		if(this.f != null) {
			this.f();
		}
	}
	,stop: function() {
		if(this.f == null) {
			return;
		}
		this.f = null;
		this.nextRun = -Infinity;
		if(this.prev == null) {
			haxe_MainLoop.pending = this.next;
		} else {
			this.prev.next = this.next;
		}
		if(this.next != null) {
			this.next.prev = this.prev;
		}
	}
	,__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw haxe_Exception.thrown("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				++_g;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = haxe_Timer.stamp();
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			e.call();
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_NativeStackTrace = function() { };
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	Error.prepareStackTrace = oldValue;
	return e.stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				method = haxe_StackItem.Method(fullName.substring(0,idx),fullName.substring(idx + 1));
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	while(true) if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			skip = --skip;
			pos += 1;
			continue;
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) _g.push(_g2[_g1++].name);
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			return haxe_crypto_Base64.decode(x.data).toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.stamp = function() {
	return HxOverrides.now() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__shiftStack();
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = StringTools.fastCodeAt(s,i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v;
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var code1 = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.get(i)] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe_io_Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__:"haxe.ds.Either",__constructs__:null
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Left",$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Right",$_.__params__ = ["v"],$_)
};
haxe_ds_Either.__constructs__ = [haxe_ds_Either.Left,haxe_ds_Either.Right];
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,toString: function() {
		var s = new StringBuf();
		var first = true;
		var l = this.h;
		s.add("{");
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s.add(", ");
			}
			s.add(Std.string(l.item));
			l = l.next;
		}
		s.add("}");
		return s.toString();
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_Map = {};
haxe_ds_Map.set = function(this1,key,value) {
	this1.set(key,value);
};
haxe_ds_Map.get = function(this1,key) {
	return this1.get(key);
};
haxe_ds_Map.exists = function(this1,key) {
	return this1.exists(key);
};
haxe_ds_Map.keys = function(this1) {
	return this1.keys();
};
haxe_ds_Map.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
haxe_ds_Map.toStringMap = function(t) {
	return new haxe_ds_StringMap();
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return (obj.__id__ = js_Lib.getNextHaxeUID());
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = haxe_ds_ObjectMap.getId(key);
		if(id == null) {
			id = haxe_ds_ObjectMap.assignId(key);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[haxe_ds_ObjectMap.getId(key)];
	}
	,exists: function(key) {
		return this.h.__keys__[haxe_ds_ObjectMap.getId(key)] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__:"haxe.ds.Option",__constructs__:null
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_._hx_name="Some",$_.__params__ = ["v"],$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
haxe_ds_Option.__constructs__ = [haxe_ds_Option.Some,haxe_ds_Option.None];
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapKeyValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = "haxe.ds._StringMap.StringMapKeyValueIterator";
haxe_ds__$StringMap_StringMapKeyValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		var key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyValueIterator
};
var haxe_ds_Vector = {};
haxe_ds_Vector._new = function(length) {
	return new Array(length);
};
haxe_ds_Vector.get = function(this1,index) {
	return this1[index];
};
haxe_ds_Vector.set = function(this1,index,val) {
	return this1[index] = val;
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_DynamicAccessKeyValueIterator = function(access) {
	this.access = access;
	this.keys = haxe_DynamicAccess.keys(access);
	this.index = 0;
};
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
haxe_iterators_DynamicAccessKeyValueIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		var key = this.keys[this.index++];
		return { value : haxe_DynamicAccess.get(this.access,key), key : key};
	}
	,__class__: haxe_iterators_DynamicAccessKeyValueIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_iterators_StringIteratorUnicode = function(s) {
	this.offset = 0;
	this.s = s;
};
haxe_iterators_StringIteratorUnicode.__name__ = "haxe.iterators.StringIteratorUnicode";
haxe_iterators_StringIteratorUnicode.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		var c = StringTools.utf16CodePointAt(this.s,this.offset++);
		if(c >= 65536) {
			this.offset++;
		}
		return c;
	}
	,__class__: haxe_iterators_StringIteratorUnicode
};
var haxe_rtti_Meta = function() { };
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var haxe_unit_TestCase = function() {
};
haxe_unit_TestCase.__name__ = "haxe.unit.TestCase";
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var haxe_unit_TestResult = function() {
	this.m_tests = new haxe_ds_List();
	this.success = true;
};
haxe_unit_TestResult.__name__ = "haxe.unit.TestResult";
haxe_unit_TestResult.prototype = {
	m_tests: null
	,success: null
	,add: function(t) {
		this.m_tests.add(t);
		if(!t.success) {
			this.success = false;
		}
	}
	,toString: function() {
		var buf = new StringBuf();
		var failures = 0;
		var _g = this.m_tests.iterator();
		while(_g.hasNext()) {
			var test = _g.next();
			if(test.success == false) {
				buf.add("* ");
				buf.add(test.classname);
				buf.add("::");
				buf.add(test.method);
				buf.add("()");
				buf.add("\n");
				buf.add("ERR: ");
				if(test.posInfos != null) {
					buf.add(test.posInfos.fileName);
					buf.add(":");
					buf.add(test.posInfos.lineNumber);
					buf.add("(");
					buf.add(test.posInfos.className);
					buf.add(".");
					buf.add(test.posInfos.methodName);
					buf.add(") - ");
				}
				buf.add(test.error);
				buf.add("\n");
				if(test.backtrace != null) {
					buf.add(test.backtrace);
					buf.add("\n");
				}
				buf.add("\n");
				++failures;
			}
		}
		buf.add("\n");
		if(failures == 0) {
			buf.add("OK ");
		} else {
			buf.add("FAILED ");
		}
		buf.add(this.m_tests.length);
		buf.add(" tests, ");
		buf.add(failures);
		buf.add(" failed, ");
		buf.add(this.m_tests.length - failures);
		buf.add(" success");
		buf.add("\n");
		return buf.toString();
	}
	,__class__: haxe_unit_TestResult
};
var haxe_unit_TestRunner = function() {
	this.result = new haxe_unit_TestResult();
	this.cases = new haxe_ds_List();
};
haxe_unit_TestRunner.__name__ = "haxe.unit.TestRunner";
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
haxe_unit_TestRunner.customTrace = function(v,p) {
	haxe_unit_TestRunner.print(p.fileName + ":" + p.lineNumber + ": " + Std.string(v) + "\n");
};
haxe_unit_TestRunner.prototype = {
	result: null
	,cases: null
	,add: function(c) {
		this.cases.add(c);
	}
	,run: function() {
		this.result = new haxe_unit_TestResult();
		var _g = this.cases.iterator();
		while(_g.hasNext()) this.runCase(_g.next());
		haxe_unit_TestRunner.print(this.result.toString());
		return this.result.success;
	}
	,runCase: function(t) {
		var old = haxe_Log.trace;
		haxe_Log.trace = haxe_unit_TestRunner.customTrace;
		var cl = Type.getClass(t);
		var fields = Type.getInstanceFields(cl);
		haxe_unit_TestRunner.print("Class: " + Type.getClassName(cl) + " ");
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var field = Reflect.field(t,f);
			if(StringTools.startsWith(f,"test") && Reflect.isFunction(field)) {
				t.currentTest = new haxe_unit_TestStatus();
				t.currentTest.classname = Type.getClassName(cl);
				t.currentTest.method = f;
				t.setup();
				try {
					Reflect.callMethod(t,field,[]);
					if(t.currentTest.done) {
						t.currentTest.success = true;
						haxe_unit_TestRunner.print(".");
					} else {
						t.currentTest.success = false;
						t.currentTest.error = "(warning) no assert";
						haxe_unit_TestRunner.print("W");
					}
				} catch( _g1 ) {
					haxe_NativeStackTrace.saveStack(_g1);
					var _g2 = haxe_Exception.caught(_g1).unwrap();
					if(Std.isOfType(_g2,haxe_unit_TestStatus)) {
						haxe_unit_TestRunner.print("F");
						var tmp = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp);
					} else {
						haxe_unit_TestRunner.print("E");
						if(_g2.message != null) {
							t.currentTest.error = "exception thrown : " + Std.string(_g2) + " [" + Std.string(_g2.message) + "]";
						} else {
							t.currentTest.error = "exception thrown : " + Std.string(_g2);
						}
						var tmp1 = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp1);
					}
				}
				this.result.add(t.currentTest);
				t.tearDown();
			}
		}
		haxe_unit_TestRunner.print("\n");
		haxe_Log.trace = old;
	}
	,__class__: haxe_unit_TestRunner
};
var haxe_unit_TestStatus = function() {
	this.done = false;
	this.success = false;
};
haxe_unit_TestStatus.__name__ = "haxe.unit.TestStatus";
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,method: null
	,classname: null
	,posInfos: null
	,backtrace: null
	,__class__: haxe_unit_TestStatus
};
var hre_HreError = function(message) {
	this.message = message;
};
hre_HreError.__name__ = "hre.HreError";
hre_HreError.prototype = {
	message: null
	,__class__: hre_HreError
};
var hre_Match = function(input,index,groups) {
	this.input = input;
	this.index = index;
	this.groups = groups;
};
hre_Match.__name__ = "hre.Match";
hre_Match.prototype = {
	input: null
	,index: null
	,groups: null
	,equals: function(other) {
		if(other == null || this.input != other.input || this.index != other.index) {
			return false;
		}
		var _g = 0;
		var _g1 = this.groups.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.groups[i] != other.groups[i]) {
				return false;
			}
		}
		return true;
	}
	,toString: function() {
		return "Match(input=\"" + this.input + "\", index=" + this.index + ", groups=[" + this.groups.join(", ") + "])";
	}
	,__class__: hre_Match
};
var hre_RegExp = function(pattern,flags) {
	this.length = 2;
	this.pattern = hre_RegExpParser.parse(pattern);
	var global = false;
	var ignoreCase = false;
	var multiline = false;
	var sticky = false;
	if(flags != null) {
		var _g = 0;
		var _g1 = flags.length;
		while(_g < _g1) {
			var charCode = HxOverrides.cca(flags,_g++);
			if(charCode == hre_RegExp.LATIN_SMALL_LETTER_G) {
				global = true;
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_I) {
				ignoreCase = true;
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_M) {
				multiline = true;
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_U) {
				haxe_Log.trace("Unicode flag is always enabled, no need to provide it",{ fileName : "hre/RegExp.hx", lineNumber : 49, className : "hre.RegExp", methodName : "new"});
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_Y) {
				sticky = true;
			} else {
				throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid flags",0,pattern));
			}
		}
	}
	this.flags = new hre_RegExpFlags(global,ignoreCase,multiline,sticky);
	this.lastIndex = 0;
};
hre_RegExp.__name__ = "hre.RegExp";
hre_RegExp.prototype = {
	length: null
	,lastIndex: null
	,pattern: null
	,flags: null
	,exec: function(input) {
		var matcher = hre_RegExpMatcher.evaluatePattern(this.pattern,this.flags);
		var currentIndex = this.flags.global || this.flags.sticky ? this.lastIndex : 0;
		var successfulMatch = null;
		_hx_loop1: while(true) {
			if(currentIndex > input.length) {
				this.lastIndex = 0;
				return null;
			}
			var _g = matcher(input,currentIndex);
			switch(_g._hx_index) {
			case 0:
				if(this.flags.sticky) {
					this.lastIndex = 0;
					return null;
				}
				++currentIndex;
				continue;
			case 1:
				successfulMatch = _g.matcherState;
				break _hx_loop1;
			}
		}
		if(this.flags.global || this.flags.sticky) {
			this.lastIndex = successfulMatch.index;
		}
		var groups = [input.substring(currentIndex,successfulMatch.index)];
		var _g = 0;
		var _g1 = successfulMatch.captures;
		while(_g < _g1.length) groups.push(_g1[_g++]);
		return new hre_Match(input,currentIndex,groups);
	}
	,test: function(input) {
		return this.exec(input) != null;
	}
	,__class__: hre_RegExp
};
var hre_RegExpFlags = function(global,ignoreCase,multiline,sticky) {
	this.global = global;
	this.ignoreCase = ignoreCase;
	this.multiline = multiline;
	this.unicode = true;
	this.sticky = sticky;
};
hre_RegExpFlags.__name__ = "hre.RegExpFlags";
hre_RegExpFlags.prototype = {
	global: null
	,ignoreCase: null
	,multiline: null
	,unicode: null
	,sticky: null
	,__class__: hre_RegExpFlags
};
var hre_MatcherResult = $hxEnums["hre.MatcherResult"] = { __ename__:"hre.MatcherResult",__constructs__:null
	,Failure: {_hx_name:"Failure",_hx_index:0,__enum__:"hre.MatcherResult",toString:$estr}
	,Success: ($_=function(matcherState) { return {_hx_index:1,matcherState:matcherState,__enum__:"hre.MatcherResult",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["matcherState"],$_)
};
hre_MatcherResult.__constructs__ = [hre_MatcherResult.Failure,hre_MatcherResult.Success];
var hre_MatcherState = function() {
};
hre_MatcherState.__name__ = "hre.MatcherState";
hre_MatcherState.prototype = {
	index: null
	,length: null
	,ignoreCase: null
	,multiline: null
	,unicode: null
	,list: null
	,captures: null
	,copy: function() {
		var result = new hre_MatcherState();
		result.index = this.index;
		result.length = this.length;
		result.ignoreCase = this.ignoreCase;
		result.multiline = this.multiline;
		result.unicode = this.unicode;
		result.list = this.list.slice();
		result.captures = this.captures.slice();
		return result;
	}
	,__class__: hre_MatcherState
};
var hre_RegExpMatcher = function() {
};
hre_RegExpMatcher.__name__ = "hre.RegExpMatcher";
hre_RegExpMatcher.evaluatePattern = function(pattern,flags) {
	return function(source,index) {
		if(index > source.length) {
			throw haxe_Exception.thrown(new hre_HreError("Assertion `index <= source.length` failed"));
		}
		var state = new hre_MatcherState();
		state.length = source.length;
		state.list = [];
		var _g = 0;
		var _g1 = source.length;
		while(_g < _g1) state.list.push(HxOverrides.cca(source,_g++));
		state.index = index;
		state.multiline = flags.multiline;
		state.ignoreCase = flags.ignoreCase;
		state.unicode = flags.unicode;
		state.captures = [];
		var _g = 0;
		var _g1 = pattern.captures;
		while(_g < _g1) {
			++_g;
			state.captures.push(null);
		}
		return (hre_RegExpMatcher.evaluateDisjunction(pattern))(state,function(state) {
			return hre_MatcherResult.Success(state);
		});
	};
};
hre_RegExpMatcher.evaluateDisjunction = function(disjunction) {
	var _this = disjunction.alternatives;
	var f = hre_RegExpMatcher.evaluateAlternative;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(_this[i]);
	}
	var alternativeMatchers = result;
	return function(state,continuation) {
		if(alternativeMatchers.length == 0) {
			return continuation(state);
		}
		var _g = 0;
		while(_g < alternativeMatchers.length) {
			var r = alternativeMatchers[_g++](state,continuation);
			if(r._hx_index == 0) {
				continue;
			} else {
				return r;
			}
		}
		return hre_MatcherResult.Failure;
	};
};
hre_RegExpMatcher.evaluateAlternative = function(alternative) {
	return function(state,continuation) {
		var c = continuation;
		var idx = alternative.terms.length;
		while(idx > 0) {
			--idx;
			c = (function(nextContinuation,m) {
				return function(s) {
					return m[0](s,nextContinuation[0]);
				};
			})([c],[hre_RegExpMatcher.evaluateTerm(alternative.terms[idx])]);
		}
		return c(state);
	};
};
hre_RegExpMatcher.evaluateTerm = function(term) {
	switch(term._hx_index) {
	case 0:
		var assertion = term.assertion;
		return function(state,continuation) {
			if(term == null) {
				return hre_MatcherResult.Failure;
			}
			var _g = hre_RegExpMatcher.evaluateAssertion(assertion);
			switch(_g._hx_index) {
			case 0:
				if(_g.v(state)) {
					return continuation(state);
				} else {
					return hre_MatcherResult.Failure;
				}
				break;
			case 1:
				return _g.v(state,continuation);
			}
		};
	case 1:
		return hre_RegExpMatcher.evaluateAtom(term.atom);
	case 2:
		return hre_RegExpMatcher.evaluateQuantifiedAtom(term.atom,term.quantifier,term.capturesStartIndex,term.capturesEndIndex);
	}
};
hre_RegExpMatcher.evaluateAssertion = function(assertion) {
	switch(assertion._hx_index) {
	case 0:
		return haxe_ds_Either.Left(function(state) {
			var e = state.index;
			if(e == 0) {
				return true;
			}
			if(!state.multiline) {
				return false;
			}
			if(hre_RegExpMatcher.isLineTerminator(state.list[e - 1])) {
				return true;
			}
			return false;
		});
	case 1:
		return haxe_ds_Either.Left(function(state) {
			if(state.index == state.length) {
				return true;
			}
			if(!state.multiline) {
				return false;
			}
			if(hre_RegExpMatcher.isLineTerminator(state.list[state.index])) {
				return true;
			}
			return false;
		});
	case 2:
		return haxe_ds_Either.Left(function(state) {
			var e = state.index;
			return (e > 0 && hre_RegExpMatcher.isWordChar(state.list[e - 1])) != (e < state.length && hre_RegExpMatcher.isWordChar(state.list[e]));
		});
	case 3:
		return haxe_ds_Either.Left(function(state) {
			var e = state.index;
			return (e > 0 && hre_RegExpMatcher.isWordChar(state.list[e - 1])) == (e < state.length && hre_RegExpMatcher.isWordChar(state.list[e]));
		});
	case 4:
		var m = hre_RegExpMatcher.evaluateDisjunction(assertion.disjunction);
		return haxe_ds_Either.Right(function(state,continuation) {
			var _g = m(state,function(state) {
				return hre_MatcherResult.Success(state);
			});
			switch(_g._hx_index) {
			case 0:
				return hre_MatcherResult.Failure;
			case 1:
				var nextState = _g.matcherState.copy();
				nextState.index = state.index;
				return continuation(nextState);
			}
		});
	case 5:
		var m1 = hre_RegExpMatcher.evaluateDisjunction(assertion.disjunction);
		return haxe_ds_Either.Right(function(state,continuation) {
			switch(m1(state,function(state) {
				return hre_MatcherResult.Success(state);
			})._hx_index) {
			case 0:
				return continuation(state);
			case 1:
				return hre_MatcherResult.Failure;
			}
		});
	}
};
hre_RegExpMatcher.evaluateAtom = function(atom) {
	switch(atom._hx_index) {
	case 0:
		return hre_RegExpMatcher.characterSetMatcher(hre_RegExpMatcher.lineTerminators,true);
	case 1:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
			if(48 <= cc && cc <= 57) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 2:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
			if(!(48 <= cc && cc <= 57)) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 3:
		return hre_RegExpMatcher.characterSetMatcher(hre_RegExpMatcher.separators,false);
	case 4:
		return hre_RegExpMatcher.characterSetMatcher(hre_RegExpMatcher.separators,true);
	case 5:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			if(hre_RegExpMatcher.isWordChar(hre_RegExpMatcher.canonicalize(state,state.list[e]))) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 6:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			if(!hre_RegExpMatcher.isWordChar(hre_RegExpMatcher.canonicalize(state,state.list[e]))) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 7:
		return hre_RegExpMatcher.evaluateBackreference(atom.captureId);
	case 8:
		return hre_RegExpMatcher.characterSetMatcher([HxOverrides.cca(atom.literal,0)],false);
	case 9:
		return hre_RegExpMatcher.evaluateCharacterClass(atom.characterClass);
	case 10:
		return hre_RegExpMatcher.evaluateCaptureGroup(atom.disjunction,atom.captureIndex);
	case 11:
		return hre_RegExpMatcher.evaluateDisjunction(atom.disjunction);
	}
};
hre_RegExpMatcher.evaluateQuantifiedAtom = function(atom,quantifier,captureStart,captureEnd) {
	var m = hre_RegExpMatcher.evaluateAtom(atom);
	return function(state,continuation) {
		return hre_RegExpMatcher.repeatMatcher(m,quantifier.min,quantifier.max,quantifier.greedy,state,continuation,captureStart,captureEnd);
	};
};
hre_RegExpMatcher.repeatMatcher = function(m,min,max,greedy,x,c,captureStart,captureEnd) {
	if(max == 0) {
		return c(x);
	}
	var d = function(y) {
		if(min == 0 && x.index == y.index) {
			return hre_MatcherResult.Failure;
		}
		return hre_RegExpMatcher.repeatMatcher(m,min == 0 ? 0 : min - 1,max == -1 ? -1 : max - 1,greedy,y,c,captureStart,captureEnd);
	};
	var xr = x.copy();
	var _g = captureStart;
	var _g1 = captureEnd;
	while(_g < _g1) xr.captures[_g++] = null;
	if(min > 0) {
		return m(xr,d);
	}
	if(!greedy) {
		var z = c(x);
		if(z._hx_index == 0) {
			return m(xr,d);
		} else {
			return z;
		}
	}
	var z = m(xr,d);
	if(z._hx_index == 0) {
		return c(x);
	} else {
		return z;
	}
};
hre_RegExpMatcher.evaluateCaptureGroup = function(disjunction,captureIndex) {
	var m = hre_RegExpMatcher.evaluateDisjunction(disjunction);
	return function(state,continuation) {
		var subContinuation = function(subState) {
			var capturedSubstring = "";
			var _g = state.index;
			var _g1 = subState.index;
			while(_g < _g1) {
				var code = state.list[_g++];
				capturedSubstring += String.fromCodePoint(code);
			}
			var nextState = subState.copy();
			nextState.captures[captureIndex] = capturedSubstring;
			return continuation(nextState);
		};
		return m(state,subContinuation);
	};
};
hre_RegExpMatcher.evaluateBackreference = function(captureId) {
	var captureIndex = captureId - 1;
	return function(state,continuation) {
		var referenced = state.captures[captureIndex];
		if(referenced == null) {
			return continuation(state);
		}
		var e = state.index;
		var f = e + referenced.length;
		if(f > state.list.length) {
			return hre_MatcherResult.Failure;
		}
		var _g = 0;
		var _g1 = referenced.length;
		while(_g < _g1) {
			var i = _g++;
			if(hre_RegExpMatcher.canonicalize(state,state.list[e + i]) != hre_RegExpMatcher.canonicalize(state,HxOverrides.cca(referenced,i))) {
				return hre_MatcherResult.Failure;
			}
		}
		var y = state.copy();
		y.index = f;
		return continuation(y);
	};
};
hre_RegExpMatcher.evaluateCharacterClass = function(characterClass) {
	return function(state,continuation) {
		var e = state.index;
		if(e == state.length) {
			return hre_MatcherResult.Failure;
		}
		var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
		var matched = false;
		var _g = 0;
		var _g1 = characterClass.ranges;
		_hx_loop1: while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			switch(range._hx_index) {
			case 0:
				var startCode = HxOverrides.cca(range.start,0);
				var endCode = HxOverrides.cca(range.end,0);
				if(state.ignoreCase) {
					var _g2 = startCode;
					var _g3 = endCode + 1;
					while(_g2 < _g3) if(cc == hre_RegExpMatcher.canonicalize(state,_g2++)) {
						matched = true;
						break;
					}
				} else if(startCode <= cc && cc <= endCode) {
					matched = true;
					break _hx_loop1;
				}
				break;
			case 1:
				var _g4 = range.value;
				switch(_g4._hx_index) {
				case 0:
					if(hre_RegExpMatcher.canonicalize(state,HxOverrides.cca(_g4.value,0)) == cc) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 1:
					if(48 <= cc && cc <= 57) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 2:
					if(!(48 <= cc && cc <= 57)) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 3:
					if(hre_RegExpMatcher.separators.indexOf(cc) >= 0) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 4:
					if(hre_RegExpMatcher.separators.indexOf(cc) < 0) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 5:
					if(hre_RegExpMatcher.isWordChar(cc)) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 6:
					if(!hre_RegExpMatcher.isWordChar(cc)) {
						matched = true;
						break _hx_loop1;
					}
					break;
				}
				break;
			}
		}
		if(characterClass.inverted == matched) {
			return hre_MatcherResult.Failure;
		}
		var nextState = state.copy();
		nextState.index++;
		return continuation(nextState);
	};
};
hre_RegExpMatcher.characterSetMatcher = function(codepoints,invert) {
	return function(state,continuation) {
		var e = state.index;
		if(e == state.length) {
			return hre_MatcherResult.Failure;
		}
		var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
		var matched = false;
		var _g = 0;
		while(_g < codepoints.length) if(cc == hre_RegExpMatcher.canonicalize(state,codepoints[_g++])) {
			matched = true;
			break;
		}
		if(invert == matched) {
			return hre_MatcherResult.Failure;
		}
		var nextState = state.copy();
		nextState.index++;
		return continuation(nextState);
	};
};
hre_RegExpMatcher.canonicalize = function(state,codepoint) {
	if(!state.ignoreCase) {
		return codepoint;
	}
	return HxOverrides.cca(String.fromCodePoint(codepoint).toLowerCase(),0);
};
hre_RegExpMatcher.isLineTerminator = function(codepoint) {
	return hre_RegExpMatcher.lineTerminators.indexOf(codepoint) >= 0;
};
hre_RegExpMatcher.isWordChar = function(codepoint) {
	if(!(97 <= codepoint && codepoint <= 122 || 65 <= codepoint && codepoint <= 90 || 48 <= codepoint && codepoint <= 57)) {
		return codepoint == 95;
	} else {
		return true;
	}
};
hre_RegExpMatcher.prototype = {
	__class__: hre_RegExpMatcher
};
var hre_RegExpSyntaxError = function(message,index,source) {
	hre_HreError.call(this,"RegExp syntax error for \"" + source + "\" at index " + index + ": " + message);
	this.index = index;
	this.source = source;
};
hre_RegExpSyntaxError.__name__ = "hre.RegExpSyntaxError";
hre_RegExpSyntaxError.__super__ = hre_HreError;
hre_RegExpSyntaxError.prototype = $extend(hre_HreError.prototype,{
	index: null
	,source: null
	,__class__: hre_RegExpSyntaxError
});
var hre_QuantifierPrefix = function(min,max) {
	this.min = min;
	this.max = max;
};
hre_QuantifierPrefix.__name__ = "hre.QuantifierPrefix";
hre_QuantifierPrefix.prototype = {
	min: null
	,max: null
	,__class__: hre_QuantifierPrefix
};
var hre_IntLiteral = function(length,value) {
	this.length = length;
	this.value = value;
};
hre_IntLiteral.__name__ = "hre.IntLiteral";
hre_IntLiteral.prototype = {
	length: null
	,value: null
	,__class__: hre_IntLiteral
};
var hre_Escape = $hxEnums["hre.Escape"] = { __ename__:"hre.Escape",__constructs__:null
	,Literal: ($_=function(codepoint) { return {_hx_index:0,codepoint:codepoint,__enum__:"hre.Escape",toString:$estr}; },$_._hx_name="Literal",$_.__params__ = ["codepoint"],$_)
	,Backreference: ($_=function(captureId) { return {_hx_index:1,captureId:captureId,__enum__:"hre.Escape",toString:$estr}; },$_._hx_name="Backreference",$_.__params__ = ["captureId"],$_)
	,Word: {_hx_name:"Word",_hx_index:2,__enum__:"hre.Escape",toString:$estr}
	,NotWord: {_hx_name:"NotWord",_hx_index:3,__enum__:"hre.Escape",toString:$estr}
	,Decimal: {_hx_name:"Decimal",_hx_index:4,__enum__:"hre.Escape",toString:$estr}
	,NotDecimal: {_hx_name:"NotDecimal",_hx_index:5,__enum__:"hre.Escape",toString:$estr}
	,Separator: {_hx_name:"Separator",_hx_index:6,__enum__:"hre.Escape",toString:$estr}
	,NotSeparator: {_hx_name:"NotSeparator",_hx_index:7,__enum__:"hre.Escape",toString:$estr}
	,WordBoundary: {_hx_name:"WordBoundary",_hx_index:8,__enum__:"hre.Escape",toString:$estr}
	,NotWordBoundary: {_hx_name:"NotWordBoundary",_hx_index:9,__enum__:"hre.Escape",toString:$estr}
};
hre_Escape.__constructs__ = [hre_Escape.Literal,hre_Escape.Backreference,hre_Escape.Word,hre_Escape.NotWord,hre_Escape.Decimal,hre_Escape.NotDecimal,hre_Escape.Separator,hre_Escape.NotSeparator,hre_Escape.WordBoundary,hre_Escape.NotWordBoundary];
var hre_RegExpParser = function(source) {
	this.source = source;
	this.currentIndex = 0;
	this.length = source.length;
	this.capturesCount = 0;
};
hre_RegExpParser.__name__ = "hre.RegExpParser";
hre_RegExpParser.parse = function(pattern) {
	return new hre_RegExpParser(pattern).readPattern();
};
hre_RegExpParser.prototype = {
	source: null
	,currentIndex: null
	,length: null
	,capturesCount: null
	,isEndOfPattern: function() {
		if(this.peek()._hx_index == 0) {
			return true;
		} else {
			return false;
		}
	}
	,readPattern: function() {
		var alternatives = [];
		_hx_loop1: while(!this.isEndOfPattern()) {
			alternatives.push(this.readAlternative());
			var _g = this.peek();
			switch(_g._hx_index) {
			case 0:
				break _hx_loop1;
			case 1:
				var _g1 = _g.character;
				if(_g1 == "|") {
					this.currentIndex++;
				} else {
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected character " + _g1,this.currentIndex,this.source));
				}
				break;
			}
		}
		return new hre_ast_Pattern(alternatives,this.capturesCount);
	}
	,isEndOfDisjunction: function() {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return true;
		case 1:
			return _g.character == ")";
		}
	}
	,readDisjunction: function() {
		var alternatives = [];
		_hx_loop1: while(!this.isEndOfDisjunction()) {
			alternatives.push(this.readAlternative());
			var _g = this.peek();
			switch(_g._hx_index) {
			case 0:
				break _hx_loop1;
			case 1:
				var _g1 = _g.character;
				switch(_g1) {
				case ")":
					break _hx_loop1;
				case "|":
					this.currentIndex++;
					break;
				default:
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected character " + _g1,this.currentIndex,this.source));
				}
				break;
			}
		}
		return new hre_ast_Disjunction(alternatives);
	}
	,isEndOfAlternative: function() {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return true;
		case 1:
			var _g1 = _g.character;
			if(_g1 == "|" || _g1 == ")") {
				return true;
			} else {
				return false;
			}
			break;
		}
	}
	,readAlternative: function() {
		var terms = [];
		while(!this.isEndOfAlternative()) terms.push(this.readTerm());
		return new hre_ast_Alternative(terms);
	}
	,readTerm: function() {
		if(this.readQuantifier() != null) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("There is nothing to repeat",this.currentIndex,this.source));
		}
		var oldCapturesCount = this.capturesCount;
		var assertionOrAtom;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected end of text",this.currentIndex,this.source));
		case 1:
			var _g1 = _g.character;
			switch(_g1) {
			case "$":
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Left(hre_ast_Assertion.EndOfText);
				break;
			case "(":
				assertionOrAtom = this.readGroup();
				break;
			case ".":
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Right(hre_ast_Atom.AnyCharacter);
				break;
			case "[":
				assertionOrAtom = haxe_ds_Either.Right(this.readCharacterClass());
				break;
			case "\\":
				assertionOrAtom = this.readEscapeTerm();
				break;
			case "^":
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Left(hre_ast_Assertion.StartOfText);
				break;
			case "|":
				throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected syntax character |",this.currentIndex,this.source));
			default:
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Right(hre_ast_Atom.Literal(_g1));
			}
			break;
		}
		switch(assertionOrAtom._hx_index) {
		case 0:
			return hre_ast_Term.Assertion(assertionOrAtom.v);
		case 1:
			var _g = assertionOrAtom.v;
			var quantifier = this.readQuantifier();
			if(quantifier == null) {
				return hre_ast_Term.Atom(_g);
			} else {
				return hre_ast_Term.QuantifiedAtom(_g,quantifier,oldCapturesCount,this.capturesCount);
			}
			break;
		}
	}
	,readEscape: function(inCharacterClass) {
		if(this.peekChar() != "\\") {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid escape term, expected \\",this.currentIndex,this.source));
		}
		this.currentIndex++;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Escape at the end of the pattern",this.currentIndex,this.source));
		case 1:
			var _g1 = _g.character;
			var charCode = HxOverrides.cca(_g1,0);
			if(48 <= charCode && charCode <= 57) {
				if(charCode == 48) {
					this.currentIndex++;
					return hre_Escape.Literal(0);
				} else {
					if(inCharacterClass) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid decimal escape in character class",this.currentIndex,this.source));
					}
					return hre_Escape.Backreference(this.readDecimalDigits().value);
				}
			} else {
				switch(_g1) {
				case "B":
					if(inCharacterClass) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid `\\B` escape in character class",this.currentIndex,this.source));
					}
					this.currentIndex++;
					return hre_Escape.NotWordBoundary;
				case "D":
					this.currentIndex++;
					return hre_Escape.NotDecimal;
				case "S":
					this.currentIndex++;
					return hre_Escape.NotSeparator;
				case "W":
					this.currentIndex++;
					return hre_Escape.NotWord;
				case "b":
					this.currentIndex++;
					if(inCharacterClass) {
						return hre_Escape.Literal(8);
					} else {
						return hre_Escape.WordBoundary;
					}
					break;
				case "c":
					this.currentIndex++;
					var controlLetterCode = HxOverrides.cca(this.peekChar(),0);
					if(!(65 <= controlLetterCode && controlLetterCode <= 90) && !(97 <= controlLetterCode && controlLetterCode <= 122)) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Control letter must be in A-Za-z",this.currentIndex,this.source));
					}
					this.currentIndex++;
					return hre_Escape.Literal(controlLetterCode % 32);
				case "d":
					this.currentIndex++;
					return hre_Escape.Decimal;
				case "f":
					this.currentIndex++;
					return hre_Escape.Literal(12);
				case "n":
					this.currentIndex++;
					return hre_Escape.Literal(10);
				case "r":
					this.currentIndex++;
					return hre_Escape.Literal(13);
				case "s":
					this.currentIndex++;
					return hre_Escape.Separator;
				case "t":
					this.currentIndex++;
					return hre_Escape.Literal(9);
				case "u":
					this.currentIndex++;
					var codePoint;
					if(this.peekChar() == "{") {
						this.currentIndex++;
						var hexLiteral = this.readHexadecimal(4,-1);
						if(this.peekChar() != "}") {
							throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Expected `}`",this.currentIndex,this.source));
						}
						this.currentIndex++;
						codePoint = hexLiteral.value;
					} else {
						codePoint = this.readHexadecimal(4,4).value;
					}
					if(codePoint > 1114111) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Codepoint exceeds max value (0x10ffff)`",this.currentIndex,this.source));
					}
					return hre_Escape.Literal(codePoint);
				case "v":
					this.currentIndex++;
					return hre_Escape.Literal(11);
				case "w":
					this.currentIndex++;
					return hre_Escape.Word;
				case "x":
					this.currentIndex++;
					return hre_Escape.Literal(this.readHexadecimal(2,2).value);
				default:
					this.currentIndex++;
					return hre_Escape.Literal(HxOverrides.cca(_g1,0));
				}
			}
			break;
		}
	}
	,readEscapeTerm: function() {
		var _g = this.readEscape(false);
		switch(_g._hx_index) {
		case 0:
			var codePoint = _g.codepoint;
			return haxe_ds_Either.Right(hre_ast_Atom.Literal(String.fromCodePoint(codePoint)));
		case 1:
			return haxe_ds_Either.Right(hre_ast_Atom.Backreference(_g.captureId));
		case 2:
			return haxe_ds_Either.Right(hre_ast_Atom.Word);
		case 3:
			return haxe_ds_Either.Right(hre_ast_Atom.NotWord);
		case 4:
			return haxe_ds_Either.Right(hre_ast_Atom.Decimal);
		case 5:
			return haxe_ds_Either.Right(hre_ast_Atom.NotDecimal);
		case 6:
			return haxe_ds_Either.Right(hre_ast_Atom.Separator);
		case 7:
			return haxe_ds_Either.Right(hre_ast_Atom.NotSeparator);
		case 8:
			return haxe_ds_Either.Left(hre_ast_Assertion.WordBoundary);
		case 9:
			return haxe_ds_Either.Left(hre_ast_Assertion.NotWordBoundary);
		}
	}
	,readGroup: function() {
		if(this.peekChar() != "(") {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, expected (",this.currentIndex,this.source));
		}
		this.currentIndex++;
		var kind = hre_GroupKind.Capture;
		var oldCaptureCount = this.capturesCount;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unterminated group",this.currentIndex,this.source));
		case 1:
			if(_g.character == "?") {
				this.currentIndex++;
				var _g = this.peek();
				switch(_g._hx_index) {
				case 0:
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, expected modifier",this.currentIndex,this.source));
				case 1:
					var _g1 = _g.character;
					switch(_g1) {
					case "!":
						kind = hre_GroupKind.NotFollowedBy;
						break;
					case ":":
						kind = hre_GroupKind.Simple;
						break;
					case "=":
						kind = hre_GroupKind.FollowedBy;
						break;
					default:
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, unknown modifier: " + _g1,this.currentIndex,this.source));
					}
					break;
				}
				this.currentIndex++;
			}
			break;
		}
		if(kind._hx_index == 0) {
			this.capturesCount++;
		}
		var disjunction = this.readDisjunction();
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, unterminated group",this.currentIndex,this.source));
		case 1:
			if(_g.character == ")") {
				this.currentIndex++;
			}
			break;
		}
		switch(kind._hx_index) {
		case 0:
			return haxe_ds_Either.Right(hre_ast_Atom.CaptureGroup(disjunction,oldCaptureCount));
		case 1:
			return haxe_ds_Either.Right(hre_ast_Atom.SimpleGroup(disjunction));
		case 2:
			return haxe_ds_Either.Left(hre_ast_Assertion.FollowedBy(disjunction));
		case 3:
			return haxe_ds_Either.Left(hre_ast_Assertion.NotFollowedBy(disjunction));
		}
	}
	,isEndOfCharacterClass: function() {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return false;
		case 1:
			return _g.character == "]";
		}
	}
	,readCharacterClass: function() {
		if(this.peekChar() != "[") {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid character class, expected [",this.currentIndex,this.source));
		}
		this.currentIndex++;
		var inverted;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unterminated character class",this.currentIndex,this.source));
		case 1:
			if(_g.character == "^") {
				this.currentIndex++;
				inverted = true;
			} else {
				inverted = false;
			}
			break;
		}
		var ranges = [];
		while(!this.isEndOfCharacterClass()) ranges.push(this.readCharacterClassRange(ranges.length == 0));
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unterminated character class",this.currentIndex,this.source));
		case 1:
			if(_g.character == "]") {
				this.currentIndex++;
			}
			break;
		}
		return hre_ast_Atom.Class(new hre_ast_CharacterClass(inverted,ranges));
	}
	,readCharacterClassRange: function(firstRange) {
		var start = this.readCharacterClassAtom(!firstRange);
		if(start == null) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Expected character class atom",this.currentIndex,this.source));
		}
		if(this.peekChar() != "-") {
			return hre_ast_CharacterClassRange.Simple(start);
		}
		if(this.peekChar(1) == "]") {
			return hre_ast_CharacterClassRange.Simple(start);
		}
		this.currentIndex++;
		var end = this.readCharacterClassAtom(false);
		if(end == null) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid range in character class",this.currentIndex,this.source));
		}
		var startCharacter;
		if(start._hx_index == 0) {
			startCharacter = start.value;
		} else {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Start of range is not a literal",this.currentIndex,this.source));
		}
		var endCharacter;
		if(end._hx_index == 0) {
			endCharacter = end.value;
		} else {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("End of range is not a literal",this.currentIndex,this.source));
		}
		if(HxOverrides.cca(startCharacter,0) > HxOverrides.cca(endCharacter,0)) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid range",this.currentIndex,this.source));
		}
		return hre_ast_CharacterClassRange.Range(startCharacter,endCharacter);
	}
	,readCharacterClassAtom: function(noDash) {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return null;
		case 1:
			var _g1 = _g.character;
			switch(_g1) {
			case "-":
				if(noDash) {
					return null;
				}
				this.currentIndex++;
				return hre_ast_CharacterClassAtom.Literal("-");
			case "\\":
				return this.readEscapedCharacterClassAtom();
			case "]":
				return null;
			default:
				this.currentIndex++;
				return hre_ast_CharacterClassAtom.Literal(_g1);
			}
			break;
		}
	}
	,readEscapedCharacterClassAtom: function() {
		var $escape = this.readEscape(true);
		switch($escape._hx_index) {
		case 0:
			var codePoint = $escape.codepoint;
			return hre_ast_CharacterClassAtom.Literal(String.fromCodePoint(codePoint));
		case 2:
			return hre_ast_CharacterClassAtom.Word;
		case 3:
			return hre_ast_CharacterClassAtom.NotWord;
		case 4:
			return hre_ast_CharacterClassAtom.Decimal;
		case 5:
			return hre_ast_CharacterClassAtom.NotDecimal;
		case 6:
			return hre_ast_CharacterClassAtom.Separator;
		case 7:
			return hre_ast_CharacterClassAtom.NotSeparator;
		default:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected escape in character class: " + Type.enumConstructor($escape),this.currentIndex,this.source));
		}
	}
	,isGreedyQuantifier: function() {
		var _g = this.peek();
		if(_g._hx_index == 1) {
			return _g.character != "?";
		} else {
			return true;
		}
	}
	,readQuantifierPrefix: function() {
		var _g = this.peek();
		if(_g._hx_index == 1) {
			switch(_g.character) {
			case "*":
				this.currentIndex++;
				return new hre_QuantifierPrefix(0,-1);
			case "+":
				this.currentIndex++;
				return new hre_QuantifierPrefix(1,-1);
			case "?":
				this.currentIndex++;
				return new hre_QuantifierPrefix(0,1);
			case "{":
				return this.readQuantifierBlock();
			default:
				return null;
			}
		} else {
			return null;
		}
	}
	,readQuantifierBlock: function() {
		var oldIndex = this.currentIndex;
		if(this.peekChar() != "{") {
			return null;
		}
		this.currentIndex++;
		var min = this.readDecimalDigits();
		var minVal = min.value;
		if(min.length == 0) {
			this.currentIndex = oldIndex;
			return null;
		}
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			this.currentIndex = oldIndex;
			return null;
		case 1:
			switch(_g.character) {
			case ",":
				this.currentIndex++;
				break;
			case "}":
				this.currentIndex++;
				return new hre_QuantifierPrefix(minVal,minVal);
			default:
				this.currentIndex = oldIndex;
				return null;
			}
			break;
		}
		var max = this.readDecimalDigits();
		var maxLen = max.length;
		var maxVal = max.value;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			this.currentIndex = oldIndex;
			return null;
		case 1:
			if(_g.character != "}") {
				this.currentIndex = oldIndex;
				return null;
			}
			this.currentIndex++;
			if(maxLen == 0) {
				return new hre_QuantifierPrefix(minVal,-1);
			} else {
				if(maxVal < minVal) {
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Max is finite and less than min",this.currentIndex,this.source));
				}
				return new hre_QuantifierPrefix(minVal,maxVal);
			}
			break;
		}
	}
	,readQuantifier: function() {
		var prefix = this.readQuantifierPrefix();
		if(prefix == null) {
			return null;
		}
		var greedy = this.isGreedyQuantifier();
		if(!greedy) {
			this.currentIndex++;
		}
		return new hre_ast_Quantifier(prefix.min,prefix.max,greedy);
	}
	,readDecimalDigits: function() {
		var len = 0;
		var val = 0;
		while(true) {
			var _g = this.peek();
			if(_g._hx_index == 1) {
				var charCode = HxOverrides.cca(_g.character,0);
				if(48 <= charCode && charCode <= 57) {
					this.currentIndex++;
					++len;
					val = 10 * val + (charCode - 48);
				} else {
					break;
				}
			} else {
				break;
			}
		}
		return new hre_IntLiteral(len,val);
	}
	,readHexadecimal: function(minLen,maxLen) {
		var len = 0;
		var val = 0;
		while(!(maxLen == -1 && len >= maxLen)) {
			var _g = this.peek();
			if(_g._hx_index == 1) {
				var charCode = HxOverrides.cca(_g.character,0);
				if(48 <= charCode && charCode <= 57) {
					this.currentIndex++;
					++len;
					val = 16 * val + (charCode - 48);
				} else if(65 <= charCode && charCode <= 70) {
					this.currentIndex++;
					++len;
					val = 16 * val + (10 + charCode - 65);
				} else if(97 <= charCode && charCode <= 102) {
					this.currentIndex++;
					++len;
					val = 16 * val + (10 + charCode - 97);
				} else {
					break;
				}
			} else {
				break;
			}
		}
		if(len < minLen) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Not enough hex digits",this.currentIndex,this.source));
		}
		return new hre_IntLiteral(len,val);
	}
	,symbolAt: function(index) {
		if(index < this.length) {
			return hre_tokens_Symbol.Character(this.source.charAt(index));
		} else {
			return hre_tokens_Symbol.EndOfText;
		}
	}
	,charAt: function(index) {
		if(index >= this.length) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected end of text",this.currentIndex,this.source));
		}
		return this.source.charAt(index);
	}
	,peek: function(lookahead) {
		if(lookahead == null) {
			lookahead = 0;
		}
		return this.symbolAt(this.currentIndex + lookahead);
	}
	,peekChar: function(lookahead) {
		if(lookahead == null) {
			lookahead = 0;
		}
		return this.charAt(this.currentIndex + lookahead);
	}
	,__class__: hre_RegExpParser
};
var hre_GroupKind = $hxEnums["hre.GroupKind"] = { __ename__:"hre.GroupKind",__constructs__:null
	,Capture: {_hx_name:"Capture",_hx_index:0,__enum__:"hre.GroupKind",toString:$estr}
	,Simple: {_hx_name:"Simple",_hx_index:1,__enum__:"hre.GroupKind",toString:$estr}
	,FollowedBy: {_hx_name:"FollowedBy",_hx_index:2,__enum__:"hre.GroupKind",toString:$estr}
	,NotFollowedBy: {_hx_name:"NotFollowedBy",_hx_index:3,__enum__:"hre.GroupKind",toString:$estr}
};
hre_GroupKind.__constructs__ = [hre_GroupKind.Capture,hre_GroupKind.Simple,hre_GroupKind.FollowedBy,hre_GroupKind.NotFollowedBy];
var hre_ast_Alternative = function(expressions) {
	this.terms = expressions;
};
hre_ast_Alternative.__name__ = "hre.ast.Alternative";
hre_ast_Alternative.prototype = {
	terms: null
	,__class__: hre_ast_Alternative
};
var hre_ast_Assertion = $hxEnums["hre.ast.Assertion"] = { __ename__:"hre.ast.Assertion",__constructs__:null
	,StartOfText: {_hx_name:"StartOfText",_hx_index:0,__enum__:"hre.ast.Assertion",toString:$estr}
	,EndOfText: {_hx_name:"EndOfText",_hx_index:1,__enum__:"hre.ast.Assertion",toString:$estr}
	,WordBoundary: {_hx_name:"WordBoundary",_hx_index:2,__enum__:"hre.ast.Assertion",toString:$estr}
	,NotWordBoundary: {_hx_name:"NotWordBoundary",_hx_index:3,__enum__:"hre.ast.Assertion",toString:$estr}
	,FollowedBy: ($_=function(disjunction) { return {_hx_index:4,disjunction:disjunction,__enum__:"hre.ast.Assertion",toString:$estr}; },$_._hx_name="FollowedBy",$_.__params__ = ["disjunction"],$_)
	,NotFollowedBy: ($_=function(disjunction) { return {_hx_index:5,disjunction:disjunction,__enum__:"hre.ast.Assertion",toString:$estr}; },$_._hx_name="NotFollowedBy",$_.__params__ = ["disjunction"],$_)
};
hre_ast_Assertion.__constructs__ = [hre_ast_Assertion.StartOfText,hre_ast_Assertion.EndOfText,hre_ast_Assertion.WordBoundary,hre_ast_Assertion.NotWordBoundary,hre_ast_Assertion.FollowedBy,hre_ast_Assertion.NotFollowedBy];
var hre_ast_Atom = $hxEnums["hre.ast.Atom"] = { __ename__:"hre.ast.Atom",__constructs__:null
	,AnyCharacter: {_hx_name:"AnyCharacter",_hx_index:0,__enum__:"hre.ast.Atom",toString:$estr}
	,Decimal: {_hx_name:"Decimal",_hx_index:1,__enum__:"hre.ast.Atom",toString:$estr}
	,NotDecimal: {_hx_name:"NotDecimal",_hx_index:2,__enum__:"hre.ast.Atom",toString:$estr}
	,Separator: {_hx_name:"Separator",_hx_index:3,__enum__:"hre.ast.Atom",toString:$estr}
	,NotSeparator: {_hx_name:"NotSeparator",_hx_index:4,__enum__:"hre.ast.Atom",toString:$estr}
	,Word: {_hx_name:"Word",_hx_index:5,__enum__:"hre.ast.Atom",toString:$estr}
	,NotWord: {_hx_name:"NotWord",_hx_index:6,__enum__:"hre.ast.Atom",toString:$estr}
	,Backreference: ($_=function(captureId) { return {_hx_index:7,captureId:captureId,__enum__:"hre.ast.Atom",toString:$estr}; },$_._hx_name="Backreference",$_.__params__ = ["captureId"],$_)
	,Literal: ($_=function(literal) { return {_hx_index:8,literal:literal,__enum__:"hre.ast.Atom",toString:$estr}; },$_._hx_name="Literal",$_.__params__ = ["literal"],$_)
	,Class: ($_=function(characterClass) { return {_hx_index:9,characterClass:characterClass,__enum__:"hre.ast.Atom",toString:$estr}; },$_._hx_name="Class",$_.__params__ = ["characterClass"],$_)
	,CaptureGroup: ($_=function(disjunction,captureIndex) { return {_hx_index:10,disjunction:disjunction,captureIndex:captureIndex,__enum__:"hre.ast.Atom",toString:$estr}; },$_._hx_name="CaptureGroup",$_.__params__ = ["disjunction","captureIndex"],$_)
	,SimpleGroup: ($_=function(disjunction) { return {_hx_index:11,disjunction:disjunction,__enum__:"hre.ast.Atom",toString:$estr}; },$_._hx_name="SimpleGroup",$_.__params__ = ["disjunction"],$_)
};
hre_ast_Atom.__constructs__ = [hre_ast_Atom.AnyCharacter,hre_ast_Atom.Decimal,hre_ast_Atom.NotDecimal,hre_ast_Atom.Separator,hre_ast_Atom.NotSeparator,hre_ast_Atom.Word,hre_ast_Atom.NotWord,hre_ast_Atom.Backreference,hre_ast_Atom.Literal,hre_ast_Atom.Class,hre_ast_Atom.CaptureGroup,hre_ast_Atom.SimpleGroup];
var hre_ast_CharacterClass = function(inverted,ranges) {
	this.inverted = inverted;
	this.ranges = ranges;
};
hre_ast_CharacterClass.__name__ = "hre.ast.CharacterClass";
hre_ast_CharacterClass.prototype = {
	inverted: null
	,ranges: null
	,__class__: hre_ast_CharacterClass
};
var hre_ast_CharacterClassAtom = $hxEnums["hre.ast.CharacterClassAtom"] = { __ename__:"hre.ast.CharacterClassAtom",__constructs__:null
	,Literal: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}; },$_._hx_name="Literal",$_.__params__ = ["value"],$_)
	,Decimal: {_hx_name:"Decimal",_hx_index:1,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,NotDecimal: {_hx_name:"NotDecimal",_hx_index:2,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,Separator: {_hx_name:"Separator",_hx_index:3,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,NotSeparator: {_hx_name:"NotSeparator",_hx_index:4,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,Word: {_hx_name:"Word",_hx_index:5,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,NotWord: {_hx_name:"NotWord",_hx_index:6,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
};
hre_ast_CharacterClassAtom.__constructs__ = [hre_ast_CharacterClassAtom.Literal,hre_ast_CharacterClassAtom.Decimal,hre_ast_CharacterClassAtom.NotDecimal,hre_ast_CharacterClassAtom.Separator,hre_ast_CharacterClassAtom.NotSeparator,hre_ast_CharacterClassAtom.Word,hre_ast_CharacterClassAtom.NotWord];
var hre_ast_CharacterClassRange = $hxEnums["hre.ast.CharacterClassRange"] = { __ename__:"hre.ast.CharacterClassRange",__constructs__:null
	,Range: ($_=function(start,end) { return {_hx_index:0,start:start,end:end,__enum__:"hre.ast.CharacterClassRange",toString:$estr}; },$_._hx_name="Range",$_.__params__ = ["start","end"],$_)
	,Simple: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"hre.ast.CharacterClassRange",toString:$estr}; },$_._hx_name="Simple",$_.__params__ = ["value"],$_)
};
hre_ast_CharacterClassRange.__constructs__ = [hre_ast_CharacterClassRange.Range,hre_ast_CharacterClassRange.Simple];
var hre_ast_Disjunction = function(alternatives) {
	this.alternatives = alternatives;
};
hre_ast_Disjunction.__name__ = "hre.ast.Disjunction";
hre_ast_Disjunction.prototype = {
	alternatives: null
	,__class__: hre_ast_Disjunction
};
var hre_ast_Pattern = function(alternatives,captures) {
	hre_ast_Disjunction.call(this,alternatives);
	this.captures = captures;
};
hre_ast_Pattern.__name__ = "hre.ast.Pattern";
hre_ast_Pattern.__super__ = hre_ast_Disjunction;
hre_ast_Pattern.prototype = $extend(hre_ast_Disjunction.prototype,{
	captures: null
	,__class__: hre_ast_Pattern
});
var hre_ast_Quantifier = function(min,max,greedy) {
	this.min = min;
	this.max = max;
	this.greedy = greedy;
};
hre_ast_Quantifier.__name__ = "hre.ast.Quantifier";
hre_ast_Quantifier.prototype = {
	min: null
	,max: null
	,greedy: null
	,__class__: hre_ast_Quantifier
};
var hre_ast_Term = $hxEnums["hre.ast.Term"] = { __ename__:"hre.ast.Term",__constructs__:null
	,Assertion: ($_=function(assertion) { return {_hx_index:0,assertion:assertion,__enum__:"hre.ast.Term",toString:$estr}; },$_._hx_name="Assertion",$_.__params__ = ["assertion"],$_)
	,Atom: ($_=function(atom) { return {_hx_index:1,atom:atom,__enum__:"hre.ast.Term",toString:$estr}; },$_._hx_name="Atom",$_.__params__ = ["atom"],$_)
	,QuantifiedAtom: ($_=function(atom,quantifier,capturesStartIndex,capturesEndIndex) { return {_hx_index:2,atom:atom,quantifier:quantifier,capturesStartIndex:capturesStartIndex,capturesEndIndex:capturesEndIndex,__enum__:"hre.ast.Term",toString:$estr}; },$_._hx_name="QuantifiedAtom",$_.__params__ = ["atom","quantifier","capturesStartIndex","capturesEndIndex"],$_)
};
hre_ast_Term.__constructs__ = [hre_ast_Term.Assertion,hre_ast_Term.Atom,hre_ast_Term.QuantifiedAtom];
var hre_tokens_Symbol = $hxEnums["hre.tokens.Symbol"] = { __ename__:"hre.tokens.Symbol",__constructs__:null
	,EndOfText: {_hx_name:"EndOfText",_hx_index:0,__enum__:"hre.tokens.Symbol",toString:$estr}
	,Character: ($_=function(character) { return {_hx_index:1,character:character,__enum__:"hre.tokens.Symbol",toString:$estr}; },$_._hx_name="Character",$_.__params__ = ["character"],$_)
};
hre_tokens_Symbol.__constructs__ = [hre_tokens_Symbol.EndOfText,hre_tokens_Symbol.Character];
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isInterface = function(o) {
	return o.__isInterface__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (js_Boot.isClass(o) || js_Boot.isEnum(o))) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	while(true) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		var intf = cc.__interfaces__;
		if(intf != null) {
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = intf[_g++];
				if(i == cl || js_Boot.__interfLoop(i,cl)) {
					return true;
				}
			}
		}
		cc = cc.__super__;
	}
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(js_Boot.isInterface(cl)) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Lib = function() { };
js_Lib.__name__ = "js.Lib";
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.get_undefined = function() {
	return undefined;
};
js_Lib.getNextHaxeUID = function() {
	return $global.$haxeUID++;
};
var stx_Arw = function() { };
stx_Arw.__name__ = "stx.Arw";
stx_Arw.ctx = function(wildcard,p) {
	return stx_arw_Contextualize.pure(p);
};
stx_Arw.Fun = function(fn) {
	return stx_arw_Arrowlet.Sync(fn);
};
var stx_LiftArrowletToCascade = function() { };
stx_LiftArrowletToCascade.__name__ = "stx.LiftArrowletToCascade";
stx_LiftArrowletToCascade.toCascade = function(arw) {
	return stx_arw_Cascade.fromArrowlet(arw);
};
var stx_LiftRectifyToCascade = function() { };
stx_LiftRectifyToCascade.__name__ = "stx.LiftRectifyToCascade";
stx_LiftRectifyToCascade.toCascade = function(arw) {
	return stx_arw_Rectify.toCascade(stx_arw_Rectify.lift(arw));
};
var stx_LiftAttemptToCascade = function() { };
stx_LiftAttemptToCascade.__name__ = "stx.LiftAttemptToCascade";
stx_LiftAttemptToCascade.toCascade = function(arw) {
	return stx_arw_Attempt.toCascade(stx_arw_Attempt.lift(arw));
};
var stx_LiftRecoverToCascade = function() { };
stx_LiftRecoverToCascade.__name__ = "stx.LiftRecoverToCascade";
var stx_LiftExecuteToCascade = function() { };
stx_LiftExecuteToCascade.__name__ = "stx.LiftExecuteToCascade";
stx_LiftExecuteToCascade.toCascade = function(arw) {
	return stx_arw_Command.toCascade(stx_arw_Command.lift(arw));
};
var stx_LiftAttemptFunctionToAttempt = function() { };
stx_LiftAttemptFunctionToAttempt.__name__ = "stx.LiftAttemptFunctionToAttempt";
stx_LiftAttemptFunctionToAttempt.toAttempt = function(fn) {
	return stx_arw_Attempt.fromFun1Res(fn);
};
var stx_LiftAssert = function() { };
stx_LiftAssert.__name__ = "stx.LiftAssert";
stx_LiftAssert.that = function(stx,pos) {
	return new stx_assert_Module(pos);
};
stx_LiftAssert.assert = function(__,pos) {
	return new stx_assert_module_Crunch(pos);
};
stx_LiftAssert.report = function(b,err) {
	if(b) {
		return stx_nano_Report.unit();
	} else {
		return stx_nano_Report.pure(err);
	}
};
var stx_LiftErr = function() { };
stx_LiftErr.__name__ = "stx.LiftErr";
var stx_Async = function() { };
stx_Async.__name__ = "stx.Async";
stx_Async.timer = function(wildcard) {
	return stx_async_Timer._new();
};
var stx_Stat = function() {
};
stx_Stat.__name__ = "stx.Stat";
stx_Stat.prototype = {
	last: null
	,duration: null
	,__class__: stx_Stat
};
var stx_LiftDefectNoiseToErr = function() { };
stx_LiftDefectNoiseToErr.__name__ = "stx.LiftDefectNoiseToErr";
stx_LiftDefectNoiseToErr.toErr = function(e,pos) {
	return stx_nano_Fault.err(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/Async.hx", lineNumber : 50, className : "stx.LiftDefectNoiseToErr", methodName : "toErr"}),"E_UndefinedError");
};
var stx_LiftString = function() { };
stx_LiftString.__name__ = "stx.LiftString";
stx_LiftString.sep = function(path) {
	if(new haxe_io_Path(path).backslash) {
		return "\\";
	} else {
		return "/";
	}
};
stx_LiftString.toChars = function(self) {
	return self;
};
var stx_AppliableApi = function() { };
stx_AppliableApi.__name__ = "stx.AppliableApi";
stx_AppliableApi.__isInterface__ = true;
stx_AppliableApi.prototype = {
	apply: null
	,__class__: stx_AppliableApi
};
var stx_BinomialApi = function() { };
stx_BinomialApi.__name__ = "stx.BinomialApi";
stx_BinomialApi.__isInterface__ = true;
stx_BinomialApi.prototype = {
	duoply: null
	,__class__: stx_BinomialApi
};
var stx_RepliableApi = function() { };
stx_RepliableApi.__name__ = "stx.RepliableApi";
stx_RepliableApi.__isInterface__ = true;
stx_RepliableApi.prototype = {
	reply: null
	,__class__: stx_RepliableApi
};
var stx_LogicSum = $hxEnums["stx.LogicSum"] = { __ename__:"stx.LogicSum",__constructs__:null
	,Seq: ($_=function(l,r) { return {_hx_index:0,l:l,r:r,__enum__:"stx.LogicSum",toString:$estr}; },$_._hx_name="Seq",$_.__params__ = ["l","r"],$_)
	,Alt: ($_=function(l,r) { return {_hx_index:1,l:l,r:r,__enum__:"stx.LogicSum",toString:$estr}; },$_._hx_name="Alt",$_.__params__ = ["l","r"],$_)
	,Neg: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"stx.LogicSum",toString:$estr}; },$_._hx_name="Neg",$_.__params__ = ["v"],$_)
	,App: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"stx.LogicSum",toString:$estr}; },$_._hx_name="App",$_.__params__ = ["v"],$_)
};
stx_LogicSum.__constructs__ = [stx_LogicSum.Seq,stx_LogicSum.Alt,stx_LogicSum.Neg,stx_LogicSum.App];
var stx_OpSum = $hxEnums["stx.OpSum"] = { __ename__:"stx.OpSum",__constructs__:null
	,Nop: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.OpSum",toString:$estr}; },$_._hx_name="Nop",$_.__params__ = ["v"],$_)
	,Unop: ($_=function(op,v) { return {_hx_index:1,op:op,v:v,__enum__:"stx.OpSum",toString:$estr}; },$_._hx_name="Unop",$_.__params__ = ["op","v"],$_)
	,Binop: ($_=function(op,l,r) { return {_hx_index:2,op:op,l:l,r:r,__enum__:"stx.OpSum",toString:$estr}; },$_._hx_name="Binop",$_.__params__ = ["op","l","r"],$_)
};
stx_OpSum.__constructs__ = [stx_OpSum.Nop,stx_OpSum.Unop,stx_OpSum.Binop];
var stx_Ext = function() { };
stx_Ext.__name__ = "stx.Ext";
stx_Ext.core = function(wildcard) {
	return new stx_ext_Module();
};
stx_Ext.here = function(wildcard,pos) {
	return pos;
};
stx_Ext.rtid = function(wildcard) {
	return function() {
	};
};
stx_Ext.chunk = function(_,v) {
	if(v == null) {
		return stx_ext_ChunkSum.Tap;
	} else {
		return stx_ext_ChunkSum.Val(v);
	}
};
stx_Ext.cell = function(_,v) {
	return stx_ext_Cell.fromT(v);
};
var stx_Fn = function() { };
stx_Fn.__name__ = "stx.Fn";
stx_Fn.fn = function(wildcard) {
	return new stx_fn_Module();
};
stx_Fn._0x = function(fn) {
	return stx_pico_OptionLift.def(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fn),stx_fn_Block.lift),stx_fn_Block.unit);
};
stx_Fn._1x = function(fn) {
	return stx_pico_OptionLift.def(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fn),stx_fn_Sink.lift),stx_fn_Sink.unit);
};
stx_Fn._1r = function() {
	return stx_fn_Unary.unit();
};
var stx_LiftCurriedBinary = function() { };
stx_LiftCurriedBinary.__name__ = "stx.LiftCurriedBinary";
stx_LiftCurriedBinary.uncurry = function(f) {
	return function(p1,p2) {
		return (f(p1))(p2);
	};
};
var stx_LiftCurriedTernary = function() { };
stx_LiftCurriedTernary.__name__ = "stx.LiftCurriedTernary";
stx_LiftCurriedTernary.uncurry = function(f) {
	return function(p1,p2,p3) {
		return ((f(p1))(p2))(p3);
	};
};
var stx_LiftFn = function() { };
stx_LiftFn.__name__ = "stx.LiftFn";
stx_LiftFn.pinch = function(fn0) {
	return function(x) {
		return fn0(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,x,x));
	};
};
stx_LiftFn.repeat = function(fn) {
	return function(v) {
		var i = null;
		var o = null;
		_hx_loop1: while(true) {
			var _g = fn(i);
			switch(_g._hx_index) {
			case 0:
				i = _g.v;
				break;
			case 1:
				o = _g.v;
				break _hx_loop1;
			}
		}
		return o;
	};
};
var stx_LiftUnary = function() { };
stx_LiftUnary.__name__ = "stx.LiftUnary";
stx_LiftUnary.fn = function(f) {
	return f;
};
var stx_LiftBlock = function() { };
stx_LiftBlock.__name__ = "stx.LiftBlock";
stx_LiftBlock.fn = function(f) {
	return f;
};
var stx_LiftThunk = function() { };
stx_LiftThunk.__name__ = "stx.LiftThunk";
stx_LiftThunk.fn = function(fn) {
	return fn;
};
var stx_LiftBinary = function() { };
stx_LiftBinary.__name__ = "stx.LiftBinary";
stx_LiftBinary.fn = function(fn) {
	return stx_fn_Binary._new(fn);
};
stx_LiftBinary.bind1 = function(fn,p) {
	var _g = fn;
	var a1 = p;
	return function(a2) {
		return _g(a1,a2);
	};
};
var stx_LiftPerhapsConstructor = function() { };
stx_LiftPerhapsConstructor.__name__ = "stx.LiftPerhapsConstructor";
stx_LiftPerhapsConstructor.perhaps = function(fn) {
	return function(x) {
		switch(x._hx_index) {
		case 0:
			return fn(x.v);
		case 1:
			return haxe_ds_Option.None;
		}
	};
};
var stx_LiftPerhaps = function() { };
stx_LiftPerhaps.__name__ = "stx.LiftPerhaps";
stx_LiftPerhaps.perhaps = function(fn) {
	return function(x) {
		switch(x._hx_index) {
		case 0:
			return haxe_ds_Option.Some(fn(x.v));
		case 1:
			return haxe_ds_Option.None;
		}
	};
};
var stx_LiftTernary = function() { };
stx_LiftTernary.__name__ = "stx.LiftTernary";
stx_LiftTernary.fn = function(fn) {
	return fn;
};
var stx_LiftIf = function() { };
stx_LiftIf.__name__ = "stx.LiftIf";
stx_LiftIf.if_else = function(b,yes,no) {
	if(b) {
		return yes();
	} else {
		return no();
	}
};
var stx_Fp = function() { };
stx_Fp.__name__ = "stx.Fp";
stx_Fp.handle = function(opt) {
};
var stx_LiftFp = function() { };
stx_LiftFp.__name__ = "stx.LiftFp";
stx_LiftFp.asState = function(fn) {
	return stx_fp_State._new(fn);
};
var stx_LiftLog = function() { };
stx_LiftLog.__name__ = "stx.LiftLog";
stx_LiftLog.log = function(wildcard) {
	return stx_Log.ZERO;
};
stx_LiftLog.scope = function(stx,pos,method) {
	return stx_log_LogPosition.get_scoping(stx_log_LogPosition.fromPos(pos));
};
stx_LiftLog.stamp = function(pos) {
	return stx_log_LogPosition._new(pos);
};
var stx_log_Debugging = function() { };
stx_log_Debugging.__name__ = "stx.log.Debugging";
stx_log_Debugging.prototype = {
	note: function(str,pos) {
	}
	,__class__: stx_log_Debugging
};
var stx_log_OutputApi = function() { };
stx_log_OutputApi.__name__ = "stx.log.OutputApi";
stx_log_OutputApi.__isInterface__ = true;
stx_log_OutputApi.prototype = {
	render: null
	,__class__: stx_log_OutputApi
};
var stx_log_output_term_Full = function() { };
stx_log_output_term_Full.__name__ = "stx.log.output.term.Full";
stx_log_output_term_Full.__interfaces__ = [stx_log_OutputApi];
stx_log_output_term_Full.clear = function() {
	js_Boot.__clear_trace();
};
stx_log_output_term_Full.__super__ = stx_log_Debugging;
stx_log_output_term_Full.prototype = $extend(stx_log_Debugging.prototype,{
	render: function(v,infos) {
		this.note("haxelog " + Std.string(infos),{ fileName : "stx/log/output/term/Full.hx", lineNumber : 5, className : "stx.log.output.term.Full", methodName : "render"});
		this.note("js",{ fileName : "stx/log/output/term/Full.hx", lineNumber : 24, className : "stx.log.output.term.Full", methodName : "render"});
		new stx_log_output_term_Js().render(v,infos);
	}
	,__class__: stx_log_output_term_Full
});
var stx_log_LoggerApi = function() { };
stx_log_LoggerApi.__name__ = "stx.log.LoggerApi";
stx_log_LoggerApi.__isInterface__ = true;
stx_log_LoggerApi.prototype = {
	format: null
	,logic: null
	,apply: null
	,do_apply: null
	,__class__: stx_log_LoggerApi
};
var stx_log_Logger = function(logic,format) {
	this.logic = stx_log_Logic.fromFilter(stx_pico_OptionLift.def(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,logic),stx_log_Filter.Unit));
	this.format = stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,format),stx_log_Format.unit());
};
stx_log_Logger.__name__ = "stx.log.Logger";
stx_log_Logger.__interfaces__ = [stx_log_LoggerApi];
stx_log_Logger.spur = function(value) {
	return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logger.hx", lineNumber : 6, className : "stx.log.Logger", methodName : "spur"}),stx_fail_LogFailure.E_Log_Zero));
};
stx_log_Logger.__super__ = stx_log_output_term_Full;
stx_log_Logger.prototype = $extend(stx_log_output_term_Full.prototype,{
	logic: null
	,format: null
	,apply: function(value) {
		var _gthis = this;
		return stx_fp_ContinuationLift.mod(this.do_apply(value),function(res) {
			return stx_nano_ResLift.map(res,stx_nano_lift_LiftNano.passthrough(stx_nano_Wildcard.__,function(string) {
				if(!value.get_stamp().hidden) {
					_gthis.render(string,value.source);
				}
			}));
		});
	}
	,do_apply: function(value) {
		var _gthis = this;
		return stx_fp_Continuation.lift(function(fn) {
			return stx_nano_Report.populate(stx_log_Logic.apply(_gthis.logic,value),function() {
				return stx_log_Format.print(_gthis.format,value);
			});
		});
	}
	,__class__: stx_log_Logger
});
var stx_log_logger_Default = function() {
	stx_log_Logger.call(this);
	this.level = 0;
	this.verbose = false;
	this.reinstate = false;
	this.includes = [];
};
stx_log_logger_Default.__name__ = "stx.log.logger.Default";
stx_log_logger_Default.__super__ = stx_log_Logger;
stx_log_logger_Default.prototype = $extend(stx_log_Logger.prototype,{
	level: null
	,reinstate: null
	,includes: null
	,verbose: null
	,do_apply: function(value) {
		var _gthis = this;
		var parent = stx_nano_ResLift.ok((stx_log_Logger.prototype.do_apply.call(this,value))(function(_) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/logger/Default.hx", lineNumber : 17, className : "stx.log.logger.Default", methodName : "do_apply"}),stx_fail_LogFailure.E_Log_Zero));
		}));
		var is_custom = stx_log_Signal.is_custom;
		var level = stx_log_Level.asInt(value.get_stamp().level) >= stx_log_Level.asInt(this.level);
		var include_tag = stx_lift_ArrayLift.is_defined(this.includes) ? stx_lift_ArrayLift.any(this.includes,function(x) {
			return stx_pico_OptionLift.is_defined(stx_lift_ArrayLift.search(value.get_stamp().tags,function(y) {
				return x == y;
			}));
		}) : !stx_lift_ArrayLift.is_defined(value.get_stamp().tags);
		var res = stx_nano_lift_LiftNano.if_else(is_custom,function() {
			return _gthis.reinstate;
		},function() {
			return stx_nano_lift_LiftNano.if_else(_gthis.verbose,function() {
				return true;
			},function() {
				return stx_nano_lift_LiftNano.if_else(include_tag,function() {
					if(parent) {
						return level;
					} else {
						return false;
					}
				},function() {
					return false;
				});
			});
		});
		this.note("is_custom:" + (is_custom == null ? "null" : "" + is_custom) + " " + ("parent:" + (parent == null ? "null" : "" + parent) + " ") + ("level:" + (level == null ? "null" : "" + level) + " ") + ("includes:" + Std.string(this.includes) + " ") + ("include_tag:" + (include_tag == null ? "null" : "" + include_tag) + " ") + ("stamp_tag:" + Std.string(value.get_stamp().tags) + " ") + ("parent && level: " + Std.string(parent && level) + " ") + ("verbose:" + Std.string(this.verbose) + " ") + ("res:" + (res == null ? "null" : "" + res) + " "),{ fileName : "stx/log/logger/Default.hx", lineNumber : 36, className : "stx.log.logger.Default", methodName : "do_apply"});
		return function(fn) {
			return stx_nano_lift_LiftNano.if_else(res,function() {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_log_Format.print(_gthis.format,value));
			},function() {
				return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/logger/Default.hx", lineNumber : 49, className : "stx.log.logger.Default", methodName : "do_apply"}),stx_fail_LogFailure.E_Log_Default({ is_custom : is_custom, parent : parent, level : level, includes : _gthis.includes, include_tag : include_tag, stamp_tag : value.get_stamp().tags, verbose : _gthis.verbose})));
			});
		};
	}
	,reset: function() {
		stx_log_Includes.clear(this.includes);
		this.level = 0;
		this.logic = stx_Log._.Logic().always();
	}
	,__class__: stx_log_logger_Default
});
var stx_log_LogicLift = function() { };
stx_log_LogicLift.__name__ = "stx.log.LogicLift";
stx_log_LogicLift.make = function() {
	return { pack : stx_log_Logic.pack, type : stx_log_Logic.type, line : stx_log_Logic.line, lines : stx_log_Logic.lines, tag : stx_log_Logic.tag, always : stx_log_Logic.always, never : stx_log_Logic.never, method : stx_log_Logic.method};
};
stx_log_LogicLift._ = function(fn) {
	return fn(stx_log_LogicLift.make());
};
var stx_log_Logic = {};
stx_log_Logic.__properties__ = {get_self:"get_self"};
stx_log_Logic._new = function(self) {
	return self;
};
stx_log_Logic.lift = function(self) {
	return stx_log_Logic._new(self);
};
stx_log_Logic.constructor = function(fn) {
	return stx_log_Logic._._(fn);
};
stx_log_Logic.fromPosPredicate = function(self) {
	return stx_log_Logic.fromFilter(new stx_log_filter_term_PosPredicate(self));
};
stx_log_Logic.fromFilter = function(self) {
	return stx_log_LogicSum.LV(self);
};
stx_log_Logic.and = function(this1,that) {
	return stx_log_LogicSum.LAnd(this1,that);
};
stx_log_Logic.or = function(this1,that) {
	return stx_log_LogicSum.LOr(this1,that);
};
stx_log_Logic.not = function(this1) {
	return stx_log_LogicSum.LNot(stx_log_Logic.lift(this1));
};
stx_log_Logic.apply = function(this1,value) {
	switch(this1._hx_index) {
	case 0:
		var r = this1.r;
		return stx_nano_Report.or(stx_log_Logic.apply(this1.l,value),function() {
			return stx_log_Logic.apply(r,value);
		});
	case 1:
		var r1 = this1.r;
		var fst = stx_log_Logic.apply(this1.l,value);
		return stx_nano_lift_LiftNano.if_else(stx_pico_OptionLift.is_defined(fst),function() {
			return stx_log_Logic.apply(r1,value);
		},function() {
			return fst;
		});
	case 2:
		return stx_pico_OptionLift.fold(stx_log_Logic.apply(this1.l,value),function(e) {
			return stx_nano_Report.unit();
		},function() {
			return stx_nano_Report.make(stx_fail_LogFailure.E_Log_Not,{ fileName : "stx/log/Logic.hx", lineNumber : 58, className : "stx.log._Logic.Logic_Impl_", methodName : "apply"});
		});
	case 3:
		return this1.v.applyI(value);
	}
};
stx_log_Logic.opine = function(this1,value) {
	return stx_log_Logic.apply(this1,value);
};
stx_log_Logic.prj = function(this1) {
	return this1;
};
stx_log_Logic.get_self = function(this1) {
	return stx_log_Logic.lift(this1);
};
stx_log_Logic.construct = function(fn) {
	return stx_log_Logic.fromPosPredicate(stx_assert_Predicate.Anon(fn));
};
stx_log_Logic.pack = function(pack) {
	return stx_log_Logic.construct(function(value) {
		var canonical = pack.join(".");
		return stx_nano_lift_LiftNano.if_else(new hre_RegExp("" + canonical + ".*","g").test(stx_log_LogFileName.get_pack(stx_log_LogPosition.get_fileName(value)).join(".")),function() {
			return stx_nano_Report.unit();
		},function() {
			return stx_pico_Option.fromNullT(stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 82, className : "stx.log._Logic.Logic_Impl_", methodName : "pack"}),stx_fail_LogFailure.E_Log_SourceNotInPackage(stx_log_LogPosition.get_fileName(value),canonical)));
		});
	});
};
stx_log_Logic.type = function(type) {
	return stx_log_Logic.construct(function(value) {
		return stx_nano_lift_LiftNano.if_else(type == stx_log_LogFileName.get_canonical(stx_log_LogPosition.get_fileName(value)),function() {
			return stx_nano_Report.unit();
		},function() {
			return stx_pico_Option.fromNullT(stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 91, className : "stx.log._Logic.Logic_Impl_", methodName : "type"}),stx_fail_LogFailure.E_Log_SourceNotInPackage(stx_log_LogPosition.get_fileName(value),stx_log_LogFileName.get_canonical(stx_log_LogPosition.get_fileName(value)))));
		});
	});
};
stx_log_Logic.line = function(n) {
	return stx_log_Logic.construct(function(value) {
		return stx_nano_lift_LiftNano.if_else(stx_log_LogPosition.get_lineNumber(value) == n,function() {
			return stx_nano_Report.unit();
		},function() {
			return stx_pico_Option.fromNullT(stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 100, className : "stx.log._Logic.Logic_Impl_", methodName : "line"}),stx_fail_LogFailure.E_Log_NotLine(n)));
		});
	});
};
stx_log_Logic.lines = function(l,h) {
	return stx_log_Logic.construct(function(value) {
		return stx_nano_lift_LiftNano.if_else(stx_log_LogPosition.get_lineNumber(value) >= l && stx_log_LogPosition.get_lineNumber(value) <= h,function() {
			return stx_nano_Report.unit();
		},function() {
			return stx_pico_Option.fromNullT(stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 109, className : "stx.log._Logic.Logic_Impl_", methodName : "lines"}),stx_fail_LogFailure.E_Log_NotOfRange(l,h)));
		});
	});
};
stx_log_Logic.tag = function(str) {
	return stx_log_Logic.construct(function(value) {
		return stx_nano_lift_LiftNano.if_else(stx_pico_OptionLift.is_defined(stx_lift_ArrayLift.search(stx_log_LogPosition.get_stamp(value).tags,function(tag) {
			return tag == str;
		})),function() {
			return stx_nano_Report.unit();
		},function() {
			return stx_pico_Option.fromNullT(stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 119, className : "stx.log._Logic.Logic_Impl_", methodName : "tag"}),stx_fail_LogFailure.E_Log_DoesNotContainTag(str)));
		});
	});
};
stx_log_Logic.method = function(str) {
	return stx_log_Logic.construct(function(value) {
		return stx_nano_lift_LiftNano.if_else(stx_log_LogPosition.get_methodName(value) == str,function() {
			return stx_nano_Report.unit();
		},function() {
			return stx_pico_Option.fromNullT(stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 127, className : "stx.log._Logic.Logic_Impl_", methodName : "method"}),stx_fail_LogFailure.E_Log_NotInMethod(str)));
		});
	});
};
stx_log_Logic.always = function() {
	return stx_log_Logic.construct(function(value) {
		return stx_nano_Report.unit();
	});
};
stx_log_Logic.never = function() {
	return stx_log_Logic.construct(function(value) {
		return stx_nano_Report.make(stx_fail_LogFailure.E_Log_Zero,{ fileName : "stx/log/Logic.hx", lineNumber : 138, className : "stx.log._Logic.Logic_Impl_", methodName : "never"});
	});
};
var stx_log_LogicSum = $hxEnums["stx.log.LogicSum"] = { __ename__:"stx.log.LogicSum",__constructs__:null
	,LAnd: ($_=function(l,r) { return {_hx_index:0,l:l,r:r,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LAnd",$_.__params__ = ["l","r"],$_)
	,LOr: ($_=function(l,r) { return {_hx_index:1,l:l,r:r,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LOr",$_.__params__ = ["l","r"],$_)
	,LNot: ($_=function(l) { return {_hx_index:2,l:l,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LNot",$_.__params__ = ["l"],$_)
	,LV: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LV",$_.__params__ = ["v"],$_)
};
stx_log_LogicSum.__constructs__ = [stx_log_LogicSum.LAnd,stx_log_LogicSum.LOr,stx_log_LogicSum.LNot,stx_log_LogicSum.LV];
var stx_pico_OptionLift = function() { };
stx_pico_OptionLift.__name__ = "stx.pico.OptionLift";
stx_pico_OptionLift.fold = function(self,ok,no) {
	switch(self._hx_index) {
	case 0:
		return ok(self.v);
	case 1:
		return no();
	}
};
stx_pico_OptionLift.map = function(self,f) {
	return stx_pico_OptionLift.fold(self,function(t) {
		return haxe_ds_Option.Some(f(t));
	},function() {
		return haxe_ds_Option.None;
	});
};
stx_pico_OptionLift.flat_map = function(self,f) {
	return stx_pico_Option.flatten(stx_pico_OptionLift.map(self,f));
};
stx_pico_OptionLift.or = function(self,thunk) {
	return stx_pico_OptionLift.fold(self,haxe_ds_Option.Some,thunk);
};
stx_pico_OptionLift.filter = function(self,fn) {
	return stx_pico_OptionLift.flat_map(self,function(v) {
		if(fn(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
stx_pico_OptionLift.def = function(self,thunk) {
	if(self._hx_index == 0) {
		return self.v;
	} else {
		return thunk();
	}
};
stx_pico_OptionLift.defv = function(self,v) {
	if(self._hx_index == 0) {
		return self.v;
	} else {
		return v;
	}
};
stx_pico_OptionLift.is_defined = function(self) {
	return stx_pico_OptionLift.fold(self,function(_) {
		return true;
	},function() {
		return false;
	});
};
stx_pico_OptionLift.iterator = function(self) {
	var done = false;
	return { hasNext : function() {
		if(!done) {
			return stx_pico_OptionLift.is_defined(self);
		} else {
			return false;
		}
	}, next : function() {
		done = true;
		return stx_pico_OptionLift.defv(self,null);
	}};
};
stx_pico_OptionLift.merge = function(self,that,fn) {
	switch(self._hx_index) {
	case 0:
		var _g = self.v;
		switch(that._hx_index) {
		case 0:
			return haxe_ds_Option.Some(fn(_g,that.v));
		case 1:
			return haxe_ds_Option.Some(_g);
		}
		break;
	case 1:
		if(that._hx_index == 0) {
			return haxe_ds_Option.Some(that.v);
		} else {
			return haxe_ds_Option.None;
		}
		break;
	}
};
stx_pico_OptionLift.toArray = function(self) {
	switch(self._hx_index) {
	case 0:
		return [self.v];
	case 1:
		return [];
	}
};
stx_pico_OptionLift.fudge = function(self) {
	return stx_pico_OptionLift.fold(self,function(x) {
		return x;
	},function() {
		throw haxe_Exception.thrown("empty Option");
	});
};
stx_pico_OptionLift.toString = function(self) {
	return stx_pico_OptionLift.fold(self,function(x) {
		return "" + Std.string(x);
	},function() {
		return "<undefined>";
	});
};
stx_pico_OptionLift.prj = function(self) {
	return self;
};
var stx_nano_lift_LiftNano = function() { };
stx_nano_lift_LiftNano.__name__ = "stx.nano.lift.LiftNano";
stx_nano_lift_LiftNano.arrd = function(wildcard,arr) {
	return arr;
};
stx_nano_lift_LiftNano.if_else = function(b,_if,_else) {
	if(b) {
		return _if();
	} else {
		return _else();
	}
};
stx_nano_lift_LiftNano.here = function(wildcard,pos) {
	return pos;
};
stx_nano_lift_LiftNano.test = function(wildcard,arr) {
	var runner = new haxe_unit_TestRunner();
	var t = $getIterator(arr);
	while(t.hasNext()) runner.add(t.next());
	runner.run();
};
stx_nano_lift_LiftNano.uuid = function(v,value) {
	if(value == null) {
		value = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
	}
	return new EReg("[xy]","g").map(value,function(reg) {
		var r = Std.int(Math.random() * 16) | 0;
		return StringTools.hex(reg.matched(0) == "x" ? r : r & 3 | 8);
	}).toLowerCase();
};
stx_nano_lift_LiftNano.sep = function(_) {
	return "/";
};
stx_nano_lift_LiftNano.option = function(wildcard,v) {
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_nano_lift_LiftNano.accept = function(wildcard,t) {
	return stx_nano_Res.accept(t);
};
stx_nano_lift_LiftNano.reject = function(wildcard,e) {
	return stx_nano_Res.reject(e);
};
stx_nano_lift_LiftNano.success = function(wildcard,t) {
	return stx_pico_Outcome.success(t);
};
stx_nano_lift_LiftNano.failure = function(wildcard,e) {
	return stx_pico_Outcome.failure(e);
};
stx_nano_lift_LiftNano.fault = function(wildcard,pos) {
	return stx_nano_Fault._new(pos);
};
stx_nano_lift_LiftNano.couple = function(wildcard,tI,tII) {
	return function(fn) {
		fn(tI,tII);
	};
};
stx_nano_lift_LiftNano.decouple = function(wildcard,fn) {
	return function(tp) {
		return stx_nano_CoupleLift.decouple(tp,fn);
	};
};
stx_nano_lift_LiftNano.triple = function(wildcard,tI,tII,tIII) {
	return function(fn) {
		fn(tI,tII,tIII);
	};
};
stx_nano_lift_LiftNano.detriple = function(wildcard,fn) {
	return function(tp) {
		return stx_nano_TripleLift.detriple(tp,fn);
	};
};
stx_nano_lift_LiftNano.toCouple = function(self) {
	return self;
};
stx_nano_lift_LiftNano.lbump = function(wildcard,tp) {
	return stx_nano_CoupleLift.decouple(tp,function(lhs,rhs) {
		return stx_pico_OptionLift.fold(lhs,function(l) {
			return haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,rhs));
		},function() {
			return haxe_ds_Option.None;
		});
	});
};
stx_nano_lift_LiftNano.rbump = function(wildcard,tp) {
	return stx_nano_CoupleLift.decouple(tp,function(lhs,rhs) {
		return stx_pico_OptionLift.fold(rhs,function(r) {
			return haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,r));
		},function() {
			return haxe_ds_Option.None;
		});
	});
};
stx_nano_lift_LiftNano.fromPos = function(pos) {
	return stx_nano_Position.fromPos(pos);
};
stx_nano_lift_LiftNano.future = function(wildcard) {
	var trigger = tink_core_Future.trigger();
	return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,trigger,trigger.asFuture());
};
stx_nano_lift_LiftNano.tracer = function(v,pos) {
	return function(t) {
		haxe_Log.trace(t,pos);
		return t;
	};
};
stx_nano_lift_LiftNano.traced = function(v,pos) {
	var infos = pos;
	return function(d) {
		haxe_Log.trace(d,infos);
	};
};
stx_nano_lift_LiftNano.through = function(__) {
	return function(v) {
		return v;
	};
};
stx_nano_lift_LiftNano.command = function(__,fn) {
	return function(v) {
		fn(v);
		return v;
	};
};
stx_nano_lift_LiftNano.perform = function(__,fn) {
	return function(v) {
		fn();
		return v;
	};
};
stx_nano_lift_LiftNano.execute = function(__,fn) {
	return function(v) {
		var _g = fn();
		if(_g._hx_index == 0) {
			return stx_nano_lift_LiftNano.reject(__,_g.v);
		} else {
			return stx_nano_lift_LiftNano.accept(__,v);
		}
	};
};
stx_nano_lift_LiftNano.left = function(__,tI) {
	return haxe_ds_Either.Left(tI);
};
stx_nano_lift_LiftNano.right = function(__,tII) {
	return haxe_ds_Either.Right(tII);
};
stx_nano_lift_LiftNano.value = function(future) {
	var result = haxe_ds_Option.None;
	var cancelled = false;
	tink_core_Future.handle(future,function(x) {
		cancelled = true;
		result = haxe_ds_Option.Some(x);
	});
	return result;
};
stx_nano_lift_LiftNano.crack = function(wildcard,e) {
	throw haxe_Exception.thrown(e);
};
stx_nano_lift_LiftNano.report = function(wildcard,report) {
	stx_nano_Report.crunch(report);
};
stx_nano_lift_LiftNano.definition = function(wildcard,t) {
	return Type.getClass(t);
};
stx_nano_lift_LiftNano.identifier = function(self) {
	return stx_pico_Identifier._new(Type.getClassName(self));
};
stx_nano_lift_LiftNano.vblock = function(wildcard,t) {
	return function() {
	};
};
stx_nano_lift_LiftNano.noop = function(wildcard) {
	return function(t) {
		return t;
	};
};
stx_nano_lift_LiftNano.nullify = function(wildcard) {
	return function(t) {
	};
};
stx_nano_lift_LiftNano.passthrough = function(wildcard,fn) {
	return function(t) {
		fn(t);
		return t;
	};
};
stx_nano_lift_LiftNano.not = function(bool) {
	return !bool;
};
stx_nano_lift_LiftNano.toPosition = function(pos) {
	return stx_nano_Position.lift(pos);
};
var stx_nano_Wildcard = $hxEnums["stx.nano.Wildcard"] = { __ename__:"stx.nano.Wildcard",__constructs__:null
	,__: {_hx_name:"__",_hx_index:0,__enum__:"stx.nano.Wildcard",toString:$estr}
};
stx_nano_Wildcard.__constructs__ = [stx_nano_Wildcard.__];
var stx_assert_PredicateApi = function() { };
stx_assert_PredicateApi.__name__ = "stx.assert.PredicateApi";
stx_assert_PredicateApi.__isInterface__ = true;
stx_assert_PredicateApi.prototype = {
	applyI: null
	,__class__: stx_assert_PredicateApi
};
var stx_log_Filter = function() {
};
stx_log_Filter.__name__ = "stx.log.Filter";
stx_log_Filter.__interfaces__ = [stx_assert_PredicateApi];
stx_log_Filter.Unit = function() {
	return new stx_log_filter_term_Unit();
};
stx_log_Filter.Race = function() {
	return new stx_log_filter_term_Race();
};
stx_log_Filter.PosPredicate = function() {
	return stx_log_filter_term_PosPredicate;
};
stx_log_Filter.prototype = {
	applyI: function(value) {
		return stx_nano_Report.unit();
	}
	,note: function(str) {
	}
	,__class__: stx_log_Filter
};
var stx_log_filter_term_Unit = function() {
	stx_log_Filter.call(this);
};
stx_log_filter_term_Unit.__name__ = "stx.log.filter.term.Unit";
stx_log_filter_term_Unit.__super__ = stx_log_Filter;
stx_log_filter_term_Unit.prototype = $extend(stx_log_Filter.prototype,{
	applyI: function(value) {
		return stx_nano_Report.unit();
	}
	,__class__: stx_log_filter_term_Unit
});
var stx_log_Format = {};
stx_log_Format.__properties__ = {get_self:"get_self",get_DEFAULT:"get_DEFAULT"};
stx_log_Format.unit = function() {
	return stx_log_Format.lift(stx_log_Format.get_DEFAULT());
};
stx_log_Format._new = function(self) {
	return self;
};
stx_log_Format.lift = function(self) {
	return stx_log_Format._new(self);
};
stx_log_Format.get_DEFAULT = function() {
	if(stx_log_Format.DEFAULT == null) {
		return stx_log_Format.DEFAULT = [stx_log_FormatSum.INCLUDE_TAGS,stx_log_FormatSum.INCLUDE_LEVEL,stx_log_FormatSum.INCLUDE_TIMESTAMP,stx_log_FormatSum.INCLUDE_LOCATION,stx_log_FormatSum.INCLUDE_DETAIL];
	} else {
		return stx_log_Format.DEFAULT;
	}
};
stx_log_Format.prj = function(this1) {
	return this1;
};
stx_log_Format.get_self = function(this1) {
	return stx_log_Format.lift(this1);
};
stx_log_Format.has = function(this1,v) {
	return stx_pico_OptionLift.is_defined(stx_lift_ArrayLift.has(this1,v));
};
stx_log_Format.print = function(this1,value) {
	var p = value.source;
	var s = stx_log_LogPosition.get_stamp(p);
	var a = [];
	if(stx_log_Format.has(this1,stx_log_FormatSum.INCLUDE_LEVEL)) {
		a.push(stx_log_Level.toString(s.level));
	}
	if(stx_log_Format.has(this1,stx_log_FormatSum.INCLUDE_TIMESTAMP)) {
		a.push(HxOverrides.dateStr(s.timestamp));
	}
	if(stx_log_Format.has(this1,stx_log_FormatSum.INCLUDE_TAGS)) {
		a.push("[" + s.tags.join(",") + "]");
	}
	if(stx_log_Format.has(this1,stx_log_FormatSum.INCLUDE_LOCATION)) {
		a.push(stx_nano_PositionLift.to_vscode_clickable_link(p));
	}
	if(stx_log_Format.has(this1,stx_log_FormatSum.INCLUDE_NEWLINE_FOR_DETAIL)) {
		a.push("\n");
	}
	if(stx_log_Format.has(this1,stx_log_FormatSum.INCLUDE_DETAIL)) {
		a.push(Std.string(value.detail));
	}
	return a.join(" ");
};
var stx_log_FormatSum = $hxEnums["stx.log.FormatSum"] = { __ename__:"stx.log.FormatSum",__constructs__:null
	,INCLUDE_LEVEL: {_hx_name:"INCLUDE_LEVEL",_hx_index:0,__enum__:"stx.log.FormatSum",toString:$estr}
	,INCLUDE_TIMESTAMP: {_hx_name:"INCLUDE_TIMESTAMP",_hx_index:1,__enum__:"stx.log.FormatSum",toString:$estr}
	,INCLUDE_TAGS: {_hx_name:"INCLUDE_TAGS",_hx_index:2,__enum__:"stx.log.FormatSum",toString:$estr}
	,INCLUDE_LOCATION: {_hx_name:"INCLUDE_LOCATION",_hx_index:3,__enum__:"stx.log.FormatSum",toString:$estr}
	,INCLUDE_NEWLINE_FOR_DETAIL: {_hx_name:"INCLUDE_NEWLINE_FOR_DETAIL",_hx_index:4,__enum__:"stx.log.FormatSum",toString:$estr}
	,INCLUDE_DETAIL: {_hx_name:"INCLUDE_DETAIL",_hx_index:5,__enum__:"stx.log.FormatSum",toString:$estr}
};
stx_log_FormatSum.__constructs__ = [stx_log_FormatSum.INCLUDE_LEVEL,stx_log_FormatSum.INCLUDE_TIMESTAMP,stx_log_FormatSum.INCLUDE_TAGS,stx_log_FormatSum.INCLUDE_LOCATION,stx_log_FormatSum.INCLUDE_NEWLINE_FOR_DETAIL,stx_log_FormatSum.INCLUDE_DETAIL];
var stx_log_Facade = {};
stx_log_Facade.__properties__ = {get_instance:"get_instance"};
stx_log_Facade.get_instance = function() {
	if(stx_log_Facade.instance == null) {
		return stx_log_Facade.instance = new stx_log_logger_Default();
	} else {
		return stx_log_Facade.instance;
	}
};
stx_log_Facade._new = function() {
	return stx_log_Facade.get_instance();
};
stx_log_Facade.unit = function() {
	return stx_log_Facade._new();
};
stx_log_Facade.toLoggerApi = function(this1) {
	return this1;
};
var stx_log__$Signal_SignalCls = function() {
	this.handlers = [];
};
stx_log__$Signal_SignalCls.__name__ = "stx.log._Signal.SignalCls";
stx_log__$Signal_SignalCls.prototype = {
	handlers: null
	,handle: function(fn) {
		this.handlers.push(fn);
	}
	,trigger: function(v) {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) _g1[_g++](v);
	}
	,attach: function(logger) {
		stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/log/Signal.hx", lineNumber : 20, className : "stx.log._Signal.SignalCls", methodName : "attach"}).exists(logger);
		this.handle(function(x) {
			(logger.apply(x))(stx_log_Logger.spur);
		});
	}
	,__class__: stx_log__$Signal_SignalCls
};
var stx_log_Signal = {};
stx_log_Signal.__properties__ = {get_instance:"get_instance"};
stx_log_Signal.get_instance = function() {
	if(stx_log_Signal.instance == null) {
		return stx_log_Signal.instance = new stx_log__$Signal_SignalCls();
	} else {
		return stx_log_Signal.instance;
	}
};
stx_log_Signal._new = function() {
	return stx_log_Signal.get_instance();
};
stx_log_Signal.handle = function(this1,x) {
	stx_log_Signal.is_custom = true;
	this1.handle(x);
};
stx_log_Signal.transmit = function(v) {
	stx_log_Signal.get_instance().trigger(v);
};
var stx_log_LogPosition = {};
stx_log_LogPosition.__properties__ = {get_methodName:"get_methodName",get_lineNumber:"get_lineNumber",get_fileName:"get_fileName",get_scoping:"get_scoping",get_customParams:"get_customParams",get_stamp:"get_stamp"};
stx_log_LogPosition.lift = function(pos) {
	return stx_log_LogPosition._new(pos);
};
stx_log_LogPosition.fromPos = function(pos) {
	return stx_log_LogPosition._new(pos);
};
stx_log_LogPosition._new = function(self) {
	return self;
};
stx_log_LogPosition.is_runtime = function() {
	return true;
};
stx_log_LogPosition.pure = function(pos) {
	return stx_log_LogPosition._new(pos);
};
stx_log_LogPosition.get_stamp = function(this1) {
	return stx_log_LogCustomParameters.get_stamp(stx_log_LogPosition.get_customParams(this1));
};
stx_log_LogPosition.restamp = function(this1,fn) {
	return stx_log_LogPosition.lift(stx_log_LogPosition.copy(this1,null,null,null,null,stx_log_LogCustomParameters.restamp(stx_log_LogPosition.get_customParams(this1),fn)));
};
stx_log_LogPosition.copy = function(this1,fileName,className,methodName,lineNumber,customParams) {
	return stx_log_LogPosition.lift({ fileName : stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fileName),this1.fileName), className : stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,className),this1.className), methodName : stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,methodName),this1.methodName), lineNumber : stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,lineNumber),this1.lineNumber), customParams : stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,customParams),this1.customParams)});
};
stx_log_LogPosition.get_customParams = function(this1) {
	return stx_nano_lift_LiftNano.if_else(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this1.customParams)),function() {
		return this1.customParams;
	},function() {
		this1.customParams = stx_log_LogCustomParameters._new();
		return this1.customParams;
	});
};
stx_log_LogPosition.get_scoping = function(this1) {
	return new stx_log_Scoping(this1.methodName,this1.className,this1.fileName);
};
stx_log_LogPosition.match = function(this1,race) {
	switch(race.scope._hx_index) {
	case 0:
		return this1.methodName == race.scoping.method;
	case 1:
		return this1.className == race.scoping.type;
	case 2:
		return this1.fileName == race.scoping.module;
	}
};
stx_log_LogPosition.prj = function(this1) {
	return this1;
};
stx_log_LogPosition.get_fileName = function(this1) {
	return this1.fileName;
};
stx_log_LogPosition.get_lineNumber = function(this1) {
	return this1.lineNumber;
};
stx_log_LogPosition.get_methodName = function(this1) {
	return this1.methodName;
};
stx_log_LogPosition.re_methodName = function(this1,method) {
	return stx_log_LogPosition.copy(this1,null,null,method);
};
stx_log_LogPosition.re_lineNumber = function(this1,n) {
	return stx_log_LogPosition.copy(this1,null,null,null,n);
};
var stx_log_Value = function(detail,source) {
	this.detail = detail;
	this.source = source;
};
stx_log_Value.__name__ = "stx.log.Value";
stx_log_Value.make = function(detail,source) {
	return new stx_log_Value(detail,source);
};
stx_log_Value.prototype = {
	detail: null
	,stamp: null
	,get_stamp: function() {
		return stx_log_LogPosition.get_stamp(this.source);
	}
	,source: null
	,restamp: function(fn) {
		var next = stx_log_LogPosition.restamp(this.source,fn);
		return new stx_log_Value(this.detail,next);
	}
	,__class__: stx_log_Value
	,__properties__: {get_stamp:"get_stamp"}
};
var stx_LogLift = function() { };
stx_LogLift.__name__ = "stx.LogLift";
stx_LogLift.Filter = function() {
	return stx_log_Filter;
};
stx_LogLift.Facade = function() {
	return stx_log_Facade._new();
};
stx_LogLift.Logic = function() {
	return stx_log_Logic._.make();
};
var stx_Log = {};
stx_Log.LOG = function(value,pos) {
	stx_log_Signal.transmit(stx_Log.enlog(value,pos));
};
stx_Log.unit = function() {
	return stx_Log._new();
};
stx_Log.enlog = function(value,pos) {
	return new stx_log_Value(value,stx_log_LogPosition.pure(pos));
};
stx_Log.make = function(fn) {
	return function(value,pos) {
		fn(stx_Log.enlog(value,pos));
	};
};
stx_Log._new = function() {
	return stx_Log.LOG;
};
stx_Log.level = function(this1,level) {
	return stx_Log.mod(this1,function(pos) {
		return stx_log_LogPosition.restamp(pos,function(stamp) {
			return stamp.relevel(level);
		});
	});
};
stx_Log.trace = function(this1,v,pos) {
	(stx_Log.level(this1,1))(v,pos);
};
stx_Log.debug = function(this1,v,pos) {
	(stx_Log.level(this1,2))(v,pos);
};
stx_Log.info = function(this1,v,pos) {
	(stx_Log.level(this1,3))(v,pos);
};
stx_Log.warn = function(this1,v,pos) {
	(stx_Log.level(this1,4))(v,pos);
};
stx_Log.error = function(this1,v,pos) {
	(stx_Log.level(this1,5))(v,pos);
};
stx_Log.fatal = function(this1,v,pos) {
	(stx_Log.level(this1,6))(v,pos);
};
stx_Log.mod = function(this1,fn) {
	return function(value,pos) {
		this1(value,fn(pos));
	};
};
stx_Log.tag = function(this1,tag) {
	return stx_Log.mod(this1,function(pos) {
		return stx_log_LogPosition.restamp(pos,function(stamp) {
			return stamp.tag(tag);
		});
	});
};
stx_Log.close = function(this1) {
	return stx_Log.mod(this1,function(pos) {
		return stx_log_LogPosition.restamp(pos,function(stamp) {
			return stamp.hide();
		});
	});
};
stx_Log.through = function(this1,pos) {
	return function(v) {
		this1(v,pos);
		return v;
	};
};
stx_Log.printer = function(this1,pos) {
	return function(v) {
		this1(v,pos);
	};
};
var stx_Tup2 = $hxEnums["stx.Tup2"] = { __ename__:"stx.Tup2",__constructs__:null
	,tuple2: ($_=function(l,r) { return {_hx_index:0,l:l,r:r,__enum__:"stx.Tup2",toString:$estr}; },$_._hx_name="tuple2",$_.__params__ = ["l","r"],$_)
};
stx_Tup2.__constructs__ = [stx_Tup2.tuple2];
var stx_Tup3 = $hxEnums["stx.Tup3"] = { __ename__:"stx.Tup3",__constructs__:null
	,tuple3: ($_=function(tI,tII,tIII) { return {_hx_index:0,tI:tI,tII:tII,tIII:tIII,__enum__:"stx.Tup3",toString:$estr}; },$_._hx_name="tuple3",$_.__params__ = ["tI","tII","tIII"],$_)
};
stx_Tup3.__constructs__ = [stx_Tup3.tuple3];
var stx_LiftPos = function() { };
stx_LiftPos.__name__ = "stx.LiftPos";
stx_LiftPos.lift = function(pos) {
	return stx_nano_Position._new(pos);
};
var stx_LiftFutureToSlot = function() { };
stx_LiftFutureToSlot.__name__ = "stx.LiftFutureToSlot";
stx_LiftFutureToSlot.toSlot = function(ft,pos) {
	return stx_nano_Slot.Guard(ft,pos);
};
var stx_LiftLazyFutureToSlot = function() { };
stx_LiftLazyFutureToSlot.__name__ = "stx.LiftLazyFutureToSlot";
stx_LiftLazyFutureToSlot.toSlot = function(fn) {
	return stx_nano_Slot.Guard(fn(),{ fileName : "stx/Nano.hx", lineNumber : 86, className : "stx.LiftLazyFutureToSlot", methodName : "toSlot"});
};
var stx_Test = function() { };
stx_Test.__name__ = "stx.Test";
stx_Test.poke = function(wildcard,arr) {
	var tmp = stx_test_Log.log(stx_nano_Wildcard.__);
	var result = new Array(arr.length);
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,arr[i]);
	}
	stx_Log.debug(tmp,result,{ fileName : "stx/Test.hx", lineNumber : 14, className : "stx.Test", methodName : "poke"});
	var f = ($_=stx_LiftAssert.that(stx_nano_Wildcard.__,{ fileName : "stx/Test.hx", lineNumber : 15, className : "stx.Test", methodName : "poke"}),$bind($_,$_.iz));
	var result = new Array(arr.length);
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(arr[i]);
	}
	return stx_assert_Predicate.check(stx_pico_OptionLift.defv(stx_lift_ArrayLift.lfold1(result,($_=stx_LiftAssert.that(stx_nano_Wildcard.__,{ fileName : "stx/Test.hx", lineNumber : 16, className : "stx.Test", methodName : "poke"}),$bind($_,$_.or))),stx_LiftAssert.that(stx_nano_Wildcard.__,{ fileName : "stx/Test.hx", lineNumber : 17, className : "stx.Test", methodName : "poke"}).never()));
};
stx_Test.test = function(test,only) {
	stx_Log.info(stx_test_Log.log(stx_nano_Wildcard.__),"utest:" + stx_Test.pokey,{ fileName : "stx/Test.hx", lineNumber : 24, className : "stx.Test", methodName : "test"});
	stx_Log.debug(stx_test_Log.log(stx_nano_Wildcard.__),test,{ fileName : "stx/Test.hx", lineNumber : 25, className : "stx.Test", methodName : "test"});
	var f = stx_Test.poke(stx_nano_Wildcard.__,only);
	var _g = [];
	var _g1 = 0;
	var _g2 = test;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(f(v)) {
			_g.push(v);
		}
	}
	test = _g;
	stx_Log.info(stx_test_Log.log(stx_nano_Wildcard.__),_g,{ fileName : "stx/Test.hx", lineNumber : 29, className : "stx.Test", methodName : "test"});
	utest_UTest.run(_g);
};
var utest_ITest = function() { };
utest_ITest.__name__ = "utest.ITest";
utest_ITest.__isInterface__ = true;
var utest_Test = function() {
};
utest_Test.__name__ = "utest.Test";
utest_Test.__interfaces__ = [utest_ITest];
utest_Test.prototype = {
	__initializeUtest__: function() {
		return { tests : [], dependencies : [], accessories : { }};
	}
	,__class__: utest_Test
};
var stx_LoggedTest = function() {
	utest_Test.call(this);
};
stx_LoggedTest.__name__ = "stx.LoggedTest";
stx_LoggedTest.__super__ = utest_Test;
stx_LoggedTest.prototype = $extend(utest_Test.prototype,{
	setup: function() {
		haxe_Log.trace(this,{ fileName : "stx/Test.hx", lineNumber : 42, className : "stx.LoggedTest", methodName : "setup"});
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.accessories.setup = function() {
			_gthis.setup();
			return utest_Async.getResolved();
		};
		return init;
	}
	,__class__: stx_LoggedTest
});
var stx_arw_Arch = function() { };
stx_arw_Arch.__name__ = "stx.arw.Arch";
stx_arw_Arch.make = function() {
	return new stx_arw_ArchCls();
};
stx_arw_Arch.get = function(self) {
	return stx_arw_Arch.make().get(self);
};
stx_arw_Arch.defer = function() {
	return stx_arw_Arch.make().defer();
};
stx_arw_Arch.value = function() {
	return stx_arw_Arch.make().value();
};
stx_arw_Arch.error = function() {
	return stx_arw_Arch.make().error();
};
stx_arw_Arch.convert = function() {
	return stx_arw_Arch.value().value();
};
stx_arw_Arch.attempt = function() {
	return stx_arw_Arch.value();
};
stx_arw_Arch.command = function() {
	return stx_arw_Arch.value().error();
};
stx_arw_Arch.execute = function() {
	return stx_arw_Arch.make().close().error();
};
stx_arw_Arch.resolve = function() {
	return stx_arw_Arch.make().error();
};
stx_arw_Arch.provide = function() {
	return stx_arw_Arch.make().close().value();
};
stx_arw_Arch.produce = function() {
	return stx_arw_Arch.make().close();
};
var stx_arw_ArchCls = function() {
};
stx_arw_ArchCls.__name__ = "stx.arw.ArchCls";
stx_arw_ArchCls.prototype = {
	get: function(self) {
		return stx_arw_Cascade.lift(stx_arw_Arrowlet.Sync(self));
	}
	,defer: function() {
		return new stx_arw_ArchDefer();
	}
	,value: function() {
		return new stx_arw_ArchValue();
	}
	,error: function() {
		return new stx_arw_ArchError();
	}
	,leave: function() {
		return new stx_arw_ArchLeave();
	}
	,close: function() {
		return new stx_arw_ArchClose();
	}
	,__class__: stx_arw_ArchCls
};
var stx_pico_Clazz = $hx_exports["stx"]["Clazz"] = function() {
};
stx_pico_Clazz.__name__ = "stx.pico.Clazz";
stx_pico_Clazz.prototype = {
	definition: function() {
		return Type.getClass(this);
	}
	,identifier: function() {
		return stx_pico_Identifier._new(Type.getClassName(this.definition()));
	}
	,__class__: stx_pico_Clazz
};
var stx_arw_ArchChunk = function() {
	stx_pico_Clazz.call(this);
};
stx_arw_ArchChunk.__name__ = "stx.arw.ArchChunk";
stx_arw_ArchChunk.__super__ = stx_pico_Clazz;
stx_arw_ArchChunk.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_arw_ArchChunk
});
var stx_arw_ArchClose = function() {
};
stx_arw_ArchClose.__name__ = "stx.arw.ArchClose";
stx_arw_ArchClose.prototype = {
	get: function(self) {
		return stx_arw_Produce.lift(stx_arw_Arrowlet.Sync(function(_) {
			return self();
		}));
	}
	,value: function() {
		return new stx_arw_ArchCloseValue();
	}
	,defer: function() {
		return new stx_arw_ArchCloseDefer();
	}
	,error: function() {
		return new stx_arw_ArchCloseError();
	}
	,__class__: stx_arw_ArchClose
};
var stx_arw_ArchCloseDefer = function() {
};
stx_arw_ArchCloseDefer.__name__ = "stx.arw.ArchCloseDefer";
stx_arw_ArchCloseDefer.prototype = {
	get: function(self) {
		return self;
	}
	,cont: function(self) {
		return stx_arw_Produce.lift(stx_arw_Arrowlet.fromFunSink(function(_,cont) {
			self(cont);
		}));
	}
	,future: function(self) {
		return stx_arw_Produce.lift(stx_arw_Arrowlet.Fun1Future(function(_) {
			return self;
		}));
	}
	,__class__: stx_arw_ArchCloseDefer
};
var stx_arw_ArchCloseError = function() {
};
stx_arw_ArchCloseError.__name__ = "stx.arw.ArchCloseError";
stx_arw_ArchCloseError.prototype = {
	get: function(self) {
		return stx_arw_Execute.lift(stx_arw_Arrowlet.Sync(function(_) {
			return self();
		}));
	}
	,cont: function(self) {
		return stx_arw_Execute.lift(stx_arw_Arrowlet.fromFunSink(function(_,cont) {
			self(cont);
		}));
	}
	,future: function(self) {
		return stx_arw_Execute.lift(stx_arw_Arrowlet.Fun1Future(function(_) {
			return self;
		}));
	}
	,__class__: stx_arw_ArchCloseError
};
var stx_arw_ArchCloseValue = function() {
};
stx_arw_ArchCloseValue.__name__ = "stx.arw.ArchCloseValue";
stx_arw_ArchCloseValue.prototype = {
	get: function(self) {
		return stx_arw_Provide.lift(stx_arw_Arrowlet.Sync(function(_) {
			return self;
		}));
	}
	,defer: function() {
		return new stx_arw_ArchCloseValueDefer();
	}
	,__class__: stx_arw_ArchCloseValue
};
var stx_arw_ArchCloseValueDefer = function() {
};
stx_arw_ArchCloseValueDefer.__name__ = "stx.arw.ArchCloseValueDefer";
stx_arw_ArchCloseValueDefer.prototype = {
	get: function(self) {
		return self;
	}
	,cont: function(self) {
		return stx_arw_Provide.lift(stx_arw_Arrowlet.fromFunSink(function(_,cont) {
			self(cont);
		}));
	}
	,future: function(self) {
		return stx_arw_Provide.lift(stx_arw_Arrowlet.Fun1Future(function(_) {
			return self;
		}));
	}
	,__class__: stx_arw_ArchCloseValueDefer
};
var stx_arw_ArchLeave = function() {
};
stx_arw_ArchLeave.__name__ = "stx.arw.ArchLeave";
stx_arw_ArchLeave.prototype = {
	get: function(self) {
		return stx_arw_Cascade.lift(stx_arw_Arrowlet.Sync(self));
	}
	,value: function() {
		return new stx_arw_ArchLeaveValue();
	}
	,__class__: stx_arw_ArchLeave
};
var stx_arw_ArchLeaveValue = function() {
};
stx_arw_ArchLeaveValue.__name__ = "stx.arw.ArchLeaveValue";
stx_arw_ArchLeaveValue.prototype = {
	get: function(self) {
		return stx_arw_Rectify.lift(stx_arw_Arrowlet.Sync(self));
	}
	,__class__: stx_arw_ArchLeaveValue
};
var stx_arw_ArchLeaveValueDefer = function() {
};
stx_arw_ArchLeaveValueDefer.__name__ = "stx.arw.ArchLeaveValueDefer";
stx_arw_ArchLeaveValueDefer.prototype = {
	get: function(self) {
		return self;
	}
	,cont: function(self) {
		return stx_arw_Rectify.lift(stx_arw_Arrowlet.fromFunSink(self));
	}
	,future: function(self) {
		return stx_arw_Rectify.lift(stx_arw_Arrowlet.Fun1Future(self));
	}
	,__class__: stx_arw_ArchLeaveValueDefer
};
var stx_arw_ArchError = function() {
};
stx_arw_ArchError.__name__ = "stx.arw.ArchError";
stx_arw_ArchError.prototype = {
	get: function(self) {
		return stx_arw_Resolve.fromErrChunk(self);
	}
	,defer: function() {
		return new stx_arw_ArchErrorDefer();
	}
	,value: function() {
		return new stx_arw_ArchErrorValue();
	}
	,__class__: stx_arw_ArchError
};
var stx_arw_ArchErrorValue = function() {
};
stx_arw_ArchErrorValue.__name__ = "stx.arw.ArchErrorValue";
stx_arw_ArchErrorValue.prototype = {
	get: function(self) {
		return stx_arw_Rectify.lift(stx_arw_Arrowlet.Sync(self));
	}
	,__class__: stx_arw_ArchErrorValue
};
var stx_arw_ArchErrorError = function() {
};
stx_arw_ArchErrorError.__name__ = "stx.arw.ArchErrorError";
stx_arw_ArchErrorError.prototype = {
	get: function(self) {
		return stx_arw_CascadeLift.errate(stx_arw_Cascade.unit(),self);
	}
	,__class__: stx_arw_ArchErrorError
};
var stx_arw_ArchErrorDefer = function() {
};
stx_arw_ArchErrorDefer.__name__ = "stx.arw.ArchErrorDefer";
stx_arw_ArchErrorDefer.prototype = {
	get: function(self) {
		return self;
	}
	,cont: function(self) {
		return stx_arw_Resolve.lift(stx_arw_Arrowlet.fromFunSink(self));
	}
	,future: function(self) {
		return stx_arw_Resolve.lift(stx_arw_Arrowlet.Fun1Future(self));
	}
	,__class__: stx_arw_ArchErrorDefer
};
var stx_arw_ArchDefer = function() {
};
stx_arw_ArchDefer.__name__ = "stx.arw.ArchDefer";
stx_arw_ArchDefer.prototype = {
	get: function(self) {
		return self;
	}
	,cont: function(self) {
		return stx_arw_Cascade.lift(stx_arw_Arrowlet.fromFunSink(self));
	}
	,future: function(self) {
		return stx_arw_Cascade.lift(stx_arw_Arrowlet.Fun1Future(self));
	}
	,__class__: stx_arw_ArchDefer
};
var stx_arw_ArchValueDefer = function() {
};
stx_arw_ArchValueDefer.__name__ = "stx.arw.ArchValueDefer";
stx_arw_ArchValueDefer.prototype = {
	get: function(self) {
		return self;
	}
	,cont: function(self) {
		return stx_arw_Attempt.lift(stx_arw_Arrowlet.fromFunSink(self));
	}
	,future: function(self) {
		return stx_arw_Attempt.lift(stx_arw_Arrowlet.Fun1Future(self));
	}
	,__class__: stx_arw_ArchValueDefer
};
var stx_arw_ArchValue = function() {
};
stx_arw_ArchValue.__name__ = "stx.arw.ArchValue";
stx_arw_ArchValue.prototype = {
	defer: function() {
		return new stx_arw_ArchValueDefer();
	}
	,value: function() {
		return new stx_arw_ArchValueValue();
	}
	,get: function(self) {
		return stx_arw_Attempt.fromFun1Res(self);
	}
	,error: function() {
		return new stx_arw_ArchErrorValue();
	}
	,__class__: stx_arw_ArchValue
};
var stx_arw_ArchValueError = function() {
};
stx_arw_ArchValueError.__name__ = "stx.arw.ArchValueError";
stx_arw_ArchValueError.prototype = {
	get: function(self) {
		return stx_arw_Command.lift(stx_arw_Arrowlet.Sync(self));
	}
	,defer: function() {
		return new stx_arw_ArchValueErrorDefer();
	}
	,__class__: stx_arw_ArchValueError
};
var stx_arw_ArchValueErrorDefer = function() {
};
stx_arw_ArchValueErrorDefer.__name__ = "stx.arw.ArchValueErrorDefer";
stx_arw_ArchValueErrorDefer.prototype = {
	get: function(self) {
		return self;
	}
	,cont: function(self) {
		return stx_arw_Command.lift(stx_arw_Arrowlet.fromFunSink(self));
	}
	,future: function(self) {
		return stx_arw_Command.lift(stx_arw_Arrowlet.Fun1Future(self));
	}
	,__class__: stx_arw_ArchValueErrorDefer
};
var stx_arw_ArchValueValue = function() {
};
stx_arw_ArchValueValue.__name__ = "stx.arw.ArchValueValue";
stx_arw_ArchValueValue.prototype = {
	get: function(self) {
		return stx_arw_Convert.fromFun1R(self);
	}
	,defer: function() {
		return new stx_arw_ArchValueValueDefer();
	}
	,__class__: stx_arw_ArchValueValue
};
var stx_arw_ArchValueValueDefer = function() {
};
stx_arw_ArchValueValueDefer.__name__ = "stx.arw.ArchValueValueDefer";
stx_arw_ArchValueValueDefer.prototype = {
	get: function(self) {
		return self;
	}
	,cont: function(fn) {
		return stx_arw_Convert.lift(stx_arw_Arrowlet.fromFunSink(fn));
	}
	,future: function(fn) {
		return stx_arw_Convert.lift(stx_arw_Arrowlet.Fun1Future(fn));
	}
	,__class__: stx_arw_ArchValueValueDefer
};
var stx_arw_ArchTest = function() {
};
stx_arw_ArchTest.__name__ = "stx.arw.ArchTest";
stx_arw_ArchTest.prototype = {
	test_arch: function() {
		stx_arw_Arch.attempt().get(function(x) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,x);
		});
		stx_arw_Arch.attempt().defer().cont(function(b,c) {
			c(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,b));
		});
		stx_arw_Arch.execute().get(function() {
			return stx_nano_Report.pure(stx_nano_Fault.err(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/arw/Arch.hx", lineNumber : 280, className : "stx.arw.ArchTest", methodName : "test_arch"}),"E_AbstractMethod"));
		});
	}
	,__class__: stx_arw_ArchTest
};
var stx_arw_ArrangeLift = function() { };
stx_arw_ArrangeLift.__name__ = "stx.arw.ArrangeLift";
stx_arw_ArrangeLift.state = function(self) {
	return stx_arw_Cascade.lift(stx_arw_arrowlet_Lift.postfix(stx_arw_arrowlet_Lift.broach(self),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(tp,chk) {
		return stx_nano_ResLift.map(stx_nano_ResLift.zip(stx_nano_ResLift.map(tp,function(_) {
			return stx_nano_CoupleLift.snd(_);
		}),chk),function(tp) {
			return stx_nano_CoupleLift.swap(tp);
		});
	})));
};
stx_arw_ArrangeLift.attempt = function(self,attempt) {
	return stx_arw_Arrange.lift(stx_arw_arrowlet_Lift.then(self,stx_arw_Cascade.toArrowlet(stx_arw_Attempt.toCascade(attempt))));
};
stx_arw_ArrangeLift.errata = function(self,fn) {
	return stx_arw_Arrange.lift(stx_arw_Arrowlet.Anon(function(res,cont) {
		return stx_nano_ResLift.fold(res,function(i) {
			return stx_arw_arrowlet_Lift.prepare(stx_arw_arrowlet_Lift.then(self,stx_arw_Arrowlet.fromFun1R(function(res) {
				return stx_nano_ResLift.errata(res,fn);
			})),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 135, className : "stx.arw.ArrangeLift", methodName : "errata"}));
		});
	}));
};
stx_arw_ArrangeLift.errate = function(self,fn) {
	return stx_arw_Arrange.lift(stx_arw_ArrangeLift.errata(self,function(oc) {
		return oc.map(fn);
	}));
};
stx_arw_ArrangeLift.convert = function(self,that) {
	return stx_arw_Arrange.lift(stx_arw_Cascade._.convert(stx_arw_Arrange.toCascade(self),that));
};
stx_arw_ArrangeLift.cover = function(self,i) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.Anon(function(res,cont) {
		return stx_nano_ResLift.fold(res,function(v) {
			return stx_arw_Arrange.prepare(self,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,i,v),cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 153, className : "stx.arw.ArrangeLift", methodName : "cover"}));
		});
	}));
};
stx_arw_ArrangeLift.split = function(self,that) {
	var a = stx_arw_arrowlet_Lift.postfix(stx_arw_Arrowlet._.broach(self),function(tp) {
		return stx_nano_CoupleLift.decouple(tp,function(resInput,resOutput) {
			return stx_nano_ResLift.flat_map(resOutput,function(o) {
				return stx_nano_ResLift.map(resInput,function(couple) {
					return stx_nano_lift_LiftNano.triple(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(couple),o,stx_nano_CoupleLift.snd(couple));
				});
			});
		});
	});
	return stx_arw_Arrange.lift(stx_arw_Cascade.convert(stx_arw_Cascade.split(stx_arw_CascadeLift.cascade(stx_arw_Cascade.lift(stx_arw_arrowlet_Lift.postfix(a,function(res) {
		return stx_nano_ResLift.map(res,function(tr) {
			return stx_nano_TripleLift.detriple(tr,function(a,b,c) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,a,c);
			});
		});
	})),stx_arw_Arrange.toCascade(that)),stx_arw_Cascade.lift(stx_arw_arrowlet_Lift.postfix(a,function(res) {
		return stx_nano_ResLift.map(res,function(tr) {
			return stx_nano_TripleLift.detriple(tr,function(a,b,c) {
				return b;
			});
		});
	}))),stx_arw_Convert.fromFun1R(function(tp) {
		return stx_nano_CoupleLift.swap(tp);
	})));
};
var stx_arw_Arrange = {};
stx_arw_Arrange._new = function(self) {
	return self;
};
stx_arw_Arrange.lift = function(self) {
	return stx_arw_Arrange._new(self);
};
stx_arw_Arrange.pure = function(o) {
	return stx_arw_Arrange.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_nano_ResLift.fold(i,function(i) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,o),{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 18, className : "stx.arw._Arrange.Arrange_Impl_", methodName : "pure"}));
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 19, className : "stx.arw._Arrange.Arrange_Impl_", methodName : "pure"}));
		});
	}));
};
stx_arw_Arrange.fromRes = function(res) {
	return stx_arw_Arrange.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_nano_ResLift.fold(i,function(i) {
			return stx_async_terminal_Receiver.serve(cont.value(res,{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 27, className : "stx.arw._Arrange.Arrange_Impl_", methodName : "fromRes"}));
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 28, className : "stx.arw._Arrange.Arrange_Impl_", methodName : "fromRes"}));
		});
	}));
};
stx_arw_Arrange.fromFun1Attempt = function(f) {
	return stx_arw_Arrange.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_nano_ResLift.fold(i,function(i) {
			return stx_arw_arrowlet_Lift.prepare(f(stx_nano_CoupleLift.fst(i)),stx_nano_CoupleLift.snd(i),cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 37, className : "stx.arw._Arrange.Arrange_Impl_", methodName : "fromFun1Attempt"}));
		});
	}));
};
stx_arw_Arrange.fromFunResAttempt = function(f) {
	return stx_arw_Arrange.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_nano_ResLift.fold(i,function(i) {
			return stx_arw_arrowlet_Lift.prepare(f(stx_nano_CoupleLift.fst(i)),stx_nano_CoupleLift.snd(i),cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 46, className : "stx.arw._Arrange.Arrange_Impl_", methodName : "fromFunResAttempt"}));
		});
	}));
};
stx_arw_Arrange.fromFun1Cascade = function(f) {
	return stx_arw_Arrange.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_nano_ResLift.fold(i,function(i) {
			return stx_arw_arrowlet_Lift.prepare(f(stx_nano_CoupleLift.fst(i)),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_CoupleLift.snd(i)),cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 55, className : "stx.arw._Arrange.Arrange_Impl_", methodName : "fromFun1Cascade"}));
		});
	}));
};
stx_arw_Arrange.fromFunResCascade = function(f) {
	return stx_arw_Arrange.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_nano_ResLift.fold(i,function(i) {
			return stx_arw_arrowlet_Lift.prepare(f(stx_nano_CoupleLift.fst(i)),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_CoupleLift.snd(i)),cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 64, className : "stx.arw._Arrange.Arrange_Impl_", methodName : "fromFunResCascade"}));
		});
	}));
};
stx_arw_Arrange.bind_fold = function(fn,iterable) {
	return stx_nano_IterLift.lfold1(stx_nano_IterLift.map(stx_nano_IterLift.map(stx_ext_lift_LiftIterableToIter.toIter(iterable),function(t) {
		return stx_LiftBinary.bind1(fn,t);
	}),stx_arw_Arrange.fromFun1Cascade),function(next,memo) {
		return stx_arw_Arrange.lift(stx_arw_arrowlet_Lift.then(stx_arw_Arrange._.state(memo),stx_arw_Arrange.toArrowlet(next)));
	});
};
stx_arw_Arrange.fromFun2R = function(fn) {
	return stx_arw_Arrange.modifier(fn);
};
stx_arw_Arrange.modifier = function(fn) {
	return stx_arw_Arrange.lift(stx_arw_Arrowlet.Anon(function(res,cont) {
		return stx_nano_ResLift.fold(res,stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(i,s) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(i,s)),{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 87, className : "stx.arw._Arrange.Arrange_Impl_", methodName : "modifier"}));
		}),function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Arrange.hx", lineNumber : 88, className : "stx.arw._Arrange.Arrange_Impl_", methodName : "modifier"}));
		});
	}));
};
stx_arw_Arrange.prepare = function(this1,i,cont) {
	return stx_arw_Cascade._.prepare(this1,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),cont);
};
stx_arw_Arrange.split = function(this1,that) {
	return stx_arw_Arrange._.split(this1,that);
};
stx_arw_Arrange.toArrowlet = function(this1) {
	return this1;
};
stx_arw_Arrange.toCascade = function(this1) {
	return this1;
};
var stx_arw_arrowlet_Lift = function() { };
stx_arw_arrowlet_Lift.__name__ = "stx.arw.arrowlet.Lift";
stx_arw_arrowlet_Lift.lift = function(t) {
	return stx_arw_Arrowlet.lift(t.asArrowletDef());
};
stx_arw_arrowlet_Lift.inject = function(self,v) {
	return stx_arw_arrowlet_Lift.then(self,stx_arw_Arrowlet.fromFun1R(function(b) {
		return v;
	}));
};
stx_arw_arrowlet_Lift.then = function(lhs,rhs) {
	return stx_arw_arrowlet_Lift.lift(stx_arw_Arrowlet.Then(lhs,rhs));
};
stx_arw_arrowlet_Lift.next = function(lhs,rhs) {
	return stx_arw_Convention.fold(stx_arw_arrowlet_Lift.toInternal(lhs).get_convention(),function() {
		return stx_arw_arrowlet_Lift.lift(stx_arw_Arrowlet.ThenFun(lhs,rhs));
	},function() {
		return stx_arw_Arrowlet.ThenFunFun(($_=stx_arw_arrowlet_Lift.toInternal(lhs),$bind($_,$_.apply)),rhs);
	});
};
stx_arw_arrowlet_Lift.first = function(self) {
	return stx_arw_arrowlet_Lift.both(self,stx_arw_Arrowlet.unit());
};
stx_arw_arrowlet_Lift.second = function(self) {
	return stx_arw_arrowlet_Lift.both(stx_arw_Arrowlet.unit(),self);
};
stx_arw_arrowlet_Lift.split = function(lhs,rhs) {
	return stx_arw_arrowlet_Lift.lift(new stx_arw_arrowlet_term_Split(lhs,stx_arw_Arrowlet.toInternal(rhs)));
};
stx_arw_arrowlet_Lift.both = function(lhs,rhs) {
	return stx_arw_arrowlet_Lift.lift(new stx_arw_arrowlet_term_Both(lhs,stx_arw_Arrowlet.toInternal(rhs)));
};
stx_arw_arrowlet_Lift.swap = function(self) {
	return stx_arw_arrowlet_Lift.then(self,stx_arw_Arrowlet.fromFun1R(function(tp) {
		return stx_nano_CoupleLift.swap(tp);
	}));
};
stx_arw_arrowlet_Lift.fan = function(self) {
	return stx_arw_arrowlet_Lift.postfix(self,function(v) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,v,v);
	});
};
stx_arw_arrowlet_Lift.joint = function(lhs,rhs) {
	return stx_arw_arrowlet_Lift.then(lhs,stx_arw_arrowlet_Lift.split(stx_arw_Arrowlet.unit(),rhs));
};
stx_arw_arrowlet_Lift.bound = function(lhs,rhs) {
	return stx_arw_arrowlet_Lift.lift(new stx_arw_arrowlet_term_Bound(lhs,stx_arw_Arrowlet.toInternal(rhs)));
};
stx_arw_arrowlet_Lift.or = function(lhs,rhs) {
	return stx_arw_arrowlet_Lift.lift(new stx_arw_arrowlet_term_Or(lhs,stx_arw_Arrowlet.toInternal(rhs)).asArrowletDef());
};
stx_arw_arrowlet_Lift.left = function(self) {
	return stx_arw_lift_LiftToLeftChoice.toLeftChoice(self);
};
stx_arw_arrowlet_Lift.right = function(self) {
	return stx_arw_lift_LiftToRightChoice.toRightChoice(self);
};
stx_arw_arrowlet_Lift.prefix = function(self,fn) {
	return stx_arw_arrowlet_Lift.then(stx_arw_arrowlet_Lift.lift(new stx_arw_arrowlet_term_Sync(fn)),self);
};
stx_arw_arrowlet_Lift.postfix = function(self,fn) {
	return stx_arw_arrowlet_Lift.next(self,fn);
};
stx_arw_arrowlet_Lift.inform = function(lhs,rhs) {
	return stx_arw_arrowlet_Lift.lift(new stx_arw_arrowlet_term_Inform(lhs,stx_arw_Arrowlet.toInternal(rhs)));
};
stx_arw_arrowlet_Lift.broach = function(self) {
	return new stx_arw_arrowlet_term_Broach(self);
};
stx_arw_arrowlet_Lift.state = function(self) {
	return stx_arw_arrowlet_Lift.bound(self,stx_arw_Arrowlet.fromFun2R(stx_fn_BinaryLift.then(stx_LiftBinary.fn(function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	}),function(tp) {
		return stx_nano_CoupleLift.swap(tp);
	})));
};
stx_arw_arrowlet_Lift.fulfill = function(self,i) {
	return stx_arw_arrowlet_Lift.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		return stx_arw_arrowlet_Lift.prepare(self,i,cont);
	}));
};
stx_arw_arrowlet_Lift.deliver = function(self,cb) {
	return stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Sync(function(o) {
		cb(o);
		return null;
	}));
};
stx_arw_arrowlet_Lift.prepare = function(self,i,cont) {
	return stx_arw_Convention.fold(stx_arw_arrowlet_Lift.toInternal(self).get_convention(),function() {
		return stx_arw_arrowlet_Lift.toInternal(self).defer(i,cont);
	},function() {
		return stx_async_terminal_Receiver.serve(cont.value(stx_arw_arrowlet_Lift.toInternal(self).apply(i),{ fileName : "src/main/haxe/stx/arw/arrowlet/Lift.hx", lineNumber : 125, className : "stx.arw.arrowlet.Lift", methodName : "prepare"}));
	});
};
stx_arw_arrowlet_Lift.environment = function(self,i,success,failure) {
	return stx_arw_arrowlet_term_Fiber.lift(stx_arw_Arrowlet.Deliver(stx_arw_Arrowlet.Fulfill(self,i),success,failure));
};
stx_arw_arrowlet_Lift.fudge = function(self,i) {
	var v = null;
	stx_arw_arrowlet_term_Fiber.crunch(stx_arw_arrowlet_Lift.environment(self,i,function(x) {
		v = x;
	},function(e) {
		stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,e);
	}));
	return v;
};
stx_arw_arrowlet_Lift.flat_map = function(self,fn) {
	return stx_arw_arrowlet_Lift.lift(new stx_arw_arrowlet_term_FlatMap(self,fn));
};
stx_arw_arrowlet_Lift.pinch = function(a) {
	return stx_arw_arrowlet_Lift.then(stx_arw_arrowlet_Lift.fan(stx_arw_Arrowlet.unit()),a);
};
stx_arw_arrowlet_Lift.toInternal = function(self) {
	return stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(self));
};
stx_arw_arrowlet_Lift.prototype = {
	contextualize: function(self,i,success,failure) {
		return stx_arw_Contextualize.load(stx_arw_Contextualize.make(i,success,failure),self);
	}
	,__class__: stx_arw_arrowlet_Lift
};
var stx_arw_Arrowlet = {};
stx_arw_Arrowlet._new = function(self) {
	return self;
};
stx_arw_Arrowlet.lift = function(self) {
	return stx_arw_Arrowlet._new(self);
};
stx_arw_Arrowlet.unit = function() {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Unit());
};
stx_arw_Arrowlet.pure = function(o) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Pure(o,{ fileName : "src/main/haxe/stx/arw/Arrowlet.hx", lineNumber : 18, className : "stx.arw._Arrowlet.Arrowlet_Impl_", methodName : "pure"}));
};
stx_arw_Arrowlet.Sync = function(self) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Sync(self));
};
stx_arw_Arrowlet.Then = function(self,that) {
	return new stx_arw_arrowlet_term_Then(self,that);
};
stx_arw_Arrowlet.Anon = function(fn) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Anon(fn));
};
stx_arw_Arrowlet.Applier = function() {
	return stx_arw_Arrowlet.lift(stx_arw_arrowlet_term_Applier._new());
};
stx_arw_Arrowlet.FlatMap = function(self,func) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_FlatMap(stx_arw_Arrowlet.toInternal(self),func));
};
stx_arw_Arrowlet.Delay = function(milliseconds) {
	return new stx_arw_arrowlet_term_Delay(milliseconds);
};
stx_arw_Arrowlet.SplitFun = function(lhs,rhs) {
	return new stx_arw_arrowlet_term_SplitFun(lhs,rhs);
};
stx_arw_Arrowlet.Fulfill = function(self,input) {
	return new stx_arw_arrowlet_term_Fulfill(stx_arw_Arrowlet.toInternal(self),input,{ fileName : "src/main/haxe/stx/arw/Arrowlet.hx", lineNumber : 42, className : "stx.arw._Arrowlet.Arrowlet_Impl_", methodName : "Fulfill"});
};
stx_arw_Arrowlet.Deliver = function(self,success,failure) {
	return new stx_arw_arrowlet_term_Deliver(stx_arw_Arrowlet.toInternal(self),success,failure,{ fileName : "src/main/haxe/stx/arw/Arrowlet.hx", lineNumber : 45, className : "stx.arw._Arrowlet.Arrowlet_Impl_", methodName : "Deliver"});
};
stx_arw_Arrowlet.ThenArw = function(self,fn) {
	return stx_arw_arrowlet_term_ThenArw.make(self,fn);
};
stx_arw_Arrowlet.ThenFun = function(self,fn) {
	return new stx_arw_arrowlet_term_ThenFun(stx_arw_Arrowlet.toInternal(self),fn);
};
stx_arw_Arrowlet.ThenFunFun = function(self,fn) {
	return new stx_arw_arrowlet_term_ThenFunFun(self,fn);
};
stx_arw_Arrowlet.Fun1Future = function(self) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Fun1Future(self));
};
stx_arw_Arrowlet.Future = function(ft) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Future(ft));
};
stx_arw_Arrowlet.fromFunXR = function(f) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Sync(function(_) {
		return f();
	}));
};
stx_arw_Arrowlet.fromFun1R = function(f) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Sync(f));
};
stx_arw_Arrowlet.fromFun2R = function(f) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Sync(stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,f)));
};
stx_arw_Arrowlet.fromFunSink = function(fn) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Raw(function(i,cont) {
		fn(i,function(o) {
			cont(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,o));
		});
	}));
};
stx_arw_Arrowlet.environment = function(this1,i,success,failure) {
	return stx_arw_Arrowlet._.environment(this1,i,success,failure);
};
stx_arw_Arrowlet.toInternal = function(this1) {
	return stx_arw_Internal.lift(this1);
};
var stx_async_declared_Api = function() { };
stx_async_declared_Api.__name__ = "stx.async.declared.Api";
stx_async_declared_Api.__isInterface__ = true;
stx_async_declared_Api.prototype = {
	pos: null
	,id: null
	,get_id: null
	,equals: null
	,__class__: stx_async_declared_Api
	,__properties__: {get_id:"get_id"}
};
var stx_async_transmit_Api = function() { };
stx_async_transmit_Api.__name__ = "stx.async.transmit.Api";
stx_async_transmit_Api.__isInterface__ = true;
stx_async_transmit_Api.__interfaces__ = [stx_async_declared_Api];
stx_async_transmit_Api.prototype = {
	transmission_enabled: null
	,signal: null
	,get_signal: null
	,trigger: null
	,get_trigger: null
	,__class__: stx_async_transmit_Api
	,__properties__: {get_trigger:"get_trigger",get_signal:"get_signal"}
};
var stx_async_tick_Api = function() { };
stx_async_tick_Api.__name__ = "stx.async.tick.Api";
stx_async_tick_Api.__isInterface__ = true;
stx_async_tick_Api.__interfaces__ = [stx_async_transmit_Api];
stx_async_tick_Api.prototype = {
	pursue: null
	,escape: null
	,update: null
	,__class__: stx_async_tick_Api
};
var stx_async_goal_Api = function() { };
stx_async_goal_Api.__name__ = "stx.async.goal.Api";
stx_async_goal_Api.__isInterface__ = true;
stx_async_goal_Api.__interfaces__ = [stx_async_tick_Api];
stx_async_goal_Api.prototype = {
	loaded: null
	,get_loaded: null
	,get_status: null
	,signal: null
	,get_signal: null
	,toGoalApi: null
	,toString: null
	,__class__: stx_async_goal_Api
	,__properties__: {get_signal:"get_signal",get_loaded:"get_loaded"}
};
var stx_async_task_Api = function() { };
stx_async_task_Api.__name__ = "stx.async.task.Api";
stx_async_task_Api.__isInterface__ = true;
stx_async_task_Api.__interfaces__ = [stx_async_goal_Api];
stx_async_task_Api.prototype = {
	get_defect: null
	,get_result: null
	,toWork: null
	,toTaskApi: null
	,toString: null
	,__class__: stx_async_task_Api
};
var stx_arw_ArrowletApi = function() { };
stx_arw_ArrowletApi.__name__ = "stx.arw.ArrowletApi";
stx_arw_ArrowletApi.__isInterface__ = true;
stx_arw_ArrowletApi.__interfaces__ = [stx_async_task_Api];
stx_arw_ArrowletApi.prototype = {
	apply: null
	,defer: null
	,convention: null
	,get_convention: null
	,asArrowletDef: null
	,__class__: stx_arw_ArrowletApi
	,__properties__: {get_convention:"get_convention"}
};
var stx_async_declared_Cls = function(pos) {
	stx_pico_Clazz.call(this);
	this.pos = pos;
	this.id = stx_async_Counter.next();
};
stx_async_declared_Cls.__name__ = "stx.async.declared.Cls";
stx_async_declared_Cls.__interfaces__ = [stx_async_declared_Api];
stx_async_declared_Cls.__super__ = stx_pico_Clazz;
stx_async_declared_Cls.prototype = $extend(stx_pico_Clazz.prototype,{
	pos: null
	,id: null
	,get_id: function() {
		return this.id;
	}
	,equals: function(that) {
		return this.get_id() == that.get_id();
	}
	,__class__: stx_async_declared_Cls
	,__properties__: {get_id:"get_id"}
});
var stx_async_transmit_Cls = function(pos) {
	stx_async_declared_Cls.call(this,pos);
	this.transmission_enabled = false;
};
stx_async_transmit_Cls.__name__ = "stx.async.transmit.Cls";
stx_async_transmit_Cls.__super__ = stx_async_declared_Cls;
stx_async_transmit_Cls.prototype = $extend(stx_async_declared_Cls.prototype,{
	transmission_enabled: null
	,signal: null
	,get_signal: function() {
		if(this.transmission_enabled) {
			return this.signal;
		} else {
			this.transmission_enabled = true;
			this.trigger = tink_core_Signal.trigger();
			this.signal = this.get_trigger().asSignal();
			return this.signal;
		}
	}
	,trigger: null
	,get_trigger: function() {
		if(this.transmission_enabled) {
			return this.trigger;
		} else {
			this.transmission_enabled = true;
			this.trigger = tink_core_Signal.trigger();
			this.signal = this.trigger.asSignal();
			return this.trigger;
		}
	}
	,__class__: stx_async_transmit_Cls
	,__properties__: $extend(stx_async_declared_Cls.prototype.__properties__,{get_trigger:"get_trigger",get_signal:"get_signal"})
});
var stx_async_tick_Abs = function(pos) {
	stx_async_transmit_Cls.call(this,pos);
};
stx_async_tick_Abs.__name__ = "stx.async.tick.Abs";
stx_async_tick_Abs.__interfaces__ = [stx_async_tick_Api];
stx_async_tick_Abs.__super__ = stx_async_transmit_Cls;
stx_async_tick_Abs.prototype = $extend(stx_async_transmit_Cls.prototype,{
	pursue: null
	,escape: null
	,update: null
	,__class__: stx_async_tick_Abs
});
var stx_async_tick_Cls = function(pos) {
	stx_async_tick_Abs.call(this,pos);
};
stx_async_tick_Cls.__name__ = "stx.async.tick.Cls";
stx_async_tick_Cls.__super__ = stx_async_tick_Abs;
stx_async_tick_Cls.prototype = $extend(stx_async_tick_Abs.prototype,{
	pursue: function() {
	}
	,escape: function() {
	}
	,update: function() {
	}
	,__class__: stx_async_tick_Cls
});
var stx_async_goal_term_Direct = function(pos) {
	stx_async_tick_Cls.call(this,pos);
	this.__status = 0;
};
stx_async_goal_term_Direct.__name__ = "stx.async.goal.term.Direct";
stx_async_goal_term_Direct.__interfaces__ = [stx_async_goal_Api];
stx_async_goal_term_Direct.__super__ = stx_async_tick_Cls;
stx_async_goal_term_Direct.prototype = $extend(stx_async_tick_Cls.prototype,{
	toString: null
	,__status: null
	,pursue: null
	,escape: null
	,loaded: null
	,get_loaded: function() {
		return this.__status == 4;
	}
	,get_status: function() {
		return this.__status;
	}
	,set_status: function(status) {
		return this.__status = status;
	}
	,toGoalApi: function() {
		return this;
	}
	,__class__: stx_async_goal_term_Direct
	,__properties__: $extend(stx_async_tick_Cls.prototype.__properties__,{get_loaded:"get_loaded"})
});
var stx_async_task_Direct = function(pos) {
	stx_async_goal_term_Direct.call(this,pos);
};
stx_async_task_Direct.__name__ = "stx.async.task.Direct";
stx_async_task_Direct.__interfaces__ = [stx_async_task_Api];
stx_async_task_Direct.__super__ = stx_async_goal_term_Direct;
stx_async_task_Direct.prototype = $extend(stx_async_goal_term_Direct.prototype,{
	status: null
	,defect: null
	,get_defect: function() {
		if(this.defect == null) {
			return this.set_defect(stx_nano_Defect.unit());
		} else {
			return this.defect;
		}
	}
	,set_defect: function(v) {
		return this.defect = v;
	}
	,result: null
	,get_result: function() {
		return this.result;
	}
	,set_result: function(v) {
		return this.result = v;
	}
	,pursue: function() {
	}
	,escape: function() {
	}
	,update: function() {
	}
	,toGoalApi: function() {
		return this;
	}
	,toWork: function(pos) {
		return this;
	}
	,toTaskApi: function() {
		return this;
	}
	,toString: function() {
		return stx_async_task_Util.toString(this);
	}
	,__class__: stx_async_task_Direct
	,__properties__: $extend(stx_async_goal_term_Direct.prototype.__properties__,{set_result:"set_result",get_result:"get_result",set_defect:"set_defect",get_defect:"get_defect",get_status:"get_status"})
});
var stx_arw_Task = function(pos) {
	stx_async_task_Direct.call(this,pos);
};
stx_arw_Task.__name__ = "stx.arw.Task";
stx_arw_Task.__super__ = stx_async_task_Direct;
stx_arw_Task.prototype = $extend(stx_async_task_Direct.prototype,{
	__class__: stx_arw_Task
});
var stx_arw_ArrowletCls = function() {
	stx_arw_Task.call(this,{ fileName : "src/main/haxe/stx/arw/ArrowletCls.hx", lineNumber : 5, className : "stx.arw.ArrowletCls", methodName : "new"});
};
stx_arw_ArrowletCls.__name__ = "stx.arw.ArrowletCls";
stx_arw_ArrowletCls.__interfaces__ = [stx_arw_ArrowletApi];
stx_arw_ArrowletCls.__super__ = stx_arw_Task;
stx_arw_ArrowletCls.prototype = $extend(stx_arw_Task.prototype,{
	apply: null
	,defer: null
	,convention: null
	,get_convention: function() {
		return true;
	}
	,asArrowletDef: function() {
		return this;
	}
	,toString: function() {
		return stx_pico_OptionLift.defv(stx_lift_ArrayLift.last(Type.getClassName(stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,this)).split(".")),"");
	}
	,pursue: function() {
		this.status = 4;
	}
	,__class__: stx_arw_ArrowletCls
	,__properties__: $extend(stx_arw_Task.prototype.__properties__,{get_convention:"get_convention"})
});
var stx_arw_AttemptLift = function() { };
stx_arw_AttemptLift.__name__ = "stx.arw.AttemptLift";
stx_arw_AttemptLift.lift = function(self) {
	return stx_arw_Attempt._new(self);
};
stx_arw_AttemptLift.then = function(self,that) {
	return stx_arw_AttemptLift.lift(stx_arw_Arrowlet.Then(self,that));
};
stx_arw_AttemptLift.rectify = function(self,next) {
	return stx_arw_Arrowlet.lift(stx_arw_Arrowlet.Then(stx_arw_Attempt.toArrowlet(self),stx_arw_Rectify.toArrowlet(next)));
};
stx_arw_AttemptLift.resolve = function(self,next) {
	return stx_arw_AttemptLift.lift(stx_arw_arrowlet_Lift.then(self,stx_arw_Cascade.toArrowlet(stx_arw_ResolveLift.toCascade(next))));
};
stx_arw_AttemptLift.reclaim = function(self,next) {
	return stx_arw_AttemptLift.lift(stx_arw_AttemptLift.attempt(stx_arw_AttemptLift.then(self,stx_arw_Convert.toCascade(next)),stx_arw_AttemptLift.lift(stx_arw_Arrowlet.Anon(function(prd,cont) {
		return stx_arw_Produce.prepare(prd,cont);
	}))));
};
stx_arw_AttemptLift.recover = function(self,next) {
	return stx_arw_AttemptLift.lift(stx_arw_arrowlet_Lift.then(self,stx_arw_Cascade.toArrowlet(stx_arw_Recover.toCascade(next))));
};
stx_arw_AttemptLift.convert = function(self,next) {
	return stx_arw_AttemptLift.then(self,stx_arw_Convert.toCascade(next));
};
stx_arw_AttemptLift.errata = function(self,fn) {
	return stx_arw_AttemptLift.lift(stx_arw_arrowlet_Lift.postfix(self,function(oc) {
		return stx_nano_ResLift.errata(oc,fn);
	}));
};
stx_arw_AttemptLift.errate = function(self,fn) {
	return stx_arw_AttemptLift.lift(stx_arw_arrowlet_Lift.postfix(self,function(oc) {
		return stx_nano_ResLift.errate(oc,fn);
	}));
};
stx_arw_AttemptLift.attempt = function(self,next) {
	return stx_arw_AttemptLift.then(self,stx_arw_Attempt.toCascade(next));
};
stx_arw_AttemptLift.reframe = function(self) {
	return stx_arw_CascadeLift.reframe(stx_arw_Attempt.toCascade(self));
};
stx_arw_AttemptLift.broach = function(self) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_arw_arrowlet_Lift.prepare(stx_arw_AttemptLift.convert(self,stx_arw_Convert.fromFun1R(function(o) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,ipt,o);
		})),ipt,cont);
	}));
};
stx_arw_AttemptLift.provide = function(self,i) {
	return stx_arw_Produce.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		return stx_arw_arrowlet_Lift.prepare(self,i,cont);
	}));
};
stx_arw_AttemptLift.arrange = function(self,then) {
	return stx_arw_AttemptLift.lift(new stx_arw_attempt_AttemptArrange(self,then));
};
stx_arw_AttemptLift.prefix = function(self,that) {
	return stx_arw_AttemptLift.lift(stx_arw_Arrowlet._.prefix(stx_arw_Attempt.toArrowlet(self),that));
};
stx_arw_AttemptLift.cascade = function(self,that) {
	return stx_arw_AttemptLift.lift(stx_arw_arrowlet_Lift.then(self,stx_arw_Cascade.toArrowlet(that)));
};
stx_arw_AttemptLift.execute = function(self,that) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_nano_ResLift.fold(ipt,function(o) {
			return stx_arw_Produce.prepare(stx_arw_ExecuteLift.produce(that,stx_arw_Produce.pure(o)),cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Attempt.hx", lineNumber : 170, className : "stx.arw.AttemptLift", methodName : "execute"}));
		});
	})));
};
stx_arw_AttemptLift.command = function(self,that) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_nano_ResLift.fold(ipt,function(o) {
			return stx_arw_arrowlet_Lift.prepare(stx_arw_CommandLift.produce(that,stx_arw_Produce.pure(o)),o,cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Attempt.hx", lineNumber : 183, className : "stx.arw.AttemptLift", methodName : "command"}));
		});
	})));
};
var stx_arw_Attempt = {};
stx_arw_Attempt._new = function(self) {
	return self;
};
stx_arw_Attempt.lift = function(self) {
	return stx_arw_Attempt._new(self);
};
stx_arw_Attempt.unit = function() {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),{ fileName : "src/main/haxe/stx/arw/Attempt.hx", lineNumber : 19, className : "stx.arw._Attempt.Attempt_Impl_", methodName : "unit"}));
	}));
};
stx_arw_Attempt.pure = function(o) {
	return stx_arw_Attempt.fromRes(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,o));
};
stx_arw_Attempt.fromRes = function(res) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(res,{ fileName : "src/main/haxe/stx/arw/Attempt.hx", lineNumber : 31, className : "stx.arw._Attempt.Attempt_Impl_", methodName : "fromRes"}));
	}));
};
stx_arw_Attempt.fromFun1Res = function(fn) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(pI,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(fn(pI),{ fileName : "src/main/haxe/stx/arw/Attempt.hx", lineNumber : 40, className : "stx.arw._Attempt.Attempt_Impl_", methodName : "fromFun1Res"}));
	}));
};
stx_arw_Attempt.fromFun1Produce = function(fn) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(pI,cont) {
		return stx_arw_Produce.prepare(fn(pI),cont);
	}));
};
stx_arw_Attempt.fromUnary1Produce = function(fn) {
	return stx_arw_Attempt.fromFun1Produce(fn);
};
stx_arw_Attempt.fromFun1Provide = function(fn) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(pI,cont) {
		return stx_arw_Produce.prepare(stx_arw_Produce.lift(stx_arw_ProvideLift.convert(fn(pI),stx_arw_Convert.fromFun1R(function(t) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		}))),cont);
	}));
};
stx_arw_Attempt.fromFun1R = function(fn) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(i)),{ fileName : "src/main/haxe/stx/arw/Attempt.hx", lineNumber : 63, className : "stx.arw._Attempt.Attempt_Impl_", methodName : "fromFun1R"}));
	}));
};
stx_arw_Attempt.toArrowlet = function(this1) {
	return this1;
};
stx_arw_Attempt.toCascade = function(this1) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_nano_ResLift.fold(i,function(v) {
			return stx_arw_Arrowlet._.prepare(this1,v,cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Attempt.hx", lineNumber : 74, className : "stx.arw._Attempt.Attempt_Impl_", methodName : "toCascade"}));
		});
	}));
};
stx_arw_Attempt.environment = function(this1,i,success,failure) {
	return stx_arw_Cascade._.environment(stx_LiftAttemptToCascade.toCascade(this1),i,success,failure);
};
stx_arw_Attempt.prefix = function(this1,that) {
	return stx_arw_Attempt._.prefix(this1,that);
};
var stx_arw_CascadeLift = function() { };
stx_arw_CascadeLift.__name__ = "stx.arw.CascadeLift";
stx_arw_CascadeLift.prepare = function(self,i,cont) {
	return stx_arw_Arrowlet._.prepare(self,i,cont);
};
stx_arw_CascadeLift.lift = function(self) {
	return stx_arw_Cascade._new(self);
};
stx_arw_CascadeLift.or = function(self,that) {
	return stx_arw_CascadeLift.lift(stx_arw_Arrowlet.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var _g = ipt.t;
			switch(_g._hx_index) {
			case 0:
				return stx_arw_arrowlet_Lift.prepare(self,stx_nano_ResSum.Accept(_g.v),cont);
			case 1:
				return stx_arw_arrowlet_Lift.prepare(that,stx_nano_ResSum.Accept(_g.v),cont);
			}
			break;
		case 1:
			return (stx_arw_CascadeLift.typical_fail_handler(cont))(ipt.e);
		}
	}));
};
stx_arw_CascadeLift.errata = function(self,fn) {
	return stx_arw_CascadeLift.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_nano_ResLift.fold(i,function(i) {
			return stx_arw_arrowlet_Lift.prepare(stx_arw_Arrowlet._.postfix(self,function(o) {
				return stx_nano_ResLift.errata(o,fn);
			}),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),cont);
		},stx_arw_CascadeLift.typical_fail_handler(cont));
	}));
};
stx_arw_CascadeLift.errate = function(self,fn) {
	return stx_arw_CascadeLift.errata(self,function(e) {
		return e.map(fn);
	});
};
stx_arw_CascadeLift.reframe = function(self) {
	return stx_arw_Reframe.fromCascade(stx_arw_CascadeLift.lift(new stx_arw_reframe_term_CascadeReframe(self)));
};
stx_arw_CascadeLift.cascade = function(self,that) {
	return stx_arw_CascadeLift.lift(stx_arw_Arrowlet.Then(self,that));
};
stx_arw_CascadeLift.attempt = function(self,that) {
	return stx_arw_CascadeLift.cascade(self,stx_arw_Attempt.toCascade(that));
};
stx_arw_CascadeLift.convert = function(self,that) {
	return stx_arw_CascadeLift.cascade(self,stx_arw_Convert.toCascade(that));
};
stx_arw_CascadeLift.postfix = function(self,fn) {
	return stx_arw_CascadeLift.convert(self,stx_arw_Convert.fromFun1R(fn));
};
stx_arw_CascadeLift.prefix = function(self,fn) {
	return stx_arw_CascadeLift.lift(stx_arw_arrowlet_Lift.then(stx_arw_Cascade.fromArrowlet(stx_arw_Arrowlet.fromFun1R(fn)),stx_arw_Cascade.toArrowlet(self)));
};
stx_arw_CascadeLift.typical_fail_handler = function(cont) {
	return function(e) {
		return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Cascade.hx", lineNumber : 144, className : "stx.arw.CascadeLift", methodName : "typical_fail_handler"}));
	};
};
stx_arw_CascadeLift.environment = function(self,i,success,failure) {
	return stx_arw_Arrowlet._.environment(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),function(res) {
		stx_nano_ResLift.fold(res,success,failure);
	},function(err) {
		throw haxe_Exception.thrown(err);
	});
};
stx_arw_CascadeLift.provide = function(self,i) {
	return stx_arw_Produce.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		return stx_arw_arrowlet_Lift.prepare(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),cont);
	}));
};
stx_arw_CascadeLift.reclaim = function(self,that) {
	return stx_arw_CascadeLift.lift(stx_arw_CascadeLift.attempt(stx_arw_CascadeLift.cascade(self,stx_arw_Convert.toCascade(that)),stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(prd,cont) {
		return stx_arw_Produce.prepare(prd,cont);
	}))));
};
stx_arw_CascadeLift.arrange = function(self,then) {
	return stx_arw_CascadeLift.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		var bound = tink_core_Future.trigger();
		var inner = cont.inner(function(outcome) {
			var input = stx_pico_OutcomeLift.fold(outcome,function(res) {
				return stx_nano_ResLift.fold(res,function(lhs) {
					return stx_nano_ResLift.fold(i,function(i) {
						return stx_arw_Arrange.prepare(then,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,i),cont);
					},function(e) {
						return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Cascade.hx", lineNumber : 165, className : "stx.arw.CascadeLift", methodName : "arrange"}));
					});
				},function(e) {
					return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Cascade.hx", lineNumber : 166, className : "stx.arw.CascadeLift", methodName : "arrange"}));
				});
			},function(_) {
				return stx_async_terminal_Receiver.serve(cont.error([null],{ fileName : "src/main/haxe/stx/arw/Cascade.hx", lineNumber : 167, className : "stx.arw.CascadeLift", methodName : "arrange"}));
			});
			bound.trigger(input);
		},{ fileName : "src/main/haxe/stx/arw/Cascade.hx", lineNumber : 163, className : "stx.arw.CascadeLift", methodName : "arrange"});
		return stx_async_WorkLift.seq(stx_arw_arrowlet_Lift.prepare(self,i,inner),stx_async_Work.fromFutureWork(bound));
	}));
};
stx_arw_CascadeLift.split = function(self,that) {
	return stx_arw_CascadeLift.lift(stx_arw_arrowlet_Lift.postfix(stx_arw_Arrowlet._.split(self,stx_arw_Cascade.toArrowlet(that)),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,stx_nano_Res._.zip)));
};
stx_arw_CascadeLift.broach = function(self) {
	return stx_arw_CascadeLift.lift(stx_arw_arrowlet_Lift.then(stx_arw_Arrowlet._.broach(self),stx_arw_Arrowlet.Sync(function(tp) {
		return stx_nano_CoupleLift.decouple(tp,function(lhs,rhs) {
			return stx_nano_ResLift.zip(lhs,rhs);
		});
	})));
};
stx_arw_CascadeLift.flat_map = function(self,fn) {
	return stx_arw_CascadeLift.lift(stx_arw_Arrowlet.FlatMap(stx_arw_Cascade.toArrowlet(self),function(res) {
		return stx_arw_Cascade.toArrowlet(stx_nano_ResLift.fold(res,function(ok) {
			return fn(ok);
		},function(no) {
			return stx_arw_Cascade.fromRes(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no));
		}));
	}));
};
stx_arw_CascadeLift.command = function(self,that) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_nano_ResLift.fold(ipt,function(o) {
			return stx_arw_arrowlet_Lift.prepare(stx_arw_CommandLift.produce(that,stx_arw_Produce.pure(o)),o,cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Cascade.hx", lineNumber : 206, className : "stx.arw.CascadeLift", methodName : "command"}));
		});
	})));
};
var stx_arw_Cascade = {};
stx_arw_Cascade._new = function(self) {
	return self;
};
stx_arw_Cascade.lift = function(self) {
	return stx_arw_Cascade._new(self);
};
stx_arw_Cascade.unit = function() {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.fromFun1R(function(oc) {
		return oc;
	}));
};
stx_arw_Cascade.pure = function(o) {
	return stx_arw_Cascade.fromRes(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,o));
};
stx_arw_Cascade.Fun = function(fn) {
	return stx_arw_Cascade.fromFun1R(fn);
};
stx_arw_Cascade.fromFun1Res = function(fn) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.fromFun1R(function(ocI) {
		return stx_nano_ResLift.fold(ocI,function(i) {
			return fn(i);
		},function(e) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		});
	}));
};
stx_arw_Cascade.fromFun1R = function(fn) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.fromFun1R(function(ocI) {
		return stx_nano_ResLift.fold(ocI,function(i) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(i));
		},function(e) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		});
	}));
};
stx_arw_Cascade.fromRes = function(ocO) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.fromFun1R(function(ocI) {
		return stx_nano_ResLift.fold(ocI,function(i) {
			return ocO;
		},function(e) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		});
	}));
};
stx_arw_Cascade.fromFunResRes0 = function(fn) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.Sync(function(res) {
		return stx_nano_ResLift.fold(res,function(ok) {
			return fn(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
		},function(no) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no);
		});
	}));
};
stx_arw_Cascade.fromFunResRes = function(fn) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.Sync(function(res) {
		return stx_nano_ResLift.fold(res,function(ok) {
			return fn(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
		},function(no) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no);
		});
	}));
};
stx_arw_Cascade.fromArrowlet = function(arw) {
	return stx_arw_Cascade.lift(new stx_arw_cascade_term_ArrowletCascade(stx_arw_Arrowlet.toInternal(arw)));
};
stx_arw_Cascade.fromAttempt = function(self) {
	return new stx_arw_cascade_term_AttemptCascade(self);
};
stx_arw_Cascade.fromProduce = function(arw) {
	return new stx_arw_cascade_term_ProduceCascade(arw);
};
stx_arw_Cascade.fromFun1Produce = function(arw) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_nano_ResLift.fold(i,function(i) {
			return stx_arw_Produce.prepare(arw(i),cont);
		},stx_arw_Cascade.typical_fail_handler(cont));
	}));
};
stx_arw_Cascade.typical_fail_handler = function(cont) {
	return function(e) {
		return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Cascade.hx", lineNumber : 68, className : "stx.arw._Cascade.Cascade_Impl_", methodName : "typical_fail_handler"}));
	};
};
stx_arw_Cascade.toArrowlet = function(this1) {
	return this1;
};
stx_arw_Cascade.environment = function(this1,i,success,failure) {
	return stx_arw_Cascade._.environment(this1,i,success,failure);
};
stx_arw_Cascade.split = function(this1,that) {
	return stx_arw_Cascade._.split(this1,that);
};
stx_arw_Cascade.prefix = function(this1,fn) {
	return stx_arw_Cascade._.prefix(this1,fn);
};
stx_arw_Cascade.convert = function(this1,that) {
	return stx_arw_Cascade._.convert(this1,that);
};
stx_arw_Cascade.broach = function(this1) {
	return stx_arw_Cascade._.broach(this1);
};
stx_arw_Cascade.flat_map = function(this1,fn) {
	return stx_arw_Cascade._.flat_map(this1,fn);
};
var stx_arw_CommandLift = function() { };
stx_arw_CommandLift.__name__ = "stx.arw.CommandLift";
stx_arw_CommandLift.produce = function(command,produce) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Then(stx_arw_Command.toArrowlet(command),stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_pico_OptionLift.fold(ipt,function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Command.hx", lineNumber : 73, className : "stx.arw.CommandLift", methodName : "produce"}));
		},function() {
			return stx_arw_Produce.prepare(produce,cont);
		});
	})));
};
var stx_arw_Command = {};
stx_arw_Command.__properties__ = {get_self:"get_self"};
stx_arw_Command._new = function(self) {
	return self;
};
stx_arw_Command.unit = function() {
	return stx_arw_Command.lift(stx_arw_Arrowlet.Sync(function(i) {
		return stx_nano_Report.unit();
	}));
};
stx_arw_Command.lift = function(self) {
	return stx_arw_Command._new(self);
};
stx_arw_Command.fromFun1Void = function(fn) {
	return stx_arw_Command.lift(stx_arw_Arrowlet.Sync(stx_fn_UnaryLift.then(stx_LiftUnary.fn(stx_nano_lift_LiftNano.passthrough(stx_nano_Wildcard.__,fn)),function(_) {
		return stx_nano_Report.unit();
	})));
};
stx_arw_Command.fromFun1Report = function(fn) {
	return stx_arw_Command.lift(stx_arw_Arrowlet.fromFun1R(function(i) {
		return fn(i);
	}));
};
stx_arw_Command.fromFun1Option = function(fn) {
	return stx_arw_Command.lift(stx_arw_Arrowlet.fromFun1R(function(i) {
		return stx_nano_Report._new(fn(i));
	}));
};
stx_arw_Command.fromArrowlet = function(self) {
	return stx_arw_Command.lift(new stx_arw_command_term_ArrowletCommand(self));
};
stx_arw_Command.fromFun1Execute = function(fn) {
	return stx_arw_Command.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_arw_ExecuteLift.prepare(fn(i),cont);
	}));
};
stx_arw_Command.toCascade = function(this1) {
	return stx_arw_Cascade.lift(new stx_arw_cascade_term_CommandCascade(this1));
};
stx_arw_Command.prj = function(this1) {
	return this1;
};
stx_arw_Command.toArrowlet = function(this1) {
	return this1;
};
stx_arw_Command.and = function(this1,that) {
	return stx_arw_Command.lift(stx_arw_arrowlet_Lift.postfix(stx_arw_arrowlet_Lift.split(stx_arw_Command.get_self(this1),stx_arw_Command.toArrowlet(that)),function(tp) {
		return stx_nano_Report.merge(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp));
	}));
};
stx_arw_Command.errata = function(this1,fn) {
	return stx_arw_arrowlet_Lift.postfix(stx_arw_Command.get_self(this1),function(report) {
		return stx_nano_Report.errata(report,fn);
	});
};
stx_arw_Command.provide = function(this1,i) {
	return stx_arw_Execute.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		return stx_arw_Command.prepare(this1,i,cont);
	}));
};
stx_arw_Command.get_self = function(this1) {
	return this1;
};
stx_arw_Command.prepare = function(this1,i,cont) {
	return stx_arw_Arrowlet._.prepare(this1,i,cont);
};
var stx_arw_ContextualizeCls = function(environment) {
	this.environment = environment;
};
stx_arw_ContextualizeCls.__name__ = "stx.arw.ContextualizeCls";
stx_arw_ContextualizeCls.prototype = {
	environment: null
	,on_error: function(e) {
		stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,e);
	}
	,on_value: function(r) {
		stx_Log.debug(stx_arw_Log.log(stx_nano_Wildcard.__),r,{ fileName : "src/main/haxe/stx/arw/Contextualize.hx", lineNumber : 12, className : "stx.arw.ContextualizeCls", methodName : "on_value"});
	}
	,__class__: stx_arw_ContextualizeCls
};
var stx_arw_Contextualize = {};
stx_arw_Contextualize.pure = function(environment) {
	return stx_arw_Contextualize.make(environment);
};
stx_arw_Contextualize.make = function(environment,on_value,on_error) {
	var result = new stx_arw_ContextualizeCls(environment);
	if(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,on_value))) {
		result.on_value = on_value;
	}
	if(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,on_error))) {
		result.on_error = on_error;
	}
	return result;
};
stx_arw_Contextualize.fromInput = function(environment) {
	return stx_arw_Contextualize.make(environment);
};
stx_arw_Contextualize.load = function(this1,arrowlet) {
	return stx_arw_arrowlet_term_Fiber.lift(new stx_arw_arrowlet_term_Completion(this1,stx_arw_Arrowlet.lift(arrowlet)));
};
var stx_arw_ConventionSum = {};
stx_arw_ConventionSum._new = function(self) {
	return self;
};
stx_arw_ConventionSum.prj = function(this1) {
	return this1;
};
stx_arw_ConventionSum.lift = function(self) {
	return stx_arw_Convention._new(self);
};
var stx_arw_Convention = {};
stx_arw_Convention.__properties__ = {get_self:"get_self"};
stx_arw_Convention._new = function(self) {
	return self;
};
stx_arw_Convention.lift = function(self) {
	return stx_arw_Convention._new(self);
};
stx_arw_Convention.or = function(this1,that) {
	return stx_arw_Convention.lift(stx_arw_ConventionSum.prj(this1) || stx_arw_ConventionSum.prj(stx_arw_Convention.prj(that)));
};
stx_arw_Convention.fold = function(this1,is_async,is_sync) {
	return stx_LiftIf.if_else(stx_arw_ConventionSum.prj(this1),is_async,is_sync);
};
stx_arw_Convention.prj = function(this1) {
	return this1;
};
stx_arw_Convention.get_self = function(this1) {
	return stx_arw_Convention.lift(this1);
};
var stx_arw_ConvertLift = function() { };
stx_arw_ConvertLift.__name__ = "stx.arw.ConvertLift";
stx_arw_ConvertLift.then = function(self,that) {
	return stx_arw_Convert.lift(stx_arw_Arrowlet.Then(self,that));
};
stx_arw_ConvertLift.provide = function(self,i) {
	return stx_arw_Provide.lift(stx_arw_Arrowlet._.fulfill(self,i));
};
stx_arw_ConvertLift.convert = function(self,that) {
	return stx_arw_Convert.lift(stx_arw_Arrowlet.Then(self,that));
};
stx_arw_ConvertLift.first = function(self) {
	return stx_arw_Convert.lift(stx_arw_Arrowlet._.first(stx_arw_Convert.toArrowlet(self)));
};
stx_arw_ConvertLift.guess = function(self) {
	return stx_arw_Provide.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		return stx_arw_Arrowlet._.prepare(stx_arw_Convert.toArrowlet(self),null,cont);
	}));
};
stx_arw_ConvertLift.prepare = function(self,ipt,cont) {
	return stx_arw_Arrowlet._.prepare(stx_arw_Convert.toArrowlet(self),ipt,cont);
};
var stx_arw_Convert = {};
stx_arw_Convert.__properties__ = {get_self:"get_self"};
stx_arw_Convert._new = function(self) {
	return self;
};
stx_arw_Convert.lift = function(self) {
	return stx_arw_Convert._new(self);
};
stx_arw_Convert.unit = function() {
	return stx_arw_Convert.lift(stx_arw_Arrowlet.Sync(function(i) {
		return i;
	}));
};
stx_arw_Convert.fromFun1Provide = function(self) {
	return stx_arw_Convert.fromConvertProvide(stx_arw_Convert.fromFun1R(self));
};
stx_arw_Convert.fromConvertProvide = function(self) {
	return stx_arw_Convert.lift(new stx_arw_convert_term_ConvertProvide(self));
};
stx_arw_Convert.toArrowlet = function(this1) {
	return this1;
};
stx_arw_Convert.get_self = function(this1) {
	return stx_arw_Convert.lift(this1);
};
stx_arw_Convert.toCascade = function(this1) {
	return stx_arw_Cascade.lift(new stx_arw_cascade_term_ConvertCascade(this1));
};
stx_arw_Convert.fromFun1R = function(fn) {
	return stx_arw_Convert.lift(new stx_arw_convert_term_Fun1R(fn));
};
stx_arw_Convert.fromArrowlet = function(arw) {
	return stx_arw_Convert.lift(arw);
};
stx_arw_Convert.environment = function(this1,i,success) {
	return stx_arw_Arrowlet._.environment(this1,i,success,function(e) {
		stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,e);
	});
};
var stx_arw_DiffuseLift = function() { };
stx_arw_DiffuseLift.__name__ = "stx.arw.DiffuseLift";
stx_arw_DiffuseLift.lift = function(self) {
	return stx_arw_Diffuse.lift(self);
};
var stx_arw_Diffuse = {};
stx_arw_Diffuse.__properties__ = {get_self:"get_self"};
stx_arw_Diffuse._new = function(self) {
	return self;
};
stx_arw_Diffuse.lift = function(self) {
	return stx_arw_Diffuse._new(self);
};
stx_arw_Diffuse.fromFunIOptionR = function(fn) {
	return stx_arw_Diffuse.lift(stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_ext_ChunkLift.fold(ipt,function(o) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_pico_OptionLift.fold(fn(o),function(o) {
				return stx_ext_ChunkSum.Val(o);
			},function() {
				return stx_ext_ChunkSum.Tap;
			}),{ fileName : "src/main/haxe/stx/arw/Diffuse.hx", lineNumber : 17, className : "stx.arw._Diffuse.Diffuse_Impl_", methodName : "fromFunIOptionR"}));
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.End(e),{ fileName : "src/main/haxe/stx/arw/Diffuse.hx", lineNumber : 21, className : "stx.arw._Diffuse.Diffuse_Impl_", methodName : "fromFunIOptionR"}));
		},function() {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.Tap,{ fileName : "src/main/haxe/stx/arw/Diffuse.hx", lineNumber : 22, className : "stx.arw._Diffuse.Diffuse_Impl_", methodName : "fromFunIOptionR"}));
		});
	}));
};
stx_arw_Diffuse.fromOptionIR = function(fn) {
	return stx_arw_Diffuse.lift(stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_ext_ChunkLift.fold(ipt,function(i) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.Val(fn(haxe_ds_Option.Some(i))),{ fileName : "src/main/haxe/stx/arw/Diffuse.hx", lineNumber : 33, className : "stx.arw._Diffuse.Diffuse_Impl_", methodName : "fromOptionIR"}));
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.End(e),{ fileName : "src/main/haxe/stx/arw/Diffuse.hx", lineNumber : 34, className : "stx.arw._Diffuse.Diffuse_Impl_", methodName : "fromOptionIR"}));
		},function() {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.Val(fn(haxe_ds_Option.None)),{ fileName : "src/main/haxe/stx/arw/Diffuse.hx", lineNumber : 35, className : "stx.arw._Diffuse.Diffuse_Impl_", methodName : "fromOptionIR"}));
		});
	}));
};
stx_arw_Diffuse.prj = function(this1) {
	return this1;
};
stx_arw_Diffuse.get_self = function(this1) {
	return stx_arw_Diffuse.lift(this1);
};
stx_arw_Diffuse.toArrowlet = function(this1) {
	return stx_arw_Arrowlet.lift(this1);
};
var stx_arw_Execute = {};
stx_arw_Execute.__properties__ = {get_self:"get_self"};
stx_arw_Execute._new = function(self) {
	return self;
};
stx_arw_Execute.lift = function(self) {
	return stx_arw_Execute._new(self);
};
stx_arw_Execute.pure = function(e) {
	return stx_arw_Execute.lift(stx_arw_Arrowlet.pure(stx_nano_Report.pure(e)));
};
stx_arw_Execute.unit = function() {
	return stx_arw_Execute.lift(stx_arw_Arrowlet.pure(stx_nano_Report.unit()));
};
stx_arw_Execute.bind_fold = function(fn,arr) {
	return stx_lift_ArrayLift.lfold(arr,function(next,memo) {
		return stx_arw_Execute.lift(stx_arw_Provide._.flat_map(stx_arw_Execute.toProvide(memo),function(report) {
			return stx_arw_Execute.lift(fn(next,report));
		}));
	},stx_arw_Execute.unit());
};
stx_arw_Execute.sequence = function(fn,arr) {
	return stx_lift_ArrayLift.lfold(arr,function(next,memo) {
		return stx_arw_Execute.lift(stx_arw_ExecuteLift.fold_mod(memo,function(report) {
			return stx_pico_OptionLift.fold(report,function(e) {
				return stx_arw_Execute.pure(e);
			},function() {
				return fn(next);
			});
		}));
	},stx_arw_Execute.unit());
};
stx_arw_Execute.toProvide = function(this1) {
	return this1;
};
stx_arw_Execute.toArrowlet = function(this1) {
	return this1;
};
stx_arw_Execute.fromFunXR = function(fn) {
	return stx_arw_Execute.lift(stx_arw_Arrowlet.fromFunXR(fn));
};
stx_arw_Execute.fromFunXExecute = function(fn) {
	return fn();
};
stx_arw_Execute.prj = function(this1) {
	return this1;
};
stx_arw_Execute.get_self = function(this1) {
	return stx_arw_Execute.lift(this1);
};
stx_arw_Execute.fromOption = function(err) {
	return stx_arw_Execute.fromFunXR(function() {
		return stx_nano_Report._new(err);
	});
};
stx_arw_Execute.fromErr = function(err) {
	return stx_arw_Execute.fromFunXR(function() {
		return stx_nano_Report.pure(err);
	});
};
stx_arw_Execute.environment = function(this1,success,failure) {
	return stx_arw_Arrowlet._.environment(this1,null,function(report) {
		stx_pico_OptionLift.fold(report,failure,success);
	},function(e) {
		stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,e);
	});
};
var stx_arw_ExecuteLift = function() { };
stx_arw_ExecuteLift.__name__ = "stx.arw.ExecuteLift";
stx_arw_ExecuteLift.errata = function(self,fn) {
	return stx_arw_Execute.lift(stx_arw_arrowlet_Lift.then(stx_arw_Execute.toArrowlet(self),stx_arw_Arrowlet.Sync(function(report) {
		return stx_nano_Report.errata(report,fn);
	})));
};
stx_arw_ExecuteLift.errate = function(self,fn) {
	return stx_arw_Execute.lift(stx_arw_arrowlet_Lift.then(stx_arw_Execute.toArrowlet(self),stx_arw_Arrowlet.Sync(function(report) {
		return stx_nano_Report.errata(report,function(e) {
			return e.map(fn);
		});
	})));
};
stx_arw_ExecuteLift.prepare = function(self,term) {
	return stx_arw_arrowlet_Lift.prepare(stx_arw_Execute.toArrowlet(self),null,term);
};
stx_arw_ExecuteLift.deliver = function(self,fn) {
	return stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Sync(function(report) {
		fn(report);
		return null;
	}));
};
stx_arw_ExecuteLift.crack = function(self) {
	return stx_arw_ExecuteLift.deliver(self,function(report) {
		stx_pico_OptionLift.fold(report,function(e) {
			stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,e);
		},function() {
		});
	});
};
stx_arw_ExecuteLift.then = function(self,that) {
	return stx_arw_Provide.lift(stx_arw_Arrowlet.Then(self,that));
};
stx_arw_ExecuteLift.execute = function(self,next) {
	return stx_arw_Execute.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_pico_OptionLift.fold(ipt,function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_Report.pure(e),{ fileName : "src/main/haxe/stx/arw/Execute.hx", lineNumber : 114, className : "stx.arw.ExecuteLift", methodName : "execute"}));
		},function() {
			return stx_arw_ExecuteLift.prepare(next,cont);
		});
	})));
};
stx_arw_ExecuteLift.produce = function(self,next) {
	return stx_arw_Produce.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_pico_OptionLift.fold(ipt,function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Execute.hx", lineNumber : 126, className : "stx.arw.ExecuteLift", methodName : "produce"}));
		},function() {
			return stx_arw_Produce.prepare(next,cont);
		});
	})));
};
stx_arw_ExecuteLift.propose = function(self,next) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_pico_OptionLift.fold(ipt,function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.End(e),{ fileName : "src/main/haxe/stx/arw/Execute.hx", lineNumber : 139, className : "stx.arw.ExecuteLift", methodName : "propose"}));
		},function() {
			return stx_arw_ProposeLift.prepare(next,cont);
		});
	})));
};
stx_arw_ExecuteLift.fold_mod = function(self,fn) {
	return stx_arw_Execute.lift(stx_arw_Arrowlet.FlatMap(stx_arw_Execute.toArrowlet(self),function(report) {
		return stx_arw_Execute.toArrowlet(fn(report));
	}));
};
stx_arw_ExecuteLift.and = function(self,that) {
	return stx_arw_ExecuteLift.execute(self,that);
};
var stx_arw_Internal = {};
stx_arw_Internal.lift = function(def) {
	return stx_arw_Internal._new(def);
};
stx_arw_Internal.toWork = function(this1) {
	return this1.toWork({ fileName : "src/main/haxe/stx/arw/Internal.hx", lineNumber : 14, className : "stx.arw._Internal.Internal_Impl_", methodName : "toWork"});
};
stx_arw_Internal.toArrowlet = function(this1) {
	return this1;
};
stx_arw_Internal._new = function(self) {
	return self;
};
stx_arw_Internal.get_defect = function(this1) {
	return this1.get_defect();
};
var stx_arw_Log = function() { };
stx_arw_Log.__name__ = "stx.arw.Log";
stx_arw_Log.log = function(wildcard) {
	return stx_Log.tag(stx_Log._new(),"stx.arw");
};
var stx_arw_Perform = {};
stx_arw_Perform.__properties__ = {get_self:"get_self"};
stx_arw_Perform._new = function(self) {
	return self;
};
stx_arw_Perform.lift = function(self) {
	return stx_arw_Perform._new(self);
};
stx_arw_Perform.toArrowlet = function(this1) {
	return this1;
};
stx_arw_Perform.toCascade = function(this1) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		return stx_arw_arrowlet_Lift.prepare(stx_arw_Arrowlet._.postfix(this1,function(_) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,_);
		}),null,cont);
	}));
};
stx_arw_Perform.prj = function(this1) {
	return this1;
};
stx_arw_Perform.get_self = function(this1) {
	return stx_arw_Perform.lift(this1);
};
var stx_arw_ProduceLift = function() { };
stx_arw_ProduceLift.__name__ = "stx.arw.ProduceLift";
stx_arw_ProduceLift.lift = function(self) {
	return stx_arw_Produce.lift(self);
};
stx_arw_ProduceLift.postfix = function(self,fn) {
	return stx_arw_ProduceLift.lift(stx_arw_arrowlet_Lift.then(self,stx_arw_Arrowlet.fromFun1R(function(oc) {
		return stx_nano_ResLift.map(oc,fn);
	})));
};
stx_arw_ProduceLift.errata = function(self,fn) {
	return stx_arw_ProduceLift.lift(stx_arw_arrowlet_Lift.then(self,stx_arw_Arrowlet.fromFun1R(function(oc) {
		return stx_nano_ResLift.errata(oc,fn);
	})));
};
stx_arw_ProduceLift.errate = function(self,fn) {
	return stx_arw_ProduceLift.errata(self,function(er) {
		return er.map(fn);
	});
};
stx_arw_ProduceLift.point = function(self,success) {
	return stx_arw_Execute.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		var defer = tink_core_Future.trigger();
		var inner = cont.inner(function(outcome) {
			defer.trigger(stx_pico_OutcomeLift.fold(outcome,function(s) {
				return stx_nano_ResLift.fold(s,function(o) {
					return stx_arw_ExecuteLift.prepare(success(o),cont);
				},function(e) {
					return stx_async_terminal_Receiver.serve(cont.value(stx_nano_Report.pure(e),{ fileName : "src/main/haxe/stx/arw/Produce.hx", lineNumber : 138, className : "stx.arw.ProduceLift", methodName : "point"}));
				});
			},function(_) {
				return stx_async_terminal_Receiver.serve(cont.error([null],{ fileName : "src/main/haxe/stx/arw/Produce.hx", lineNumber : 140, className : "stx.arw.ProduceLift", methodName : "point"}));
			}));
		},{ fileName : "src/main/haxe/stx/arw/Produce.hx", lineNumber : 132, className : "stx.arw.ProduceLift", methodName : "point"});
		return stx_async_WorkLift.seq(stx_arw_Produce.prepare(self,inner),stx_async_Work.fromFutureWork(defer));
	}));
};
stx_arw_ProduceLift.crack = function(self) {
	return stx_arw_Provide.lift(stx_arw_Arrowlet._.postfix(self,function(res) {
		return stx_nano_ResLift.fold(res,function(ok) {
			return ok;
		},function(e) {
			throw haxe_Exception.thrown(e);
		});
	}));
};
stx_arw_ProduceLift.convert = function(self,then) {
	return stx_arw_ProduceLift.lift(stx_arw_Arrowlet.Then(self,stx_arw_Convert.toCascade(then)));
};
stx_arw_ProduceLift.prepare = function(self,cont) {
	return stx_arw_arrowlet_Lift.prepare(stx_arw_Produce.toArrowlet(self),null,cont);
};
stx_arw_ProduceLift.control = function(self,rec) {
	return stx_arw_Provide.lift(stx_arw_arrowlet_Lift.then(self,stx_arw_Rectify.toArrowlet(stx_arw_Recover.toRectify(rec))));
};
stx_arw_ProduceLift.attempt = function(self,that) {
	return stx_arw_ProduceLift.lift(stx_arw_arrowlet_Lift.then(self,stx_arw_Cascade.toArrowlet(stx_arw_Attempt.toCascade(that))));
};
stx_arw_ProduceLift.deliver = function(self,fn) {
	return stx_arw_Execute.lift(stx_arw_arrowlet_Lift.then(self,stx_arw_Arrowlet.Sync(function(res) {
		return stx_nano_ResLift.fold(res,function(s) {
			fn(s);
			return stx_nano_Report.unit();
		},function(e) {
			return stx_nano_Report.pure(e);
		});
	})));
};
stx_arw_ProduceLift.reclaim = function(self,next) {
	return stx_arw_ProduceLift.attempt(stx_arw_ProduceLift.lift(stx_arw_arrowlet_Lift.then(self,stx_arw_Cascade.toArrowlet(stx_arw_Convert.toCascade(next)))),stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(prd,cont) {
		return stx_arw_Produce.prepare(prd,cont);
	})));
};
stx_arw_ProduceLift.arrange = function(self,next) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		var bound = tink_core_Future.trigger();
		var inner = cont.inner(function(outcome) {
			var input = stx_pico_OutcomeLift.fold(outcome,function(res) {
				return stx_arw_arrowlet_Lift.prepare(stx_arw_Arrange.toCascade(next),stx_nano_ResLift.map(res,function(lhs) {
					return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,i);
				}),cont);
			},function(_) {
				return stx_async_terminal_Receiver.serve(cont.error([null],{ fileName : "src/main/haxe/stx/arw/Produce.hx", lineNumber : 204, className : "stx.arw.ProduceLift", methodName : "arrange"}));
			});
			bound.trigger(input);
		},{ fileName : "src/main/haxe/stx/arw/Produce.hx", lineNumber : 200, className : "stx.arw.ProduceLift", methodName : "arrange"});
		return stx_async_WorkLift.seq(stx_arw_Produce.prepare(self,inner),stx_async_Work.fromFutureWork(bound));
	}));
};
stx_arw_ProduceLift.rearrange = function(self,next) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		var bound = tink_core_Future.trigger();
		var inner = cont.inner(function(outcome) {
			var value = stx_pico_OutcomeLift.fold(outcome,function(res) {
				return stx_arw_Arrange.prepare(next,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,res,i),cont);
			},function(_) {
				return stx_async_terminal_Receiver.serve(cont.error([null],{ fileName : "src/main/haxe/stx/arw/Produce.hx", lineNumber : 223, className : "stx.arw.ProduceLift", methodName : "rearrange"}));
			});
			bound.trigger(value);
		},{ fileName : "src/main/haxe/stx/arw/Produce.hx", lineNumber : 219, className : "stx.arw.ProduceLift", methodName : "rearrange"});
		return stx_async_WorkLift.seq(stx_arw_Produce.prepare(self,inner),stx_async_Work.fromFutureWork(bound));
	}));
};
stx_arw_ProduceLift.cascade = function(self,that) {
	return stx_arw_ProduceLift.lift(stx_arw_arrowlet_Lift.then(self,stx_arw_Cascade.toArrowlet(that)));
};
stx_arw_ProduceLift.fudge = function(self) {
	return stx_nano_ResLift.fudge(stx_arw_Arrowlet._.fudge(self,null));
};
stx_arw_ProduceLift.flat_map = function(self,that) {
	return stx_arw_ProduceLift.lift(stx_arw_Arrowlet.FlatMap(self,function(res) {
		return stx_arw_Produce.toArrowlet(stx_nano_ResLift.fold(res,function(o) {
			return that(o);
		},function(e) {
			return stx_arw_Produce.fromRes(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
		}));
	}));
};
stx_arw_ProduceLift.then = function(self,that) {
	return stx_arw_Provide.lift(stx_arw_Arrowlet.Then(self,that));
};
stx_arw_ProduceLift.contextualize = function(self,success,failure) {
	return stx_arw_Contextualize.load(stx_arw_Contextualize.make(null,success,failure),stx_arw_Produce.toArrowlet(self).asArrowletDef());
};
var stx_arw_Produce = {};
stx_arw_Produce.__properties__ = {get_self:"get_self"};
stx_arw_Produce._new = function(self) {
	return self;
};
stx_arw_Produce.lift = function(self) {
	return stx_arw_Produce._new(self);
};
stx_arw_Produce.Sync = function(result) {
	return new stx_arw_produce_term_Sync(result);
};
stx_arw_Produce.Thunk = function(result) {
	return new stx_arw_produce_term_Thunk(result);
};
stx_arw_Produce.fromFunXProduce = function(self) {
	return stx_arw_Produce.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		return stx_arw_Produce.prepare(self(),cont);
	}));
};
stx_arw_Produce.fromErr = function(e) {
	return stx_arw_Produce.Sync(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
};
stx_arw_Produce.pure = function(v) {
	return stx_arw_Produce.Sync(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v));
};
stx_arw_Produce.fromRes = function(res) {
	return stx_arw_Produce.Sync(res);
};
stx_arw_Produce.fromFunXRes = function(fn) {
	return stx_arw_Produce.Thunk(fn);
};
stx_arw_Produce.fromPledge = function(pl) {
	return stx_arw_Produce.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		return stx_async_terminal_Receiver.serve(cont.later(tink_core_Future.map(pl,stx_pico_OutcomeSum.Success),{ fileName : "src/main/haxe/stx/arw/Produce.hx", lineNumber : 42, className : "stx.arw._Produce.Produce_Impl_", methodName : "fromPledge"}));
	}));
};
stx_arw_Produce.fromFunXR = function(fn) {
	return stx_arw_Produce.lift(stx_arw_Arrowlet.fromFun1R(function(_) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
	}));
};
stx_arw_Produce.fromArrowlet = function(arw) {
	return stx_arw_Produce.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		return stx_arw_arrowlet_Lift.prepare(arw,null,cont.joint(function(outcome) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_pico_OutcomeLift.fold(outcome,function(t) {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
			},function(e) {
				return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Err.grow(e,{ fileName : "src/main/haxe/stx/arw/Produce.hx", lineNumber : 65, className : "stx.arw._Produce.Produce_Impl_", methodName : "fromArrowlet"}));
			}),{ fileName : "src/main/haxe/stx/arw/Produce.hx", lineNumber : 62, className : "stx.arw._Produce.Produce_Impl_", methodName : "fromArrowlet"}));
		},{ fileName : "src/main/haxe/stx/arw/Produce.hx", lineNumber : 60, className : "stx.arw._Produce.Produce_Impl_", methodName : "fromArrowlet"}));
	}));
};
stx_arw_Produce.fromProvide = function(self) {
	return stx_arw_Produce.lift(stx_arw_Arrowlet.Anon(function(_,cont) {
		return stx_arw_ProvideLift.prepare(self,cont);
	}));
};
stx_arw_Produce.environment = function(this1,success,failure) {
	return stx_arw_Arrowlet._.environment(this1,null,function(res) {
		stx_nano_ResLift.fold(res,success,failure);
	},function(e) {
		stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,e);
	});
};
stx_arw_Produce.toArrowlet = function(this1) {
	return this1;
};
stx_arw_Produce.toPropose = function(this1) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet._.then(this1,stx_arw_Arrowlet.fromFun1R(function(res) {
		return stx_nano_ResLift.fold(res,stx_ext_ChunkSum.Val,stx_ext_ChunkSum.End);
	})));
};
stx_arw_Produce.get_self = function(this1) {
	return this1;
};
stx_arw_Produce.prepare = function(this1,cont) {
	return stx_arw_Arrowlet._.prepare(this1,null,cont);
};
stx_arw_Produce.fudge = function(this1) {
	return stx_arw_Produce._.fudge(this1);
};
stx_arw_Produce.flat_map = function(this1,fn) {
	return stx_arw_Produce._.flat_map(this1,fn);
};
var stx_arw_ProposeLift = function() { };
stx_arw_ProposeLift.__name__ = "stx.arw.ProposeLift";
stx_arw_ProposeLift.flat_map = function(self,fn) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.FlatMap(stx_arw_Propose.toArrowlet(self),function(chunk) {
		return stx_ext_ChunkLift.fold(chunk,function(o) {
			return fn(o);
		},function(e) {
			return stx_arw_Propose.fromChunk(stx_ext_ChunkSum.End(e));
		},function() {
			return stx_arw_Propose.fromChunk(stx_ext_ChunkSum.Tap);
		});
	}));
};
stx_arw_ProposeLift.convert = function(self,next) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_ext_ChunkLift.fold(ipt,function(o) {
			return stx_arw_ConvertLift.prepare(stx_arw_ConvertLift.then(next,stx_arw_Convert.fromFun1R(stx_ext_ChunkSum.Val)),o,cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.End(e),{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 81, className : "stx.arw.ProposeLift", methodName : "convert"}));
		},function() {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.Tap,{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 82, className : "stx.arw.ProposeLift", methodName : "convert"}));
		});
	})));
};
stx_arw_ProposeLift.attempt = function(self,next) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_ext_ChunkLift.fold(ipt,function(o) {
			return stx_arw_arrowlet_Lift.prepare(stx_arw_arrowlet_Lift.postfix(stx_arw_Attempt.toArrowlet(next),function(res) {
				return stx_ext_lift_LiftResToChunk.toChunk(res);
			}),o,cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.End(e),{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 93, className : "stx.arw.ProposeLift", methodName : "attempt"}));
		},function() {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.Tap,{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 94, className : "stx.arw.ProposeLift", methodName : "attempt"}));
		});
	})));
};
stx_arw_ProposeLift.diffuse = function(self,next) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.Then(self,stx_arw_Diffuse.toArrowlet(next)));
};
stx_arw_ProposeLift.or = function(self,or) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_ext_ChunkLift.fold(ipt,function(o) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.Val(o),{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 114, className : "stx.arw.ProposeLift", methodName : "or"}));
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.End(e),{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 115, className : "stx.arw.ProposeLift", methodName : "or"}));
		},function() {
			return stx_arw_ProposeLift.prepare(or(),cont);
		});
	})));
};
stx_arw_ProposeLift.prepare = function(self,cont) {
	return stx_arw_Arrowlet._.prepare(stx_arw_Arrowlet.lift(self),null,cont);
};
stx_arw_ProposeLift.toProduce = function(self) {
	var val = function(o) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.Some(o));
	};
	var ers = function(e) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
	};
	var tap = function() {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.None);
	};
	var tmp = function(chk) {
		return stx_ext_Chunk._.fold(chk,val,ers,tap);
	};
	return stx_arw_Produce.lift(stx_arw_arrowlet_Lift.then(stx_arw_Propose.toArrowlet(self),stx_arw_Arrowlet.fromFun1R(tmp)));
};
stx_arw_ProposeLift.materialise = function(self) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.Then(stx_arw_Propose.toArrowlet(self),stx_arw_Arrowlet.Sync(function(ipt) {
		return stx_ext_ChunkLift.fold(ipt,function(o) {
			return stx_ext_ChunkSum.Val(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,o));
		},function(e) {
			return stx_ext_ChunkSum.End(e);
		},function() {
			return stx_ext_ChunkSum.Val(haxe_ds_Option.None);
		});
	})));
};
stx_arw_ProposeLift.and = function(self,that) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_ext_ChunkLift.fold(ipt,function(o) {
			var _g = function(tI,tII) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
			};
			var tI = o;
			var tmp = function(tII) {
				return _g(tI,tII);
			};
			return stx_arw_ProposeLift.prepare(stx_arw_ProposeLift.convert(that,stx_arw_Convert.fromFun1R(tmp)),cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.End(e),{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 162, className : "stx.arw.ProposeLift", methodName : "and"}));
		},function() {
			return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.Tap,{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 163, className : "stx.arw.ProposeLift", methodName : "and"}));
		});
	})));
};
stx_arw_ProposeLift.command = function(self,that) {
	return stx_arw_Execute.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_ext_ChunkLift.fold(ipt,function(o) {
			return stx_arw_Command.prepare(that,o,cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_Report.pure(e),{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 176, className : "stx.arw.ProposeLift", methodName : "command"}));
		},function() {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_Report.unit(),{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 177, className : "stx.arw.ProposeLift", methodName : "command"}));
		});
	})));
};
stx_arw_ProposeLift.before = function(self,fn) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.Then(stx_arw_Arrowlet.Sync(stx_nano_lift_LiftNano.passthrough(stx_nano_Wildcard.__,function(_) {
		fn();
	})),self));
};
stx_arw_ProposeLift.after = function(self,fn) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Sync(stx_nano_lift_LiftNano.passthrough(stx_nano_Wildcard.__,fn))));
};
stx_arw_ProposeLift.environment = function(self,success,failure) {
	return stx_arw_Arrowlet._.environment(stx_arw_Propose.toArrowlet(self),null,function(chunk) {
		stx_ext_ChunkLift.fold(chunk,function(o) {
			success(haxe_ds_Option.Some(o));
		},function(e) {
			failure(e);
		},function() {
			success(haxe_ds_Option.None);
		});
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
stx_arw_ProposeLift.postfix = function(self,then) {
	var val = stx_fn_UnaryLift.then(stx_LiftUnary.fn(then),stx_ext_ChunkSum.Val);
	var ers = stx_ext_ChunkSum.End;
	var tap = function() {
		return stx_ext_ChunkSum.Tap;
	};
	return stx_arw_Propose.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Sync(function(chk) {
		return stx_ext_Chunk._.fold(chk,val,ers,tap);
	})));
};
var stx_arw_Propose = {};
stx_arw_Propose.__properties__ = {get_self:"get_self"};
stx_arw_Propose._new = function(self) {
	return self;
};
stx_arw_Propose.lift = function(self) {
	return stx_arw_Propose._new(self);
};
stx_arw_Propose.fromChunk = function(chunk) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.pure(chunk));
};
stx_arw_Propose.fromOption = function(self) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.pure(stx_pico_OptionLift.fold(self,function(o) {
		return stx_ext_ChunkSum.Val(o);
	},function() {
		return stx_ext_ChunkSum.Tap;
	})));
};
stx_arw_Propose.make = function(o) {
	return stx_arw_Propose.fromChunk(stx_Ext.chunk(stx_nano_Wildcard.__,o));
};
stx_arw_Propose.pure = function(o) {
	return stx_arw_Propose.fromChunk(stx_ext_ChunkSum.Val(o));
};
stx_arw_Propose.fromErr = function(e) {
	return stx_arw_Propose.fromChunk(stx_ext_ChunkSum.End(e));
};
stx_arw_Propose.unit = function() {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.pure(stx_ext_ChunkSum.Tap));
};
stx_arw_Propose.fromChunkThunk = function(thunk) {
	return stx_arw_Propose.lift(stx_arw_Arrowlet.Sync(function(_) {
		return thunk();
	}));
};
stx_arw_Propose.toArrowlet = function(this1) {
	return this1;
};
stx_arw_Propose.elide = function(this1) {
	return this1;
};
stx_arw_Propose.get_self = function(this1) {
	return stx_arw_Propose.lift(this1);
};
stx_arw_Propose.bind_fold = function(fn,iterable,seed) {
	return stx_pico_Option.fromNullT(stx_nano_IterLift.foldl(stx_ext_lift_LiftIterableToIter.toIter(iterable),function(next,memo) {
		return stx_arw_Propose.lift(stx_arw_arrowlet_Lift.then(stx_arw_Propose.toArrowlet(memo),stx_arw_Arrowlet.Anon(function(res,cont) {
			return stx_ext_ChunkLift.fold(res,function(o) {
				return stx_arw_ProposeLift.prepare(fn(next,o),cont);
			},function(e) {
				return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.End(e),{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 51, className : "stx.arw._Propose.Propose_Impl_", methodName : "bind_fold"}));
			},function() {
				return stx_async_terminal_Receiver.serve(cont.value(stx_ext_ChunkSum.Tap,{ fileName : "src/main/haxe/stx/arw/Propose.hx", lineNumber : 52, className : "stx.arw._Propose.Propose_Impl_", methodName : "bind_fold"}));
			});
		})));
	},stx_arw_Propose.pure(seed)));
};
stx_arw_Propose.flat_map = function(this1,fn) {
	return stx_arw_Propose._.flat_map(stx_arw_Propose.get_self(this1),fn);
};
var stx_arw_ProvideLift = function() { };
stx_arw_ProvideLift.__name__ = "stx.arw.ProvideLift";
stx_arw_ProvideLift.environment = function(self,handler) {
	return stx_arw_Arrowlet._.environment(self,null,function(o) {
		handler(o);
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
stx_arw_ProvideLift.flat_map = function(self,fn) {
	return stx_arw_Provide.lift(stx_arw_Arrowlet.FlatMap(stx_arw_Provide.toArrowlet(self),fn));
};
stx_arw_ProvideLift.and = function(lhs,rhs) {
	return stx_arw_Provide.lift(stx_arw_Arrowlet._.pinch(stx_arw_Arrowlet._.both(lhs,rhs)));
};
stx_arw_ProvideLift.convert = function(self,that) {
	return stx_arw_Provide.lift(stx_arw_Convert._.then(self,that));
};
stx_arw_ProvideLift.prepare = function(self,cont) {
	return stx_arw_Arrowlet._.prepare(self,null,cont);
};
stx_arw_ProvideLift.toProduce = function(self) {
	return stx_arw_Produce.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Sync(function(t) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
	})));
};
stx_arw_ProvideLift.attempt = function(self,that) {
	return stx_arw_ProduceLift.attempt(stx_arw_ProvideLift.toProduce(self),that);
};
stx_arw_ProvideLift.postfix = function(self,fn) {
	return stx_arw_Provide.lift(stx_arw_Arrowlet.Then(self,stx_arw_Arrowlet.Sync(fn)));
};
stx_arw_ProvideLift.fudge = function(self) {
	return stx_arw_Arrowlet._.fudge(self,null);
};
stx_arw_ProvideLift.contextualize = function(self,success,failure) {
	return stx_arw_Contextualize.load(stx_arw_Contextualize.make(null,success,failure),stx_arw_Provide.toArrowlet(self).asArrowletDef());
};
var stx_arw_Provide = {};
stx_arw_Provide.__properties__ = {get_self:"get_self"};
stx_arw_Provide._new = function(self) {
	return self;
};
stx_arw_Provide.lift = function(self) {
	return stx_arw_Provide._new(self);
};
stx_arw_Provide.pure = function(v) {
	return stx_arw_Provide.lift(new stx_arw_provide_term_Sync(v));
};
stx_arw_Provide.fromFuture = function(future) {
	return stx_arw_Provide.lift(new stx_arw_provide_term_Later(future));
};
stx_arw_Provide.fromFunXR = function(fn) {
	return stx_arw_Provide.lift(new stx_arw_provide_term_Thunk(fn));
};
stx_arw_Provide.fromFunXFuture = function(fn) {
	return stx_arw_Provide.lift(new stx_arw_provide_term_FunXFutureProvide(fn));
};
stx_arw_Provide.fromFunTerminalWork = function(fn) {
	return stx_arw_Provide.lift(new stx_arw_provide_term_ProvideFunTerminalWork(fn));
};
stx_arw_Provide.fromFunFuture = function(ft) {
	return stx_arw_Provide.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_async_terminal_Receiver.serve(cont.later(tink_core_Future.map(ft,stx_pico_OutcomeSum.Success),{ fileName : "src/main/haxe/stx/arw/Provide.hx", lineNumber : 37, className : "stx.arw._Provide.Provide_Impl_", methodName : "fromFunFuture"}));
	}));
};
stx_arw_Provide.bind_fold = function(fn,arr,seed) {
	return stx_lift_ArrayLift.lfold(arr,function(next,memo) {
		return stx_arw_ProvideLift.convert(memo,stx_arw_Convert.fromConvertProvide(stx_arw_Convert.fromFun1R(function(o) {
			return stx_arw_ConvertLift.provide(fn,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,next,o));
		})));
	},stx_arw_Provide.pure(seed));
};
stx_arw_Provide.toArrowlet = function(this1) {
	return this1;
};
stx_arw_Provide.prj = function(this1) {
	return this1;
};
stx_arw_Provide.get_self = function(this1) {
	return stx_arw_Provide.lift(this1);
};
stx_arw_Provide.fudge = function(this1) {
	return stx_arw_Provide._.fudge(this1);
};
var stx_arw_Recover = {};
stx_arw_Recover._new = function(self) {
	return self;
};
stx_arw_Recover.lift = function(self) {
	return stx_arw_Recover._new(self);
};
stx_arw_Recover.fromFunErrR = function(fn) {
	return stx_arw_Recover.lift(stx_arw_Arrowlet.Sync(fn));
};
stx_arw_Recover.toCascade = function(this1) {
	return new stx_arw_RecoverCascade(this1);
};
stx_arw_Recover.toRectify = function(this1) {
	return new stx_arw_RecoverRectify(this1);
};
stx_arw_Recover.prj = function(this1) {
	return this1;
};
stx_arw_Recover.toArrowlet = function(this1) {
	return stx_arw_Arrowlet.lift(this1);
};
var stx_arw_RecoverRectify = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_RecoverRectify.__name__ = "stx.arw.RecoverRectify";
stx_arw_RecoverRectify.__super__ = stx_arw_ArrowletCls;
stx_arw_RecoverRectify.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,defer: function(p,cont) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			return stx_async_terminal_Receiver.serve(cont.value(ok,{ fileName : "src/main/haxe/stx/arw/Recover.hx", lineNumber : 31, className : "stx.arw.RecoverRectify", methodName : "defer"}));
		},function(no) {
			return stx_arw_arrowlet_Lift.prepare(_gthis.delegate,no,cont.joint(function(outcome) {
				return stx_pico_OutcomeLift.fold(outcome,function(ok) {
					return stx_async_terminal_Receiver.serve(cont.value(ok,{ fileName : "src/main/haxe/stx/arw/Recover.hx", lineNumber : 36, className : "stx.arw.RecoverRectify", methodName : "defer"}));
				},function(no) {
					return stx_async_terminal_Receiver.serve(cont.error(no,{ fileName : "src/main/haxe/stx/arw/Recover.hx", lineNumber : 37, className : "stx.arw.RecoverRectify", methodName : "defer"}));
				});
			},{ fileName : "src/main/haxe/stx/arw/Recover.hx", lineNumber : 34, className : "stx.arw.RecoverRectify", methodName : "defer"}));
		});
	}
	,apply: function(p) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			return ok;
		},function(no) {
			return stx_arw_Arrowlet.toInternal(stx_arw_Recover.toArrowlet(_gthis.delegate)).apply(no);
		});
	}
	,__class__: stx_arw_RecoverRectify
});
var stx_arw_RecoverCascade = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_RecoverCascade.__name__ = "stx.arw.RecoverCascade";
stx_arw_RecoverCascade.__super__ = stx_arw_ArrowletCls;
stx_arw_RecoverCascade.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,defer: function(p,cont) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(i) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),{ fileName : "src/main/haxe/stx/arw/Recover.hx", lineNumber : 59, className : "stx.arw.RecoverCascade", methodName : "defer"}));
		},function(e) {
			return stx_arw_arrowlet_Lift.prepare(_gthis.delegate,e,cont.joint(function(outcome) {
				return stx_async_terminal_Receiver.serve(cont.value(stx_pico_OutcomeLift.fold(outcome,function(i) {
					return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i);
				},function(_) {
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Fault.err(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/arw/Recover.hx", lineNumber : 69, className : "stx.arw.RecoverCascade", methodName : "defer"}),"E_ResourceNotFound"));
				}),{ fileName : "src/main/haxe/stx/arw/Recover.hx", lineNumber : 66, className : "stx.arw.RecoverCascade", methodName : "defer"}));
			},{ fileName : "src/main/haxe/stx/arw/Recover.hx", lineNumber : 64, className : "stx.arw.RecoverCascade", methodName : "defer"}));
		});
	}
	,apply: function(p) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok);
		},function(no) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_arw_Arrowlet.toInternal(stx_arw_Recover.toArrowlet(_gthis.delegate)).apply(no));
		});
	}
	,__class__: stx_arw_RecoverCascade
});
var stx_arw_Rectify = {};
stx_arw_Rectify._new = function(self) {
	return self;
};
stx_arw_Rectify.lift = function(self) {
	return stx_arw_Rectify._new(self);
};
stx_arw_Rectify.toCascade = function(this1) {
	return stx_arw_Cascade.lift(stx_arw_arrowlet_Lift.postfix(stx_arw_Arrowlet.lift(this1),function(t) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
	}));
};
stx_arw_Rectify.prj = function(this1) {
	return this1;
};
stx_arw_Rectify.toArrowlet = function(this1) {
	return this1;
};
var stx_arw_ReframeLift = function() { };
stx_arw_ReframeLift.__name__ = "stx.arw.ReframeLift";
stx_arw_ReframeLift.lift = function(wml) {
	return stx_arw_Reframe._new(wml);
};
stx_arw_ReframeLift.cascade = function(self,that) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.Then(self,that));
};
stx_arw_ReframeLift.attempt = function(self,that) {
	var fn = function(chk) {
		return stx_nano_ResLift.flat_map(chk,function(tp) {
			return stx_nano_ResLift.map(stx_nano_CoupleLift.fst(tp),function(r) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,r,stx_nano_CoupleLift.snd(tp));
			});
		});
	};
	return stx_arw_ReframeLift.lift(stx_arw_Arrowlet._.postfix(stx_arw_Cascade.convert(stx_arw_Reframe.toCascade(self),stx_arw_Convert.lift(stx_arw_arrowlet_Lift.first(stx_arw_Attempt.toArrowlet(that)))),fn));
};
stx_arw_ReframeLift.rearrange = function(self,that) {
	return stx_arw_Reframe.lift(stx_arw_Arrowlet.Anon(function(ipt,cont) {
		var waits = tink_core_Future.trigger();
		var waitsII = tink_core_Future.trigger();
		var inner = cont.inner(function(outcome) {
			var innerI = cont.inner(function(outcome) {
				var val = stx_nano_ResLift.fold(ipt,function(i) {
					return stx_pico_OutcomeLift.fold(outcome,function(res) {
						return stx_pico_OutcomeSum.Success(stx_nano_ResLift.fold(res,function(oI) {
							return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,oI,i));
						},function(e) {
							return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
						}));
					},function(e) {
						return stx_pico_OutcomeSum.Failure(e);
					});
				},function(e) {
					return stx_pico_OutcomeSum.Success(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
				});
				var work = stx_async_terminal_Receiver.serve(cont.issue(val,{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 79, className : "stx.arw.ReframeLift", methodName : "rearrange"}));
				waitsII.trigger(work);
			},{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 67, className : "stx.arw.ReframeLift", methodName : "rearrange"});
			var value = stx_pico_OutcomeLift.fold(outcome,function(res) {
				return stx_nano_ResLift.fold(ipt,function(i) {
					var iptI = stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_ResLift.map(res,function(_) {
						return stx_nano_CoupleLift.fst(_);
					}),i);
					return stx_arw_Arrowlet._.prepare(stx_arw_Arrange.toArrowlet(that),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,iptI),innerI);
				},function(e) {
					return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 92, className : "stx.arw.ReframeLift", methodName : "rearrange"}));
				});
			},function(_) {
				return stx_async_terminal_Receiver.serve(cont.error([null],{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 96, className : "stx.arw.ReframeLift", methodName : "rearrange"}));
			});
			waits.trigger(value);
		},{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 64, className : "stx.arw.ReframeLift", methodName : "rearrange"});
		return stx_async_WorkLift.seq(stx_async_WorkLift.seq(stx_arw_arrowlet_Lift.prepare(self,ipt,inner),stx_async_Work.fromFutureWork(waits)),stx_async_Work.fromFutureWork(waitsII));
	}));
};
stx_arw_ReframeLift.arrange = function(self,that) {
	return stx_arw_Reframe.lift(stx_arw_Arrowlet._.postfix(stx_arw_Cascade.broach(stx_arw_ReframeLift.cascade(self,stx_arw_Arrange.toCascade(that))),function(res) {
		return stx_nano_ResLift.map(res,function(tp) {
			return stx_nano_CoupleLift.swap(tp);
		});
	}));
};
stx_arw_ReframeLift.arrangement = function(self,that) {
	return stx_arw_Attempt.lift(stx_arw_Arrowlet.Anon(function(ipt,cont) {
		var defer = tink_core_Future.trigger();
		var inner = cont.inner(function(chk) {
			switch(chk._hx_index) {
			case 0:
				var _g = chk.t;
				switch(_g._hx_index) {
				case 0:
					var tp = _g.t;
					defer.trigger(stx_arw_Arrange.prepare(that(stx_nano_CoupleLift.fst(tp)),stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(ipt),stx_nano_CoupleLift.snd(tp)),cont));
					break;
				case 1:
					defer.trigger(stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,_g.e),{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 135, className : "stx.arw.ReframeLift", methodName : "arrangement"})));
					break;
				}
				break;
			case 1:
				defer.trigger(stx_async_terminal_Receiver.serve(cont.error([null],{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 133, className : "stx.arw.ReframeLift", methodName : "arrangement"})));
				break;
			}
		},{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 126, className : "stx.arw.ReframeLift", methodName : "arrangement"});
		return stx_async_WorkLift.seq(stx_arw_arrowlet_Lift.prepare(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_CoupleLift.snd(ipt)),inner),stx_async_Work.fromFutureWork(defer));
	}));
};
stx_arw_ReframeLift.commandeer = function(self,fn) {
	return stx_arw_Command.lift(stx_arw_Arrowlet.Anon(function(ipt,cont) {
		return stx_arw_arrowlet_Lift.prepare(stx_arw_arrowlet_Lift.then(stx_arw_ReframeLift.commandment(self,fn),stx_arw_Arrowlet.Sync(function(res) {
			return stx_nano_ResLift.fold(res,function(_) {
				return stx_nano_Report.unit();
			},stx_nano_Report.pure);
		})),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ipt),cont);
	}));
};
stx_arw_ReframeLift.commandment = function(self,fn) {
	return stx_arw_ReframeLift.lift(stx_arw_Arrowlet.Anon(function(ipt,cont) {
		var defer = tink_core_Future.trigger();
		var inner = cont.inner(function(out) {
			if(out._hx_index == 0) {
				var _g = out.t;
				switch(_g._hx_index) {
				case 0:
					var tp = _g.t;
					defer.trigger(stx_arw_arrowlet_Lift.prepare(stx_arw_arrowlet_Lift.postfix(fn(stx_nano_CoupleLift.fst(tp)),function(opt) {
						return stx_pico_OptionLift.fold(opt,function(err) {
							return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,err);
						},function() {
							return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,tp);
						});
					}),stx_nano_CoupleLift.snd(tp),cont));
					break;
				case 1:
					defer.trigger(stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,_g.e),{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 171, className : "stx.arw.ReframeLift", methodName : "commandment"})));
					break;
				}
			} else {
				defer.trigger(stx_async_terminal_Receiver.serve(cont.error([null],{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 173, className : "stx.arw.ReframeLift", methodName : "commandment"})));
			}
		},{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 161, className : "stx.arw.ReframeLift", methodName : "commandment"});
		return stx_async_WorkLift.seq(stx_arw_arrowlet_Lift.prepare(self,ipt,inner),stx_async_Work.fromFutureWork(defer));
	}));
};
stx_arw_ReframeLift.evaluation = function(self) {
	return stx_arw_Cascade.lift(stx_arw_arrowlet_Lift.postfix(self,function(o) {
		return stx_nano_ResLift.map(o,function(tp) {
			return stx_nano_CoupleLift.fst(tp);
		});
	}));
};
stx_arw_ReframeLift.execution = function(self) {
	return stx_arw_Cascade.lift(stx_arw_arrowlet_Lift.postfix(self,function(o) {
		return stx_nano_ResLift.map(o,function(tp) {
			return stx_nano_CoupleLift.snd(tp);
		});
	}));
};
stx_arw_ReframeLift.errate = function(self,fn) {
	return stx_arw_ReframeLift.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_nano_ResLift.fold(i,function(i) {
			return stx_arw_arrowlet_Lift.prepare(stx_arw_arrowlet_Lift.postfix(self,function(o) {
				return stx_nano_ResLift.errata(o,function(e) {
					return e.map(fn);
				});
			}),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),cont);
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/Reframe.hx", lineNumber : 192, className : "stx.arw.ReframeLift", methodName : "errate"}));
		});
	}));
};
stx_arw_ReframeLift.environment = function(self,i,success,failure) {
	return stx_arw_Cascade._.environment(stx_arw_Reframe.toCascade(self),i,success,failure);
};
stx_arw_ReframeLift.convert = function(self,fn) {
	return stx_arw_ReframeLift.lift(stx_arw_ReframeLift.cascade(self,stx_arw_Convert.toCascade(stx_arw_ConvertLift.first(fn))));
};
var stx_arw_Reframe = {};
stx_arw_Reframe.__properties__ = {get_self:"get_self"};
stx_arw_Reframe._new = function(self) {
	return self;
};
stx_arw_Reframe.lift = function(wml) {
	return stx_arw_Reframe._new(wml);
};
stx_arw_Reframe.pure = function(o) {
	return stx_arw_Reframe.lift(stx_arw_Arrowlet._.postfix(stx_arw_Cascade.unit(),function(oc) {
		var _g = function(tI,tII) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
		};
		var tI = o;
		return stx_nano_ResLift.map(oc,function(tII) {
			return _g(tI,tII);
		});
	}));
};
stx_arw_Reframe.get_self = function(this1) {
	return this1;
};
stx_arw_Reframe.toCascade = function(this1) {
	return stx_arw_Cascade.lift(this1);
};
stx_arw_Reframe.toArrowlet = function(this1) {
	return stx_arw_Arrowlet.lift(this1);
};
stx_arw_Reframe.fromCascade = function(self) {
	return stx_arw_Reframe.lift(self);
};
var stx_arw_Resolve = {};
stx_arw_Resolve.__properties__ = {get_self:"get_self"};
stx_arw_Resolve._new = function(self) {
	return self;
};
stx_arw_Resolve.lift = function(self) {
	return stx_arw_Resolve._new(self);
};
stx_arw_Resolve.fromResolvePropose = function(arw) {
	return stx_arw_Resolve.lift(stx_arw_arrowlet_Lift.then(arw,stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_arw_Arrowlet._.prepare(stx_arw_Propose.toArrowlet(i),null,cont);
	})));
};
stx_arw_Resolve.fromFunErrPropose = function(arw) {
	return stx_arw_Resolve.lift(stx_arw_Arrowlet.ThenArw(arw,stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_arw_Arrowlet._.prepare(stx_arw_Propose.toArrowlet(i),null,cont);
	})));
};
stx_arw_Resolve.fromErrChunk = function(fn) {
	return stx_arw_Resolve.lift(stx_arw_Arrowlet.Sync(fn));
};
stx_arw_Resolve.unit = function() {
	return stx_arw_Resolve.lift(stx_arw_Arrowlet.Sync(function(e) {
		return stx_ext_ChunkSum.Tap;
	}));
};
stx_arw_Resolve.prj = function(this1) {
	return this1;
};
stx_arw_Resolve.get_self = function(this1) {
	return stx_arw_Resolve.lift(this1);
};
stx_arw_Resolve.toArrowlet = function(this1) {
	return this1;
};
var stx_arw_ResolveLift = function() { };
stx_arw_ResolveLift.__name__ = "stx.arw.ResolveLift";
stx_arw_ResolveLift.toCascade = function(self) {
	return stx_arw_Cascade.lift(stx_arw_Arrowlet.Anon(function(i,cont) {
		return stx_nano_ResLift.fold(i,function(s) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,s),{ fileName : "src/main/haxe/stx/arw/Resolve.hx", lineNumber : 48, className : "stx.arw.ResolveLift", methodName : "toCascade"}));
		},function(e) {
			return stx_arw_Arrowlet._.prepare(stx_arw_Arrowlet._.then(self,stx_arw_Arrowlet.fromFun1R(function(chk) {
				return stx_ext_ChunkLift.fold(chk,function(i) {
					return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i);
				},function(e) {
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
				},function() {
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
				});
			})),e,cont);
		});
	}));
};
var stx_arw_Test = function() {
};
stx_arw_Test.__name__ = "stx.arw.Test";
stx_arw_Test.log = function(wildcard) {
	return stx_Log.tag(stx_Log._new(),"stx.arw.test");
};
stx_arw_Test.main = function() {
	var f = stx_log_Facade.unit();
	f.includes.push("stx.async");
	f.includes.push("stx.async.Loop");
	f.includes.push("stx.async.loop.term.Thread");
	f.includes.push("stx.arw.test");
	f.includes.push("stx.arw");
	f.includes.push(stx_async_Terminal.identifier());
	var L = stx_Log._.Logic();
	f.logic = stx_log_Logic.and(stx_log_Logic.and(f.logic,L.always()),stx_log_Logic.not(L.type(stx_nano_lift_LiftNano.identifier(stx_async_task_term_ThroughBind))));
	stx_Test.test([new stx_arw_AaaTest(),new stx_arw_Aaa2Test(),new stx_arw_OptimisedTest(),new stx_arw_test_FlatMapTest(),new stx_arw_test_ProduceTest(),new stx_arw_test_TerminalTest(),new stx_arw_test_AfterRewriteTest(),new stx_arw_test_TestCascade(),new stx_arw_TestConvert(),new stx_arw_test_ThenFunTest(),new stx_arw_test_RawTest()],[stx_arw_test_TerminalTest]);
};
stx_arw_Test.prototype = {
	__class__: stx_arw_Test
};
var stx_arw_AaaTest = function() {
	utest_Test.call(this);
};
stx_arw_AaaTest.__name__ = "stx.arw.AaaTest";
stx_arw_AaaTest.__super__ = utest_Test;
stx_arw_AaaTest.prototype = $extend(utest_Test.prototype,{
	test_after_tick: function(async) {
		stx_arw_arrowlet_term_Fiber.submit(stx_arw_Arrowlet.environment(stx_arw_Arrowlet.fromFunSink(function(i,cb) {
			haxe_Timer.delay(function() {
				var tmp = i += 1;
				cb(tmp);
			},10);
		}),1,function(v) {
			utest_Assert.equals(2,v,null,{ fileName : "src/main/haxe/stx/arw/Test.hx", lineNumber : 69, className : "stx.arw.AaaTest", methodName : "test_after_tick"});
			async.done({ fileName : "src/main/haxe/stx/arw/Test.hx", lineNumber : 70, className : "stx.arw.AaaTest", methodName : "test_after_tick"});
		},function(e) {
			throw haxe_Exception.thrown(e);
		}));
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "test_after_tick", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.test_after_tick(async);
			return async;
		}});
		return init;
	}
	,__class__: stx_arw_AaaTest
});
var stx_arw_Aaa2Test = function() {
	stx_arw_AaaTest.call(this);
};
stx_arw_Aaa2Test.__name__ = "stx.arw.Aaa2Test";
stx_arw_Aaa2Test.__super__ = stx_arw_AaaTest;
stx_arw_Aaa2Test.prototype = $extend(stx_arw_AaaTest.prototype,{
	__initializeUtest__: function() {
		return stx_arw_AaaTest.prototype.__initializeUtest__.call(this);
	}
	,__class__: stx_arw_Aaa2Test
});
var stx_arw_OptimisedTest = function() {
	stx_LoggedTest.call(this);
};
stx_arw_OptimisedTest.__name__ = "stx.arw.OptimisedTest";
stx_arw_OptimisedTest.__super__ = stx_LoggedTest;
stx_arw_OptimisedTest.prototype = $extend(stx_LoggedTest.prototype,{
	test_unit_crunch: function() {
		stx_arw_arrowlet_term_Fiber.crunch(stx_arw_Arrowlet.environment(stx_arw_Arrowlet.unit(),1,function(x) {
			utest_Assert.equals(1,x,null,{ fileName : "src/main/haxe/stx/arw/Test.hx", lineNumber : 84, className : "stx.arw.OptimisedTest", methodName : "test_unit_crunch"});
		},function(e) {
			stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,e);
		}));
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = stx_LoggedTest.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "test_unit_crunch", dependencies : [], execute : function() {
			_gthis.test_unit_crunch();
			return utest_Async.getResolved();
		}});
		return init;
	}
	,__class__: stx_arw_OptimisedTest
});
var stx_arw_TestConvert = function() {
	stx_LoggedTest.call(this);
};
stx_arw_TestConvert.__name__ = "stx.arw.TestConvert";
stx_arw_TestConvert.__super__ = stx_LoggedTest;
stx_arw_TestConvert.prototype = $extend(stx_LoggedTest.prototype,{
	proc: function() {
		return stx_arw_Convert.lift(stx_arw_Arrowlet.Sync(function(x) {
			haxe_Log.trace(x,{ fileName : "src/main/haxe/stx/arw/Test.hx", lineNumber : 95, className : "stx.arw.TestConvert", methodName : "proc"});
			return x + 1;
		}));
	}
	,test_simple_case: function() {
		stx_arw_arrowlet_term_Fiber.crunch(stx_arw_Convert.environment(this.proc(),1,function(s) {
			utest_Assert.equals(2,s,null,{ fileName : "src/main/haxe/stx/arw/Test.hx", lineNumber : 107, className : "stx.arw.TestConvert", methodName : "test_simple_case"});
		}));
	}
	,test_cascade: function() {
		stx_arw_arrowlet_term_Fiber.crunch(stx_arw_Cascade.environment(stx_arw_Convert.toCascade(this.proc()),1,function(s) {
			utest_Assert.equals(2,s,null,{ fileName : "src/main/haxe/stx/arw/Test.hx", lineNumber : 117, className : "stx.arw.TestConvert", methodName : "test_cascade"});
		},function(e) {
			stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,e);
		}));
	}
	,test_cascade_fail_through: function() {
		var cascade = stx_arw_Convert.toCascade(this.proc());
		stx_arw_arrowlet_term_Fiber.crunch(stx_arw_Cascade.environment(stx_arw_CascadeLift.cascade(stx_arw_Cascade.fromRes(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/arw/Test.hx", lineNumber : 124, className : "stx.arw.TestConvert", methodName : "test_cascade_fail_through"}),null))),cascade),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,1),stx_Log.printer(stx_arw_Log.log(stx_nano_Wildcard.__),{ fileName : "src/main/haxe/stx/arw/Test.hx", lineNumber : 128, className : "stx.arw.TestConvert", methodName : "test_cascade_fail_through"}),function(x) {
			utest_Assert.pass(null,{ fileName : "src/main/haxe/stx/arw/Test.hx", lineNumber : 131, className : "stx.arw.TestConvert", methodName : "test_cascade_fail_through"});
		}));
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = stx_LoggedTest.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "test_simple_case", dependencies : [], execute : function() {
			_gthis.test_simple_case();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "test_cascade_fail_through", dependencies : [], execute : function() {
			_gthis.test_cascade_fail_through();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "test_cascade", dependencies : [], execute : function() {
			_gthis.test_cascade();
			return utest_Async.getResolved();
		}});
		return init;
	}
	,__class__: stx_arw_TestConvert
});
var stx_arw_arrowlet_term_Anon = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_arrowlet_term_Anon.__name__ = "stx.arw.arrowlet.term.Anon";
stx_arw_arrowlet_term_Anon.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Anon.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,defer: function(i,cont) {
		return this.delegate(i,cont);
	}
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,toString: function() {
		return "Anon(" + Std.string(this.delegate) + ")";
	}
	,__class__: stx_arw_arrowlet_term_Anon
});
var stx_arw_arrowlet_term_ApplierLift = function() { };
stx_arw_arrowlet_term_ApplierLift.__name__ = "stx.arw.arrowlet.term.ApplierLift";
var stx_arw_arrowlet_term_Applier = {};
stx_arw_arrowlet_term_Applier.unit = function(this1) {
	return stx_arw_arrowlet_term_Applier._new();
};
stx_arw_arrowlet_term_Applier._new = function() {
	return new stx_arw_arrowlet_term__$Applier_ApplierImplementation();
};
var stx_arw_arrowlet_term__$Applier_ApplierImplementation = function() {
	stx_arw_ArrowletCls.call(this);
};
stx_arw_arrowlet_term__$Applier_ApplierImplementation.__name__ = "stx.arw.arrowlet.term._Applier.ApplierImplementation";
stx_arw_arrowlet_term__$Applier_ApplierImplementation.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term__$Applier_ApplierImplementation.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	defer: function(i,cont) {
		return stx_nano_CoupleLift.decouple(i,function(arw,i) {
			return stx_arw_arrowlet_Lift.prepare(arw,i,cont);
		});
	}
	,apply: function(i) {
		return stx_arw_Convention.fold(stx_arw_Arrowlet.toInternal(stx_nano_CoupleLift.fst(i)).get_convention(),function() {
			throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
		},function() {
			return stx_arw_Arrowlet.toInternal(stx_nano_CoupleLift.fst(i)).apply(stx_nano_CoupleLift.snd(i));
		});
	}
	,get_convention: function() {
		return true;
	}
	,__class__: stx_arw_arrowlet_term__$Applier_ApplierImplementation
});
var stx_arw_arrowlet_term_Both = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_arrowlet_term_Both.__name__ = "stx.arw.arrowlet.term.Both";
stx_arw_arrowlet_term_Both.make = function(lhs,rhs) {
	return new stx_arw_arrowlet_term_Both(lhs,rhs);
};
stx_arw_arrowlet_term_Both.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Both.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(i) {
		var _gthis = this;
		return stx_arw_Convention.fold(this.get_convention(),function() {
			throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
		},function() {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,_gthis.lhs.apply(stx_nano_CoupleLift.fst(i)),_gthis.rhs.apply(stx_nano_CoupleLift.snd(i)));
		});
	}
	,defer: function(i,cont) {
		var _g = this.lhs.get_status();
		var _g1 = this.rhs.get_status();
		switch(_g) {
		case -1:
			return stx_async_terminal_Receiver.serve(cont.error(stx_arw_Internal.get_defect(this.lhs),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 30, className : "stx.arw.arrowlet.term.Both", methodName : "defer"}));
		case 1:
			switch(_g1) {
			case -1:
				return stx_async_terminal_Receiver.serve(cont.error(stx_arw_Internal.get_defect(this.rhs),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 31, className : "stx.arw.arrowlet.term.Both", methodName : "defer"}));
			case 1:
				return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.lhs.apply(stx_nano_CoupleLift.fst(i)),this.rhs.apply(stx_nano_CoupleLift.snd(i))),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 26, className : "stx.arw.arrowlet.term.Both", methodName : "defer"}));
			case 4:
				return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.lhs.apply(stx_nano_CoupleLift.fst(i)),this.rhs.get_result()),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 28, className : "stx.arw.arrowlet.term.Both", methodName : "defer"}));
			default:
				var fut_lhs = tink_core_Future.trigger();
				var fut_rhs = tink_core_Future.trigger();
				tink_core_Future.merge(fut_lhs.asFuture(),fut_rhs.asFuture(),function(l,r) {
					switch(l._hx_index) {
					case 0:
						var _g = l.t;
						switch(r._hx_index) {
						case 0:
							return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,_g,r.t));
						case 1:
							return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,r.e);
						}
						break;
					case 1:
						var _g = l.e;
						if(r._hx_index == 1) {
							return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,stx_nano_Defect.concat(_g,r.e));
						} else {
							return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,_g);
						}
						break;
					}
				});
				var inner_lhs = cont.inner(function(outcome) {
					fut_lhs.trigger(outcome);
				},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 45, className : "stx.arw.arrowlet.term.Both", methodName : "defer"});
				var inner_rhs = cont.inner(function(outcome) {
					fut_rhs.trigger(outcome);
				},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 50, className : "stx.arw.arrowlet.term.Both", methodName : "defer"});
				return stx_async_WorkLift.par(this.lhs.defer(stx_nano_CoupleLift.fst(i),inner_lhs),this.rhs.defer(stx_nano_CoupleLift.snd(i),inner_rhs));
			}
			break;
		case 4:
			switch(_g1) {
			case -1:
				return stx_async_terminal_Receiver.serve(cont.error(stx_arw_Internal.get_defect(this.rhs),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 31, className : "stx.arw.arrowlet.term.Both", methodName : "defer"}));
			case 1:
				return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.lhs.get_result(),this.rhs.apply(stx_nano_CoupleLift.snd(i))),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 29, className : "stx.arw.arrowlet.term.Both", methodName : "defer"}));
			case 4:
				return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.lhs.get_result(),this.rhs.get_result()),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 27, className : "stx.arw.arrowlet.term.Both", methodName : "defer"}));
			default:
				var fut_lhs1 = tink_core_Future.trigger();
				var fut_rhs1 = tink_core_Future.trigger();
				tink_core_Future.merge(fut_lhs1.asFuture(),fut_rhs1.asFuture(),function(l,r) {
					switch(l._hx_index) {
					case 0:
						var _g = l.t;
						switch(r._hx_index) {
						case 0:
							return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,_g,r.t));
						case 1:
							return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,r.e);
						}
						break;
					case 1:
						var _g = l.e;
						if(r._hx_index == 1) {
							return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,stx_nano_Defect.concat(_g,r.e));
						} else {
							return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,_g);
						}
						break;
					}
				});
				var inner_lhs = cont.inner(function(outcome) {
					fut_lhs1.trigger(outcome);
				},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 45, className : "stx.arw.arrowlet.term.Both", methodName : "defer"});
				var inner_rhs = cont.inner(function(outcome) {
					fut_rhs1.trigger(outcome);
				},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 50, className : "stx.arw.arrowlet.term.Both", methodName : "defer"});
				return stx_async_WorkLift.par(this.lhs.defer(stx_nano_CoupleLift.fst(i),inner_lhs),this.rhs.defer(stx_nano_CoupleLift.snd(i),inner_rhs));
			}
			break;
		default:
			if(_g1 == -1) {
				return stx_async_terminal_Receiver.serve(cont.error(stx_arw_Internal.get_defect(this.rhs),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 31, className : "stx.arw.arrowlet.term.Both", methodName : "defer"}));
			} else {
				var fut_lhs2 = tink_core_Future.trigger();
				var fut_rhs2 = tink_core_Future.trigger();
				tink_core_Future.merge(fut_lhs2.asFuture(),fut_rhs2.asFuture(),function(l,r) {
					switch(l._hx_index) {
					case 0:
						var _g = l.t;
						switch(r._hx_index) {
						case 0:
							return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,_g,r.t));
						case 1:
							return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,r.e);
						}
						break;
					case 1:
						var _g = l.e;
						if(r._hx_index == 1) {
							return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,stx_nano_Defect.concat(_g,r.e));
						} else {
							return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,_g);
						}
						break;
					}
				});
				var inner_lhs = cont.inner(function(outcome) {
					fut_lhs2.trigger(outcome);
				},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 45, className : "stx.arw.arrowlet.term.Both", methodName : "defer"});
				var inner_rhs = cont.inner(function(outcome) {
					fut_rhs2.trigger(outcome);
				},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Both.hx", lineNumber : 50, className : "stx.arw.arrowlet.term.Both", methodName : "defer"});
				return stx_async_WorkLift.par(this.lhs.defer(stx_nano_CoupleLift.fst(i),inner_lhs),this.rhs.defer(stx_nano_CoupleLift.snd(i),inner_rhs));
			}
		}
	}
	,get_convention: function() {
		return stx_arw_Convention.or(this.lhs.get_convention(),this.rhs.get_convention());
	}
	,__class__: stx_arw_arrowlet_term_Both
});
var stx_arw_arrowlet_term_Bound = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_arrowlet_term_Bound.__name__ = "stx.arw.arrowlet.term.Bound";
stx_arw_arrowlet_term_Bound.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Bound.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(i) {
		var _gthis = this;
		return stx_arw_Convention.fold(this.get_convention(),function() {
			throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
		},function() {
			return _gthis.rhs.apply(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,i,_gthis.lhs.apply(i)));
		});
	}
	,defer: function(i,cont) {
		var _gthis = this;
		return new stx_arw_arrowlet_term_FlatMap(this.lhs,function(oI) {
			return stx_arw_arrowlet_Lift.then(stx_arw_Arrowlet.pure(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,i,oI)),stx_arw_Internal.toArrowlet(_gthis.rhs));
		}).defer(i,cont);
	}
	,__class__: stx_arw_arrowlet_term_Bound
});
var stx_arw_arrowlet_term_SplitArw = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_arrowlet_term_SplitArw.__name__ = "stx.arw.arrowlet.term.SplitArw";
stx_arw_arrowlet_term_SplitArw.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_SplitArw.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(p) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.lhs(p),this.rhs.apply(p));
	}
	,defer: function(p,cont) {
		var tmp = this.rhs;
		var _g = function(tI,tII) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
		};
		var tI = this.lhs(p);
		return stx_arw_arrowlet_term_ThenFun.make(tmp,function(tII) {
			return _g(tI,tII);
		}).defer(p,cont);
	}
	,get_convention: function() {
		return this.rhs.get_convention();
	}
	,__class__: stx_arw_arrowlet_term_SplitArw
});
var stx_arw_arrowlet_term_Broach = function(inner) {
	stx_arw_arrowlet_term_SplitArw.call(this,function(x) {
		return x;
	},inner);
};
stx_arw_arrowlet_term_Broach.__name__ = "stx.arw.arrowlet.term.Broach";
stx_arw_arrowlet_term_Broach.__super__ = stx_arw_arrowlet_term_SplitArw;
stx_arw_arrowlet_term_Broach.prototype = $extend(stx_arw_arrowlet_term_SplitArw.prototype,{
	__class__: stx_arw_arrowlet_term_Broach
});
var stx_arw_arrowlet_term_Completion = function(context,process) {
	stx_arw_ArrowletCls.call(this);
	this.context = context;
	this.process = process;
};
stx_arw_arrowlet_term_Completion.__name__ = "stx.arw.arrowlet.term.Completion";
stx_arw_arrowlet_term_Completion.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Completion.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	context: null
	,process: null
	,apply: function(p) {
		var result = stx_arw_Arrowlet.toInternal(this.process).apply(this.context.environment);
		this.context.on_value(result);
		return null;
	}
	,defer: function(p,cont) {
		var _gthis = this;
		return stx_arw_Arrowlet.toInternal(this.process).defer(this.context.environment,stx_async_Terminal.ZERO.joint(function(outcome) {
			return stx_pico_OutcomeLift.fold(outcome,function(ok) {
				_gthis.context.on_value(ok);
				return stx_async_Work.unit();
			},function(no) {
				_gthis.context.on_error(no);
				return stx_async_Work.unit();
			});
		},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Completion.hx", lineNumber : 21, className : "stx.arw.arrowlet.term.Completion", methodName : "defer"}));
	}
	,__class__: stx_arw_arrowlet_term_Completion
});
var stx_arw_arrowlet_term_Delay = function(milliseconds) {
	stx_arw_ArrowletCls.call(this);
	this.milliseconds = milliseconds;
};
stx_arw_arrowlet_term_Delay.__name__ = "stx.arw.arrowlet.term.Delay";
stx_arw_arrowlet_term_Delay.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Delay.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	milliseconds: null
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(i,cont) {
		var ft = tink_core_Future.trigger();
		haxe_Timer.delay(function() {
			ft.trigger(stx_pico_OutcomeSum.Success(i));
		},this.milliseconds);
		return stx_async_terminal_Receiver.serve(cont.later(ft,{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Delay.hx", lineNumber : 26, className : "stx.arw.arrowlet.term.Delay", methodName : "defer"}));
	}
	,__class__: stx_arw_arrowlet_term_Delay
});
var stx_arw_arrowlet_term_Deliver = function(arrow,success,failure,pos) {
	stx_arw_Task.call(this,pos);
	this.arrow = arrow;
	this.success = success;
	this.failure = failure;
};
stx_arw_arrowlet_term_Deliver.__name__ = "stx.arw.arrowlet.term.Deliver";
stx_arw_arrowlet_term_Deliver.__interfaces__ = [stx_arw_ArrowletApi];
stx_arw_arrowlet_term_Deliver.__super__ = stx_arw_Task;
stx_arw_arrowlet_term_Deliver.prototype = $extend(stx_arw_Task.prototype,{
	success: null
	,failure: null
	,arrow: null
	,apply: function(i) {
		this.success(this.arrow.apply(i));
		return null;
	}
	,defer: function(i,cont) {
		var _gthis = this;
		return this.arrow.defer(i,cont.joint(function(outcome) {
			stx_pico_OutcomeLift.fold(outcome,_gthis.success,_gthis.failure);
			return stx_async_Work.ZERO;
		},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Deliver.hx", lineNumber : 20, className : "stx.arw.arrowlet.term.Deliver", methodName : "defer"}));
	}
	,convention: null
	,get_convention: function() {
		return this.arrow.get_convention();
	}
	,asArrowletDef: function() {
		return null;
	}
	,get_signal: function() {
		return this.arrow.get_signal();
	}
	,get_defect: function() {
		return stx_nano_Defect.unit();
	}
	,get_result: function() {
		return null;
	}
	,get_status: function() {
		return this.arrow.get_status();
	}
	,pursue: function() {
		stx_arw_Internal.toWork(this.arrow).pursue();
	}
	,escape: function() {
		stx_arw_Internal.toWork(this.arrow).escape();
	}
	,toString: function() {
		return "Deliver(" + Std.string(this.arrow) + ")";
	}
	,__class__: stx_arw_arrowlet_term_Deliver
	,__properties__: $extend(stx_arw_Task.prototype.__properties__,{get_convention:"get_convention"})
});
var stx_arw_arrowlet_term_FiberLift = function() { };
stx_arw_arrowlet_term_FiberLift.__name__ = "stx.arw.arrowlet.term.FiberLift";
stx_arw_arrowlet_term_FiberLift.then = function(self,that) {
	return stx_arw_Provide.lift(stx_arw_Arrowlet.Then(stx_arw_arrowlet_term_Fiber.prj(self),that));
};
var stx_arw_arrowlet_term_Fiber = {};
stx_arw_arrowlet_term_Fiber.lift = function(self) {
	return self;
};
stx_arw_arrowlet_term_Fiber.submit = function(this1,scheduler) {
	stx_async_Work.submit(stx_arw_arrowlet_Lift.prepare(this1,null,stx_async_Terminal.ZERO),scheduler);
};
stx_arw_arrowlet_term_Fiber.crunch = function(this1,scheduler) {
	stx_async_Work.crunch(stx_arw_arrowlet_Lift.prepare(this1,null,stx_async_Terminal.ZERO),scheduler);
};
stx_arw_arrowlet_term_Fiber.prj = function(this1) {
	return this1;
};
var stx_arw_arrowlet_term_FlatMap = function(self,func) {
	stx_arw_ArrowletCls.call(this);
	this.self = self;
	this.func = func;
};
stx_arw_arrowlet_term_FlatMap.__name__ = "stx.arw.arrowlet.term.FlatMap";
stx_arw_arrowlet_term_FlatMap.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_FlatMap.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	self: null
	,func: null
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(i,cont) {
		var _gthis = this;
		var future_response_trigger = tink_core_Future.trigger();
		var inner = cont.inner(function(res) {
			future_response_trigger.trigger(stx_pico_OutcomeLift.fold(res,function(oI) {
				return stx_arw_Arrowlet.toInternal(_gthis.func(oI)).defer(i,cont);
			},function(e) {
				return stx_async_terminal_Receiver.serve(cont.error(e,{ fileName : "src/main/haxe/stx/arw/arrowlet/term/FlatMap.hx", lineNumber : 30, className : "stx.arw.arrowlet.term.FlatMap", methodName : "defer"}));
			}));
		},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/FlatMap.hx", lineNumber : 22, className : "stx.arw.arrowlet.term.FlatMap", methodName : "defer"});
		return stx_async_WorkLift.seq(this.self.defer(i,inner),stx_async_Work.fromFutureWork(future_response_trigger));
	}
	,__class__: stx_arw_arrowlet_term_FlatMap
});
var stx_arw_arrowlet_term_Fulfill = function(arrow,input,pos) {
	stx_arw_Task.call(this,pos);
	this.arrow = arrow;
	this.input = input;
};
stx_arw_arrowlet_term_Fulfill.__name__ = "stx.arw.arrowlet.term.Fulfill";
stx_arw_arrowlet_term_Fulfill.__interfaces__ = [stx_arw_ArrowletApi];
stx_arw_arrowlet_term_Fulfill.__super__ = stx_arw_Task;
stx_arw_arrowlet_term_Fulfill.prototype = $extend(stx_arw_Task.prototype,{
	input: null
	,arrow: null
	,defer: function(i,cont) {
		return this.arrow.defer(this.input,cont);
	}
	,apply: function(i) {
		return this.arrow.apply(this.input);
	}
	,convention: null
	,get_convention: function() {
		return this.arrow.get_convention();
	}
	,asArrowletDef: function() {
		return null;
	}
	,get_defect: function() {
		return stx_arw_Internal.get_defect(this.arrow);
	}
	,get_result: function() {
		return this.arrow.get_result();
	}
	,get_status: function() {
		return this.arrow.get_status();
	}
	,get_signal: function() {
		return stx_arw_Internal.toWork(this.arrow).get_signal();
	}
	,pursue: function() {
		stx_arw_Internal.toWork(this.arrow).pursue();
	}
	,escape: function() {
		stx_arw_Internal.toWork(this.arrow).escape();
	}
	,toString: function() {
		return "FulFill(" + Std.string(this.arrow) + "(" + Std.string(this.input) + "))";
	}
	,__class__: stx_arw_arrowlet_term_Fulfill
	,__properties__: $extend(stx_arw_Task.prototype.__properties__,{get_convention:"get_convention"})
});
var stx_arw_arrowlet_term_Fun1Future = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_arrowlet_term_Fun1Future.__name__ = "stx.arw.arrowlet.term.Fun1Future";
stx_arw_arrowlet_term_Fun1Future.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Fun1Future.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(i,cont) {
		var later = tink_core_Future.trigger();
		var handler = function(o) {
			return later.trigger(stx_pico_OutcomeSum.Success(o));
		};
		var canceller = tink_core_Future.handle(this.delegate(i),handler);
		return stx_async_Work.Canceller(stx_async_terminal_Receiver.serve(cont.later(later,{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Fun1Future.hx", lineNumber : 19, className : "stx.arw.arrowlet.term.Fun1Future", methodName : "defer"})),tink_core_CallbackLink.toFunction(canceller));
	}
	,__class__: stx_arw_arrowlet_term_Fun1Future
});
var stx_arw_arrowlet_term_Future = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_arrowlet_term_Future.__name__ = "stx.arw.arrowlet.term.Future";
stx_arw_arrowlet_term_Future.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Future.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(i,cont) {
		return stx_async_terminal_Receiver.serve(cont.later(tink_core_Future.map(this.delegate,stx_pico_OutcomeSum.Success),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Future.hx", lineNumber : 15, className : "stx.arw.arrowlet.term.Future", methodName : "defer"}));
	}
	,__class__: stx_arw_arrowlet_term_Future
});
var stx_arw_arrowlet_term_Handler = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_arrowlet_term_Handler.__name__ = "stx.arw.arrowlet.term.Handler";
stx_arw_arrowlet_term_Handler.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Handler.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(i,cont) {
		var defer = tink_core_Future.trigger();
		this.delegate(function(o) {
			defer.trigger(stx_pico_OutcomeSum.Success(o));
		});
		return stx_async_terminal_Receiver.serve(cont.later(defer,{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Handler.hx", lineNumber : 17, className : "stx.arw.arrowlet.term.Handler", methodName : "defer"}));
	}
	,__class__: stx_arw_arrowlet_term_Handler
});
var stx_arw_arrowlet_term_Inform = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_arrowlet_term_Inform.__name__ = "stx.arw.arrowlet.term.Inform";
stx_arw_arrowlet_term_Inform.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Inform.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(i,cont) {
		var _gthis = this;
		return stx_arw_Arrowlet.toInternal(stx_arw_arrowlet_Lift.flat_map(stx_arw_Internal.toArrowlet(this.lhs),function(oI) {
			return stx_arw_Arrowlet.Anon(function(_,contI) {
				return stx_arw_Arrowlet.toInternal(stx_arw_arrowlet_Lift.flat_map(stx_arw_Internal.toArrowlet(_gthis.rhs),function(aOiOii) {
					return aOiOii;
				})).defer(oI,contI);
			});
		})).defer(i,cont);
	}
	,__class__: stx_arw_arrowlet_term_Inform
});
var stx_arw_arrowlet_term_Or = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_arrowlet_term_Or.__name__ = "stx.arw.arrowlet.term.Or";
stx_arw_arrowlet_term_Or.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Or.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(i) {
		return stx_pico_EitherLift.fold(i,($_=this.lhs,$bind($_,$_.apply)),($_=this.rhs,$bind($_,$_.apply)));
	}
	,defer: function(i,cont) {
		var _gthis = this;
		return stx_pico_EitherLift.fold(i,function(iI) {
			return stx_arw_Convention.fold(_gthis.lhs.get_convention(),function() {
				return _gthis.lhs.defer(iI,cont);
			},function() {
				return stx_async_terminal_Receiver.serve(cont.value(_gthis.lhs.apply(iI),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Or.hx", lineNumber : 19, className : "stx.arw.arrowlet.term.Or", methodName : "defer"}));
			});
		},function(iII) {
			return stx_arw_Convention.fold(_gthis.rhs.get_convention(),function() {
				return _gthis.rhs.defer(iII,cont);
			},function() {
				return stx_async_terminal_Receiver.serve(cont.value(_gthis.rhs.apply(iII),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Or.hx", lineNumber : 23, className : "stx.arw.arrowlet.term.Or", methodName : "defer"}));
			});
		});
	}
	,toString: function() {
		return "Or(" + Std.string(this.lhs) + " " + Std.string(this.rhs) + ")";
	}
	,__class__: stx_arw_arrowlet_term_Or
});
var stx_async_task_term_Pure = function(result,pos) {
	stx_async_task_Direct.call(this,pos);
	stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/async/task/term/Pure.hx", lineNumber : 6, className : "stx.async.task.term.Pure", methodName : "new"}).exists(result);
	this.loaded = true;
	this.set_result(result);
};
stx_async_task_term_Pure.__name__ = "stx.async.task.term.Pure";
stx_async_task_term_Pure.__super__ = stx_async_task_Direct;
stx_async_task_term_Pure.prototype = $extend(stx_async_task_Direct.prototype,{
	toString: function() {
		return "Pure[" + this.get_id() + ":" + stx_async_GoalStatusLift.toString(this.get_status()) + "]";
	}
	,get_status: function() {
		return 4;
	}
	,__class__: stx_async_task_term_Pure
});
var stx_arw_arrowlet_term_Pure = function(result,pos) {
	stx_async_task_term_Pure.call(this,result,pos);
};
stx_arw_arrowlet_term_Pure.__name__ = "stx.arw.arrowlet.term.Pure";
stx_arw_arrowlet_term_Pure.__interfaces__ = [stx_arw_ArrowletApi];
stx_arw_arrowlet_term_Pure.__super__ = stx_async_task_term_Pure;
stx_arw_arrowlet_term_Pure.prototype = $extend(stx_async_task_term_Pure.prototype,{
	apply: function(i) {
		return this.get_result();
	}
	,defer: function(i,cont) {
		return stx_async_terminal_Receiver.serve(cont.lense(this,{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Pure.hx", lineNumber : 10, className : "stx.arw.arrowlet.term.Pure", methodName : "defer"}));
	}
	,asArrowletDef: function() {
		return this;
	}
	,toString: function() {
		var defined = stx_LiftIf.if_else(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.get_result())),function() {
			return "<defined>";
		},function() {
			return "<undefined>";
		});
		return "Pure(" + this.get_status() + " ? " + defined + ")";
	}
	,convention: null
	,get_convention: function() {
		return false;
	}
	,__class__: stx_arw_arrowlet_term_Pure
	,__properties__: $extend(stx_async_task_term_Pure.prototype.__properties__,{get_convention:"get_convention"})
});
var stx_arw_arrowlet_term_Raw = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_arrowlet_term_Raw.__name__ = "stx.arw.arrowlet.term.Raw";
stx_arw_arrowlet_term_Raw.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Raw.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(i,cont) {
		var _gthis = this;
		return stx_async_terminal_Receiver.serve(cont.later(tink_core_Future.irreversible(function(cb) {
			_gthis.delegate(i,cb);
		}),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Raw.hx", lineNumber : 15, className : "stx.arw.arrowlet.term.Raw", methodName : "defer"}));
	}
	,__class__: stx_arw_arrowlet_term_Raw
});
var stx_arw_arrowlet_term_ReplyFuture = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_arrowlet_term_ReplyFuture.__name__ = "stx.arw.arrowlet.term.ReplyFuture";
stx_arw_arrowlet_term_ReplyFuture.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_ReplyFuture.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(i,cont) {
		var defer = tink_core_Future.trigger();
		var handler = function(o) {
			return defer.trigger(stx_pico_OutcomeSum.Success(o));
		};
		var canceller = tink_core_Future.handle(this.delegate(),handler);
		return stx_async_Work.Canceller(stx_async_terminal_Receiver.serve(cont.later(defer,{ fileName : "src/main/haxe/stx/arw/arrowlet/term/ReplyFuture.hx", lineNumber : 20, className : "stx.arw.arrowlet.term.ReplyFuture", methodName : "defer"})),tink_core_CallbackLink.toFunction(canceller));
	}
	,__class__: stx_arw_arrowlet_term_ReplyFuture
});
var stx_arw_arrowlet_term_Split = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_arrowlet_term_Split.__name__ = "stx.arw.arrowlet.term.Split";
stx_arw_arrowlet_term_Split.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Split.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(i) {
		var _gthis = this;
		return stx_arw_Convention.fold(this.get_convention(),function() {
			throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
		},function() {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,_gthis.lhs.apply(i),_gthis.rhs.apply(i));
		});
	}
	,defer: function(i,cont) {
		return stx_arw_arrowlet_term_Both.make(this.lhs,this.rhs).defer(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,i,i),cont);
	}
	,get_convention: function() {
		return stx_arw_Convention.or(this.lhs.get_convention(),this.rhs.get_convention());
	}
	,__class__: stx_arw_arrowlet_term_Split
});
var stx_arw_arrowlet_term_SplitFun = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_arrowlet_term_SplitFun.__name__ = "stx.arw.arrowlet.term.SplitFun";
stx_arw_arrowlet_term_SplitFun.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_SplitFun.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(p) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.lhs.apply(p),this.rhs(p));
	}
	,defer: function(p,cont) {
		var _gthis = this;
		return this.lhs.defer(p,cont.joint(function(outcome) {
			return stx_async_terminal_Receiver.serve(cont.issue(stx_pico_OutcomeLift.fold(outcome,function(ok) {
				return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,ok,_gthis.rhs(p)));
			},function(no) {
				return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no);
			}),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/SplitFun.hx", lineNumber : 20, className : "stx.arw.arrowlet.term.SplitFun", methodName : "defer"}));
		},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/SplitFun.hx", lineNumber : 19, className : "stx.arw.arrowlet.term.SplitFun", methodName : "defer"}));
	}
	,get_convention: function() {
		return this.lhs.get_convention();
	}
	,__class__: stx_arw_arrowlet_term_SplitFun
});
var stx_arw_arrowlet_term_Sync = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.status = 1;
	this.delegate = delegate;
};
stx_arw_arrowlet_term_Sync.__name__ = "stx.arw.arrowlet.term.Sync";
stx_arw_arrowlet_term_Sync.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Sync.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(p) {
		return this.delegate(p);
	}
	,pursue: function() {
		stx_arw_ArrowletCls.prototype.pursue.call(this);
	}
	,defer: function(p,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(this.apply(p),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Sync.hx", lineNumber : 17, className : "stx.arw.arrowlet.term.Sync", methodName : "defer"}));
	}
	,get_convention: function() {
		return false;
	}
	,next: function(that) {
		return new stx_arw_arrowlet_term_ThenFunFun($bind(this,this.apply),that);
	}
	,toString: function() {
		return "Sync()";
	}
	,__class__: stx_arw_arrowlet_term_Sync
});
var stx_arw_arrowlet_term_Then = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_arrowlet_term_Then.__name__ = "stx.arw.arrowlet.term.Then";
stx_arw_arrowlet_term_Then.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Then.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(i) {
		return this.rhs.apply(this.lhs.apply(i));
	}
	,defer: function(i,cont) {
		switch(this.lhs.get_status()) {
		case -1:
			return stx_async_terminal_Receiver.serve(cont.error(stx_arw_Internal.get_defect(this.lhs),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Then.hx", lineNumber : 17, className : "stx.arw.arrowlet.term.Then", methodName : "defer"}));
		case 1:
			return this.handle_rhs(this.lhs.apply(i),cont);
		case 0:case 2:case 3:
			var _g = $bind(this,this.joint);
			var cont1 = cont;
			return this.lhs.defer(i,cont.joint(function(outcome) {
				return _g(outcome,cont1);
			},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Then.hx", lineNumber : 21, className : "stx.arw.arrowlet.term.Then", methodName : "defer"}));
		case 4:
			return this.handle_rhs(this.lhs.get_result(),cont);
		}
	}
	,joint: function(outcome,cont) {
		var _gthis = this;
		return stx_pico_OutcomeLift.fold(outcome,function(ok) {
			return _gthis.handle_rhs(ok,cont);
		},function(no) {
			return stx_async_terminal_Receiver.serve(cont.error(no,{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Then.hx", lineNumber : 30, className : "stx.arw.arrowlet.term.Then", methodName : "joint"}));
		});
	}
	,handle_rhs: function(i,cont) {
		switch(this.rhs.get_status()) {
		case -1:
			return stx_async_terminal_Receiver.serve(cont.error(stx_arw_Internal.get_defect(this.rhs),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Then.hx", lineNumber : 35, className : "stx.arw.arrowlet.term.Then", methodName : "handle_rhs"}));
		case 1:
			return stx_async_terminal_Receiver.serve(cont.value(this.rhs.apply(i),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Then.hx", lineNumber : 38, className : "stx.arw.arrowlet.term.Then", methodName : "handle_rhs"}));
		case 0:case 2:case 3:
			return this.rhs.defer(i,cont);
		case 4:
			return stx_async_terminal_Receiver.serve(cont.value(this.rhs.get_result(),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Then.hx", lineNumber : 36, className : "stx.arw.arrowlet.term.Then", methodName : "handle_rhs"}));
		}
	}
	,get_convention: function() {
		return stx_arw_Convention.or(this.lhs.get_convention(),this.rhs.get_convention());
	}
	,__class__: stx_arw_arrowlet_term_Then
});
var stx_arw_arrowlet_term_ThenArw = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_arrowlet_term_ThenArw.__name__ = "stx.arw.arrowlet.term.ThenArw";
stx_arw_arrowlet_term_ThenArw.make = function(lhs,rhs) {
	return stx_arw_Convention.fold(stx_arw_Arrowlet.toInternal(rhs).get_convention(),function() {
		return new stx_arw_arrowlet_term_ThenArw(lhs,stx_arw_Arrowlet.toInternal(rhs)).asArrowletDef();
	},function() {
		return new stx_arw_arrowlet_term_ThenFunFun(lhs,($_=stx_arw_Arrowlet.toInternal(rhs),$bind($_,$_.apply))).asArrowletDef();
	});
};
stx_arw_arrowlet_term_ThenArw.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_ThenArw.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(i) {
		var _gthis = this;
		return stx_arw_Convention.fold(this.get_convention(),function() {
			throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
		},function() {
			return _gthis.rhs.apply(_gthis.lhs(i));
		});
	}
	,defer: function(i,cont) {
		return this.rhs.defer(this.lhs(i),cont);
	}
	,get_convention: function() {
		return this.rhs.get_convention();
	}
	,__class__: stx_arw_arrowlet_term_ThenArw
});
var stx_arw_arrowlet_term_ThenFun = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_arrowlet_term_ThenFun.__name__ = "stx.arw.arrowlet.term.ThenFun";
stx_arw_arrowlet_term_ThenFun.make = function(lhs,rhs) {
	return new stx_arw_arrowlet_term_ThenFun(lhs,rhs);
};
stx_arw_arrowlet_term_ThenFun.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_ThenFun.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(i) {
		return this.rhs(this.lhs.apply(i));
	}
	,defer: function(i,cont) {
		var _g = $bind(this,this.joint);
		var cont1 = cont;
		return this.lhs.defer(i,cont.joint(function(outcome) {
			return _g(outcome,cont1);
		},{ fileName : "src/main/haxe/stx/arw/arrowlet/term/ThenFun.hx", lineNumber : 19, className : "stx.arw.arrowlet.term.ThenFun", methodName : "defer"}));
	}
	,joint: function(outcome,cont) {
		var _gthis = this;
		return stx_async_terminal_Receiver.serve(cont.issue(stx_pico_OutcomeLift.map(outcome,function(ok) {
			return _gthis.rhs(ok);
		}),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/ThenFun.hx", lineNumber : 22, className : "stx.arw.arrowlet.term.ThenFun", methodName : "joint"}));
	}
	,get_convention: function() {
		return this.lhs.get_convention();
	}
	,toString: function() {
		return "" + stx_pico_Identifier.get_name(this.identifier()) + "(" + Std.string(this.lhs) + " -> " + Std.string(this.rhs) + ")";
	}
	,__class__: stx_arw_arrowlet_term_ThenFun
});
var stx_arw_arrowlet_term_ThenFunFun = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_arrowlet_term_ThenFunFun.__name__ = "stx.arw.arrowlet.term.ThenFunFun";
stx_arw_arrowlet_term_ThenFunFun.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_ThenFunFun.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,defer: function(p,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(this.apply(p),{ fileName : "src/main/haxe/stx/arw/arrowlet/term/ThenFunFun.hx", lineNumber : 12, className : "stx.arw.arrowlet.term.ThenFunFun", methodName : "defer"}));
	}
	,apply: function(p) {
		return this.rhs(this.lhs(p));
	}
	,next: function(that) {
		return new stx_arw_arrowlet_term_ThenFunFun($bind(this,this.apply),that);
	}
	,toString: function() {
		return "ThenFunFun(" + Std.string(this.lhs) + "," + Std.string(this.rhs) + ")";
	}
	,__class__: stx_arw_arrowlet_term_ThenFunFun
});
var stx_arw_arrowlet_term_Unit = function() {
	stx_arw_ArrowletCls.call(this);
};
stx_arw_arrowlet_term_Unit.__name__ = "stx.arw.arrowlet.term.Unit";
stx_arw_arrowlet_term_Unit.__super__ = stx_arw_ArrowletCls;
stx_arw_arrowlet_term_Unit.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	defer: function(i,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(i,{ fileName : "src/main/haxe/stx/arw/arrowlet/term/Unit.hx", lineNumber : 5, className : "stx.arw.arrowlet.term.Unit", methodName : "defer"}));
	}
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,__class__: stx_arw_arrowlet_term_Unit
});
var stx_arw_attempt_AttemptArrange = function(lhs,rhs) {
	stx_arw_ArrowletCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arw_attempt_AttemptArrange.__name__ = "stx.arw.attempt.AttemptArrange";
stx_arw_attempt_AttemptArrange.__super__ = stx_arw_ArrowletCls;
stx_arw_attempt_AttemptArrange.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	lhs: null
	,rhs: null
	,defer: function(p,cont) {
		var _gthis = this;
		return stx_arw_arrowlet_Lift.prepare(this.lhs,p,cont.joint(function(outcome) {
			return stx_pico_OutcomeLift.fold(outcome,function(res) {
				return stx_nano_ResLift.fold(res,function(lhs) {
					return _gthis.rhs.defer(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,p)),cont);
				},function(e) {
					return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),{ fileName : "src/main/haxe/stx/arw/attempt/AttemptArrange.hx", lineNumber : 17, className : "stx.arw.attempt.AttemptArrange", methodName : "defer"}));
				});
			},function(_) {
				return stx_async_terminal_Receiver.serve(cont.error([null],{ fileName : "src/main/haxe/stx/arw/attempt/AttemptArrange.hx", lineNumber : 19, className : "stx.arw.attempt.AttemptArrange", methodName : "defer"}));
			});
		},{ fileName : "src/main/haxe/stx/arw/attempt/AttemptArrange.hx", lineNumber : 12, className : "stx.arw.attempt.AttemptArrange", methodName : "defer"}));
	}
	,apply: function(p) {
		var _gthis = this;
		return stx_arw_Convention.fold(this.get_convention(),function() {
			throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
		},function() {
			return stx_nano_ResLift.fold(_gthis.lhs.apply(p),function(lhs) {
				return _gthis.rhs.apply(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,p)));
			},function(e) {
				throw haxe_Exception.thrown(e);
			});
		});
	}
	,get_convention: function() {
		return stx_arw_Convention.or(this.lhs.get_convention(),this.rhs.get_convention());
	}
	,toString: function() {
		return "" + stx_pico_Identifier.get_name(this.identifier()) + "(" + Std.string(this.lhs) + " -> " + Std.string(this.rhs) + ")";
	}
	,__class__: stx_arw_attempt_AttemptArrange
});
var stx_arw_cascade_term_ArrowletCascade = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_cascade_term_ArrowletCascade.__name__ = "stx.arw.cascade.term.ArrowletCascade";
stx_arw_cascade_term_ArrowletCascade.__super__ = stx_arw_ArrowletCls;
stx_arw_cascade_term_ArrowletCascade.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(p) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,_gthis.delegate.apply(ok));
		},function(no) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no);
		});
	}
	,defer: function(p,cont) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			var _g = $bind(_gthis,_gthis.joint);
			var cont1 = cont;
			var tmp = function(outcome) {
				return _g(outcome,cont1);
			};
			return _gthis.delegate.defer(ok,cont.joint(tmp,{ fileName : "src/main/haxe/stx/arw/cascade/term/ArrowletCascade.hx", lineNumber : 19, className : "stx.arw.cascade.term.ArrowletCascade", methodName : "defer"}));
		},function(no) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no),{ fileName : "src/main/haxe/stx/arw/cascade/term/ArrowletCascade.hx", lineNumber : 21, className : "stx.arw.cascade.term.ArrowletCascade", methodName : "defer"}));
		});
	}
	,joint: function(outcome,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(stx_pico_OutcomeLift.fold(outcome,function(t) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		},function(e) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Err.grow(e,{ fileName : "src/main/haxe/stx/arw/cascade/term/ArrowletCascade.hx", lineNumber : 28, className : "stx.arw.cascade.term.ArrowletCascade", methodName : "joint"}));
		}),{ fileName : "src/main/haxe/stx/arw/cascade/term/ArrowletCascade.hx", lineNumber : 25, className : "stx.arw.cascade.term.ArrowletCascade", methodName : "joint"}));
	}
	,toString: function() {
		return "Cascade(" + Std.string(this.delegate) + ")";
	}
	,__class__: stx_arw_cascade_term_ArrowletCascade
});
var stx_arw_cascade_term_AttemptCascade = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_cascade_term_AttemptCascade.__name__ = "stx.arw.cascade.term.AttemptCascade";
stx_arw_cascade_term_AttemptCascade.__super__ = stx_arw_ArrowletCls;
stx_arw_cascade_term_AttemptCascade.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(p) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			return _gthis.delegate.apply(ok);
		},function(no) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no);
		});
	}
	,defer: function(p,cont) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			return stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(stx_arw_Attempt.toArrowlet(_gthis.delegate))).defer(ok,cont);
		},function(no) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no),{ fileName : "src/main/haxe/stx/arw/cascade/term/AttemptCascade.hx", lineNumber : 18, className : "stx.arw.cascade.term.AttemptCascade", methodName : "defer"}));
		});
	}
	,__class__: stx_arw_cascade_term_AttemptCascade
});
var stx_arw_cascade_term_CommandCascade = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_cascade_term_CommandCascade.__name__ = "stx.arw.cascade.term.CommandCascade";
stx_arw_cascade_term_CommandCascade.__super__ = stx_arw_ArrowletCls;
stx_arw_cascade_term_CommandCascade.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(p) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			return stx_pico_OptionLift.fold(stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(_gthis.delegate)).apply(ok),function(er) {
				return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,er);
			},function() {
				return p;
			});
		},function(no) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no);
		});
	}
	,defer: function(p,cont) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			var _g = $bind(_gthis,_gthis.joint);
			var input = p;
			var cont1 = cont;
			var tmp = function(outcome) {
				return _g(input,outcome,cont1);
			};
			return stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(_gthis.delegate)).defer(ok,cont.joint(tmp,{ fileName : "src/main/haxe/stx/arw/cascade/term/CommandCascade.hx", lineNumber : 23, className : "stx.arw.cascade.term.CommandCascade", methodName : "defer"}));
		},function(no) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no),{ fileName : "src/main/haxe/stx/arw/cascade/term/CommandCascade.hx", lineNumber : 25, className : "stx.arw.cascade.term.CommandCascade", methodName : "defer"}));
		});
	}
	,joint: function(input,outcome,cont) {
		return stx_pico_OutcomeLift.fold(outcome,function(report) {
			return stx_pico_OptionLift.fold(report,function(err) {
				return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,err),{ fileName : "src/main/haxe/stx/arw/cascade/term/CommandCascade.hx", lineNumber : 31, className : "stx.arw.cascade.term.CommandCascade", methodName : "joint"}));
			},function() {
				return stx_async_terminal_Receiver.serve(cont.value(input,{ fileName : "src/main/haxe/stx/arw/cascade/term/CommandCascade.hx", lineNumber : 32, className : "stx.arw.cascade.term.CommandCascade", methodName : "joint"}));
			});
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.error(e,{ fileName : "src/main/haxe/stx/arw/cascade/term/CommandCascade.hx", lineNumber : 34, className : "stx.arw.cascade.term.CommandCascade", methodName : "joint"}));
		});
	}
	,__class__: stx_arw_cascade_term_CommandCascade
});
var stx_arw_cascade_term_ConvertCascade = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_cascade_term_ConvertCascade.__name__ = "stx.arw.cascade.term.ConvertCascade";
stx_arw_cascade_term_ConvertCascade.__super__ = stx_arw_ArrowletCls;
stx_arw_cascade_term_ConvertCascade.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(p) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(_gthis.delegate)).apply(ok));
		},function(no) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no);
		});
	}
	,defer: function(p,cont) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			return stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(_gthis.delegate)).defer(ok,cont.joint(function(outcome) {
				return stx_async_terminal_Receiver.serve(cont.value(stx_pico_OutcomeLift.fold(outcome,function(ok) {
					return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok);
				},function(no) {
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_LiftDefectNoiseToErr.toErr(no,{ fileName : "src/main/haxe/stx/arw/cascade/term/ConvertCascade.hx", lineNumber : 21, className : "stx.arw.cascade.term.ConvertCascade", methodName : "defer"}));
				}),{ fileName : "src/main/haxe/stx/arw/cascade/term/ConvertCascade.hx", lineNumber : 18, className : "stx.arw.cascade.term.ConvertCascade", methodName : "defer"}));
			},{ fileName : "src/main/haxe/stx/arw/cascade/term/ConvertCascade.hx", lineNumber : 17, className : "stx.arw.cascade.term.ConvertCascade", methodName : "defer"}));
		},function(no) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no),{ fileName : "src/main/haxe/stx/arw/cascade/term/ConvertCascade.hx", lineNumber : 25, className : "stx.arw.cascade.term.ConvertCascade", methodName : "defer"}));
		});
	}
	,get_convention: function() {
		return stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(this.delegate)).get_convention();
	}
	,__class__: stx_arw_cascade_term_ConvertCascade
});
var stx_arw_cascade_term_ProduceCascade = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_cascade_term_ProduceCascade.__name__ = "stx.arw.cascade.term.ProduceCascade";
stx_arw_cascade_term_ProduceCascade.__super__ = stx_arw_ArrowletCls;
stx_arw_cascade_term_ProduceCascade.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(p) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			return _gthis.delegate.apply(ok);
		},function(no) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no);
		});
	}
	,defer: function(p,cont) {
		var _gthis = this;
		return stx_nano_ResLift.fold(p,function(ok) {
			return stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(_gthis.delegate)).defer(ok,cont);
		},function(no) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no),{ fileName : "src/main/haxe/stx/arw/cascade/term/ProduceCascade.hx", lineNumber : 19, className : "stx.arw.cascade.term.ProduceCascade", methodName : "defer"}));
		});
	}
	,__class__: stx_arw_cascade_term_ProduceCascade
});
var stx_arw_command_term_ArrowletCommand = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_command_term_ArrowletCommand.__name__ = "stx.arw.command.term.ArrowletCommand";
stx_arw_command_term_ArrowletCommand.__super__ = stx_arw_ArrowletCls;
stx_arw_command_term_ArrowletCommand.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(p) {
		try {
			stx_arw_Arrowlet.toInternal(this.delegate).apply(p);
			return stx_nano_Report.unit();
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			return stx_nano_Report.pure(haxe_Exception.caught(_g).unwrap());
		}
	}
	,defer: function(p,cont) {
		var _g = $bind(this,this.joint);
		var cont1 = cont;
		return stx_arw_Arrowlet.toInternal(this.delegate).defer(p,cont.joint(function(oc) {
			return _g(oc,cont1);
		},{ fileName : "src/main/haxe/stx/arw/command/term/ArrowletCommand.hx", lineNumber : 20, className : "stx.arw.command.term.ArrowletCommand", methodName : "defer"}));
	}
	,joint: function(oc,cont) {
		return stx_pico_OutcomeLift.fold(oc,function(_) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_Report.unit(),{ fileName : "src/main/haxe/stx/arw/command/term/ArrowletCommand.hx", lineNumber : 25, className : "stx.arw.command.term.ArrowletCommand", methodName : "joint"}));
		},function(e) {
			return stx_async_terminal_Receiver.serve(cont.value(stx_nano_Report.pure(stx_nano_Err.grow(e,{ fileName : "src/main/haxe/stx/arw/command/term/ArrowletCommand.hx", lineNumber : 26, className : "stx.arw.command.term.ArrowletCommand", methodName : "joint"})),{ fileName : "src/main/haxe/stx/arw/command/term/ArrowletCommand.hx", lineNumber : 26, className : "stx.arw.command.term.ArrowletCommand", methodName : "joint"}));
		});
	}
	,__class__: stx_arw_command_term_ArrowletCommand
});
var stx_arw_convert_term_ConvertProvide = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_convert_term_ConvertProvide.__name__ = "stx.arw.convert.term.ConvertProvide";
stx_arw_convert_term_ConvertProvide.__super__ = stx_arw_ArrowletCls;
stx_arw_convert_term_ConvertProvide.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(p) {
		return stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(this.delegate)).apply(p))).apply(null);
	}
	,defer: function(p,cont) {
		return stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(this.delegate)).defer(p,cont.joint(function(outcome) {
			return stx_pico_OutcomeLift.fold(outcome,function(ok) {
				return stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(ok)).defer(null,cont);
			},function(no) {
				return stx_async_terminal_Receiver.serve(cont.error(no,{ fileName : "src/main/haxe/stx/arw/convert/term/ConvertProvide.hx", lineNumber : 19, className : "stx.arw.convert.term.ConvertProvide", methodName : "defer"}));
			});
		},{ fileName : "src/main/haxe/stx/arw/convert/term/ConvertProvide.hx", lineNumber : 16, className : "stx.arw.convert.term.ConvertProvide", methodName : "defer"}));
	}
	,__class__: stx_arw_convert_term_ConvertProvide
});
var stx_arw_convert_term_Fun1R = function(delegate) {
	stx_arw_arrowlet_term_Sync.call(this,delegate);
};
stx_arw_convert_term_Fun1R.__name__ = "stx.arw.convert.term.Fun1R";
stx_arw_convert_term_Fun1R.__super__ = stx_arw_arrowlet_term_Sync;
stx_arw_convert_term_Fun1R.prototype = $extend(stx_arw_arrowlet_term_Sync.prototype,{
	__class__: stx_arw_convert_term_Fun1R
});
var stx_arw_left_$choice_term_Base = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_left_$choice_term_Base.__name__ = "stx.arw.left_choice.term.Base";
stx_arw_left_$choice_term_Base.__super__ = stx_arw_ArrowletCls;
stx_arw_left_$choice_term_Base.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(either,cont) {
		switch(either._hx_index) {
		case 0:
			return stx_arw_arrowlet_Lift.prepare(stx_arw_arrowlet_Lift.then(stx_arw_Arrowlet.Applier(),stx_arw_Arrowlet.fromFun1R(haxe_ds_Either.Left)),stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.delegate,either.v),cont);
		case 1:
			return stx_async_terminal_Receiver.serve(cont.value(haxe_ds_Either.Right(either.v),{ fileName : "src/main/haxe/stx/arw/left_choice/term/Base.hx", lineNumber : 16, className : "stx.arw.left_choice.term.Base", methodName : "defer"}));
		}
	}
	,__class__: stx_arw_left_$choice_term_Base
});
var stx_arw_left_$choice_term_Choice = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_left_$choice_term_Choice.__name__ = "stx.arw.left_choice.term.Choice";
stx_arw_left_$choice_term_Choice.__super__ = stx_arw_ArrowletCls;
stx_arw_left_$choice_term_Choice.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(either,cont) {
		switch(either._hx_index) {
		case 0:
			return stx_arw_arrowlet_Lift.prepare(stx_arw_Arrowlet.Applier(),stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.delegate,either.v),cont);
		case 1:
			return stx_async_terminal_Receiver.serve(cont.value(haxe_ds_Either.Right(either.v),{ fileName : "src/main/haxe/stx/arw/left_choice/term/Choice.hx", lineNumber : 16, className : "stx.arw.left_choice.term.Choice", methodName : "defer"}));
		}
	}
	,__class__: stx_arw_left_$choice_term_Choice
});
var stx_arw_lift_LiftChoiceToArrowlet = function() { };
stx_arw_lift_LiftChoiceToArrowlet.__name__ = "stx.arw.lift.LiftChoiceToArrowlet";
stx_arw_lift_LiftChoiceToArrowlet.left = function(self) {
	return stx_arw_Arrowlet.lift(new stx_arw_left_$choice_term_Choice(self).asArrowletDef());
};
stx_arw_lift_LiftChoiceToArrowlet.right = function(self) {
	return stx_arw_Arrowlet.lift(new stx_arw_right_$choice_term_Choice(self).asArrowletDef());
};
var stx_arw_lift_LiftFun1AttemptToArrange = function() { };
stx_arw_lift_LiftFun1AttemptToArrange.__name__ = "stx.arw.lift.LiftFun1AttemptToArrange";
stx_arw_lift_LiftFun1AttemptToArrange.toArrange = function(fn) {
	return stx_arw_Arrange.fromFun1Attempt(fn);
};
var stx_arw_lift_LiftFun1FutureToArrowlet = function() { };
stx_arw_lift_LiftFun1FutureToArrowlet.__name__ = "stx.arw.lift.LiftFun1FutureToArrowlet";
stx_arw_lift_LiftFun1FutureToArrowlet.toArrowlet = function(fn) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Fun1Future(fn).asArrowletDef());
};
var stx_arw_lift_LiftFun1ProduceToAttempt = function() { };
stx_arw_lift_LiftFun1ProduceToAttempt.__name__ = "stx.arw.lift.LiftFun1ProduceToAttempt";
stx_arw_lift_LiftFun1ProduceToAttempt.toAttempt = function(fn) {
	return stx_arw_Attempt.fromFun1Produce(fn);
};
var stx_arw_lift_LiftFun1RToArrowlet = function() { };
stx_arw_lift_LiftFun1RToArrowlet.__name__ = "stx.arw.lift.LiftFun1RToArrowlet";
stx_arw_lift_LiftFun1RToArrowlet.toArrowlet = function(fn) {
	return stx_arw_Arrowlet.fromFun1R(fn);
};
var stx_arw_lift_LiftFun1RToConvert = function() { };
stx_arw_lift_LiftFun1RToConvert.__name__ = "stx.arw.lift.LiftFun1RToConvert";
stx_arw_lift_LiftFun1RToConvert.toConvert = function(fn) {
	return stx_arw_Convert.fromFun1R(fn);
};
var stx_arw_lift_LiftFun1ResToCascade = function() { };
stx_arw_lift_LiftFun1ResToCascade.__name__ = "stx.arw.lift.LiftFun1ResToCascade";
stx_arw_lift_LiftFun1ResToCascade.toCascade = function(fn) {
	return stx_arw_Cascade.fromFun1Res(fn);
};
var stx_arw_lift_LiftFun2RToArrowlet = function() { };
stx_arw_lift_LiftFun2RToArrowlet.__name__ = "stx.arw.lift.LiftFun2RToArrowlet";
stx_arw_lift_LiftFun2RToArrowlet.toArrowlet = function(fn) {
	return stx_arw_Arrowlet.fromFun2R(fn);
};
var stx_arw_lift_LiftFutureToArrowlet = function() { };
stx_arw_lift_LiftFutureToArrowlet.__name__ = "stx.arw.lift.LiftFutureToArrowlet";
stx_arw_lift_LiftFutureToArrowlet.then = function(ft,arw) {
	return stx_arw_arrowlet_Lift.then(stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Future(ft).asArrowletDef()),arw);
};
var stx_arw_lift_LiftFutureToProvide = function() { };
stx_arw_lift_LiftFutureToProvide.__name__ = "stx.arw.lift.LiftFutureToProvide";
stx_arw_lift_LiftFutureToProvide.toProvide = function(fut) {
	return stx_arw_Provide.fromFunXFuture(function() {
		return fut;
	});
};
var stx_arw_lift_LiftHandlerToArrowlet = function() { };
stx_arw_lift_LiftHandlerToArrowlet.__name__ = "stx.arw.lift.LiftHandlerToArrowlet";
stx_arw_lift_LiftHandlerToArrowlet.toArrowlet = function(fn) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_Handler(fn).asArrowletDef());
};
var stx_arw_lift_LiftProduceOfOptionIRToPropose = function() { };
stx_arw_lift_LiftProduceOfOptionIRToPropose.__name__ = "stx.arw.lift.LiftProduceOfOptionIRToPropose";
stx_arw_lift_LiftProduceOfOptionIRToPropose.toProduce = function(self) {
	return stx_arw_Propose.lift(stx_arw_arrowlet_Lift.postfix(stx_arw_Produce.toArrowlet(self),function(res) {
		return stx_nano_ResLift.fold(res,function(opt) {
			return stx_pico_OptionLift.fold(opt,stx_ext_ChunkSum.Val,function() {
				return stx_ext_ChunkSum.Tap;
			});
		},function(e) {
			return stx_ext_ChunkSum.End(e);
		});
	}));
};
var stx_arw_lift_LiftReplyFutureToArrowlet = function() { };
stx_arw_lift_LiftReplyFutureToArrowlet.__name__ = "stx.arw.lift.LiftReplyFutureToArrowlet";
stx_arw_lift_LiftReplyFutureToArrowlet.toArrowlet = function(fn) {
	return stx_arw_Arrowlet.lift(new stx_arw_arrowlet_term_ReplyFuture(fn).asArrowletDef());
};
var stx_arw_lift_LiftThunkToArrowlet = function() { };
stx_arw_lift_LiftThunkToArrowlet.__name__ = "stx.arw.lift.LiftThunkToArrowlet";
stx_arw_lift_LiftThunkToArrowlet.toArrowlet = function(fn) {
	return stx_arw_Arrowlet.fromFunXR(fn);
};
var stx_arw_lift_LiftThunkToProduce = function() { };
stx_arw_lift_LiftThunkToProduce.__name__ = "stx.arw.lift.LiftThunkToProduce";
stx_arw_lift_LiftThunkToProduce.cascade = function(ipt) {
	return stx_arw_Produce.fromFunXR(ipt);
};
var stx_arw_lift_LiftToLeftChoice = function() { };
stx_arw_lift_LiftToLeftChoice.__name__ = "stx.arw.lift.LiftToLeftChoice";
stx_arw_lift_LiftToLeftChoice.toLeftChoice = function(arw) {
	return stx_arw_Arrowlet.lift(new stx_arw_left_$choice_term_Base(arw));
};
var stx_arw_lift_LiftToRightChoice = function() { };
stx_arw_lift_LiftToRightChoice.__name__ = "stx.arw.lift.LiftToRightChoice";
stx_arw_lift_LiftToRightChoice.toRightChoice = function(arw) {
	return stx_arw_Arrowlet.lift(new stx_arw_right_$choice_term_Base(stx_arw_Arrowlet.toInternal(arw)));
};
var stx_arw_produce_term_Sync = function(result) {
	stx_arw_ArrowletCls.call(this);
	this.set_result(result);
};
stx_arw_produce_term_Sync.__name__ = "stx.arw.produce.term.Sync";
stx_arw_produce_term_Sync.__super__ = stx_arw_ArrowletCls;
stx_arw_produce_term_Sync.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	defer: function(_,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(this.get_result(),{ fileName : "src/main/haxe/stx/arw/produce/term/Sync.hx", lineNumber : 9, className : "stx.arw.produce.term.Sync", methodName : "defer"}));
	}
	,apply: function(_) {
		return this.get_result();
	}
	,get_convention: function() {
		return false;
	}
	,__class__: stx_arw_produce_term_Sync
});
var stx_arw_produce_term_Thunk = function(thunk) {
	stx_arw_ArrowletCls.call(this);
	this.thunk = thunk;
};
stx_arw_produce_term_Thunk.__name__ = "stx.arw.produce.term.Thunk";
stx_arw_produce_term_Thunk.__super__ = stx_arw_ArrowletCls;
stx_arw_produce_term_Thunk.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	thunk: null
	,defer: function(_,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(this.apply(_),{ fileName : "src/main/haxe/stx/arw/produce/term/Thunk.hx", lineNumber : 10, className : "stx.arw.produce.term.Thunk", methodName : "defer"}));
	}
	,apply: function(_) {
		return this.set_result(this.thunk());
	}
	,get_convention: function() {
		return false;
	}
	,__class__: stx_arw_produce_term_Thunk
});
var stx_arw_provide_term_FunXFutureProvide = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_provide_term_FunXFutureProvide.__name__ = "stx.arw.provide.term.FunXFutureProvide";
stx_arw_provide_term_FunXFutureProvide.__super__ = stx_arw_ArrowletCls;
stx_arw_provide_term_FunXFutureProvide.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(p) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(p,cont) {
		return stx_async_terminal_Receiver.serve(cont.later(tink_core_Future.map(this.delegate(),function(t) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
		}),{ fileName : "src/main/haxe/stx/arw/provide/term/FunXFutureProvide.hx", lineNumber : 13, className : "stx.arw.provide.term.FunXFutureProvide", methodName : "defer"}));
	}
	,__class__: stx_arw_provide_term_FunXFutureProvide
});
var stx_arw_provide_term_Later = function(delegate) {
	stx_arw_arrowlet_term_Future.call(this,delegate);
};
stx_arw_provide_term_Later.__name__ = "stx.arw.provide.term.Later";
stx_arw_provide_term_Later.__super__ = stx_arw_arrowlet_term_Future;
stx_arw_provide_term_Later.prototype = $extend(stx_arw_arrowlet_term_Future.prototype,{
	__class__: stx_arw_provide_term_Later
});
var stx_arw_provide_term_ProvideFunTerminalWork = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_provide_term_ProvideFunTerminalWork.__name__ = "stx.arw.provide.term.ProvideFunTerminalWork";
stx_arw_provide_term_ProvideFunTerminalWork.__super__ = stx_arw_ArrowletCls;
stx_arw_provide_term_ProvideFunTerminalWork.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(p) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(p,cont) {
		return this.delegate(cont);
	}
	,__class__: stx_arw_provide_term_ProvideFunTerminalWork
});
var stx_arw_provide_term_Sync = function(result) {
	stx_arw_ArrowletCls.call(this);
	this.set_result(result);
};
stx_arw_provide_term_Sync.__name__ = "stx.arw.provide.term.Sync";
stx_arw_provide_term_Sync.__super__ = stx_arw_ArrowletCls;
stx_arw_provide_term_Sync.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	defer: function(_,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(this.get_result(),{ fileName : "src/main/haxe/stx/arw/provide/term/Sync.hx", lineNumber : 9, className : "stx.arw.provide.term.Sync", methodName : "defer"}));
	}
	,apply: function(_) {
		return this.get_result();
	}
	,get_convention: function() {
		return false;
	}
	,__class__: stx_arw_provide_term_Sync
});
var stx_arw_provide_term_Thunk = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
	this.initialized = false;
};
stx_arw_provide_term_Thunk.__name__ = "stx.arw.provide.term.Thunk";
stx_arw_provide_term_Thunk.__super__ = stx_arw_ArrowletCls;
stx_arw_provide_term_Thunk.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,initialized: null
	,initialize: function() {
		if(!this.initialized) {
			this.initialized = true;
			this.set_result(this.delegate());
		}
	}
	,apply: function(p) {
		this.initialize();
		return this.get_result();
	}
	,defer: function(p,cont) {
		return stx_async_terminal_Receiver.serve(cont.value(this.apply(p),{ fileName : "src/main/haxe/stx/arw/provide/term/Thunk.hx", lineNumber : 23, className : "stx.arw.provide.term.Thunk", methodName : "defer"}));
	}
	,get_convention: function() {
		return false;
	}
	,pursue: function() {
		this.initialize();
		stx_arw_ArrowletCls.prototype.pursue.call(this);
	}
	,__class__: stx_arw_provide_term_Thunk
});
var stx_arw_reframe_term_CascadeReframe = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_reframe_term_CascadeReframe.__name__ = "stx.arw.reframe.term.CascadeReframe";
stx_arw_reframe_term_CascadeReframe.__super__ = stx_arw_ArrowletCls;
stx_arw_reframe_term_CascadeReframe.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(p) {
		return stx_nano_ResLift.flat_map(this.delegate.apply(p),function(opt) {
			var _g = function(tI,tII) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
			};
			var tI = opt;
			var tmp = function(tII) {
				return _g(tI,tII);
			};
			return stx_nano_ResLift.map(p,tmp);
		});
	}
	,defer: function(p,cont) {
		return stx_arw_Arrowlet.toInternal(stx_arw_Arrowlet.lift(this.delegate)).defer(p,cont.joint(function(outcome) {
			return stx_async_terminal_Receiver.serve(cont.issue(stx_pico_OutcomeLift.map(outcome,function(res) {
				return stx_nano_ResLift.flat_map(res,function(ok) {
					var _g = function(tI,tII) {
						return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
					};
					var tI = ok;
					var tmp = function(tII) {
						return _g(tI,tII);
					};
					return stx_nano_ResLift.map(p,tmp);
				});
			}),{ fileName : "src/main/haxe/stx/arw/reframe/term/CascadeReframe.hx", lineNumber : 18, className : "stx.arw.reframe.term.CascadeReframe", methodName : "defer"}));
		},{ fileName : "src/main/haxe/stx/arw/reframe/term/CascadeReframe.hx", lineNumber : 17, className : "stx.arw.reframe.term.CascadeReframe", methodName : "defer"}));
	}
	,__class__: stx_arw_reframe_term_CascadeReframe
});
var stx_arw_right_$choice_term_Base = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_right_$choice_term_Base.__name__ = "stx.arw.right_choice.term.Base";
stx_arw_right_$choice_term_Base.__super__ = stx_arw_ArrowletCls;
stx_arw_right_$choice_term_Base.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(i) {
		var _gthis = this;
		return stx_arw_Convention.fold(this.get_convention(),function() {
			throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
		},function() {
			return stx_pico_EitherLift.fold(i,function(l) {
				return stx_nano_lift_LiftNano.left(stx_nano_Wildcard.__,l);
			},function(r) {
				return stx_nano_lift_LiftNano.right(stx_nano_Wildcard.__,_gthis.delegate.apply(r));
			});
		});
	}
	,defer: function(i,cont) {
		switch(i._hx_index) {
		case 0:
			return stx_async_terminal_Receiver.serve(cont.value(haxe_ds_Either.Left(i.v),{ fileName : "src/main/haxe/stx/arw/right_choice/term/Base.hx", lineNumber : 21, className : "stx.arw.right_choice.term.Base", methodName : "defer"}));
		case 1:
			return stx_arw_arrowlet_Lift.prepare(stx_arw_arrowlet_Lift.then(stx_arw_Arrowlet.Applier(),stx_arw_Arrowlet.fromFun1R(haxe_ds_Either.Right)),stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_arw_Internal.toArrowlet(this.delegate),i.v),cont);
		}
	}
	,get_convention: function() {
		return this.delegate.get_convention();
	}
	,__class__: stx_arw_right_$choice_term_Base
});
var stx_arw_right_$choice_term_Choice = function(delegate) {
	stx_arw_ArrowletCls.call(this);
	this.delegate = delegate;
};
stx_arw_right_$choice_term_Choice.__name__ = "stx.arw.right_choice.term.Choice";
stx_arw_right_$choice_term_Choice.__super__ = stx_arw_ArrowletCls;
stx_arw_right_$choice_term_Choice.prototype = $extend(stx_arw_ArrowletCls.prototype,{
	delegate: null
	,apply: function(i) {
		throw haxe_Exception.thrown(stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention);
	}
	,defer: function(i,cont) {
		switch(i._hx_index) {
		case 0:
			return stx_async_terminal_Receiver.serve(cont.value(haxe_ds_Either.Left(i.v),{ fileName : "src/main/haxe/stx/arw/right_choice/term/Choice.hx", lineNumber : 19, className : "stx.arw.right_choice.term.Choice", methodName : "defer"}));
		case 1:
			return stx_arw_arrowlet_Lift.prepare(stx_arw_arrowlet_Lift.postfix(stx_arw_Arrowlet.Applier(),function(either) {
				return stx_pico_EitherLift.flip(either);
			}),stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.delegate,i.v),cont);
		}
	}
	,__class__: stx_arw_right_$choice_term_Choice
});
var stx_arw_test_AfterRewriteTest = function() {
	utest_Test.call(this);
};
stx_arw_test_AfterRewriteTest.__name__ = "stx.arw.test.AfterRewriteTest";
stx_arw_test_AfterRewriteTest.__super__ = utest_Test;
stx_arw_test_AfterRewriteTest.prototype = $extend(utest_Test.prototype,{
	testSync: function(async) {
		stx_arw_arrowlet_term_Fiber.submit(stx_arw_Arrowlet.environment(stx_arw_Arrowlet.Sync(function(i) {
			return i + 1;
		}),1,function(v) {
			utest_Assert.equals(2,v,null,{ fileName : "src/main/haxe/stx/arw/test/AfterRewriteTest.hx", lineNumber : 11, className : "stx.arw.test.AfterRewriteTest", methodName : "testSync"});
			async.done({ fileName : "src/main/haxe/stx/arw/test/AfterRewriteTest.hx", lineNumber : 12, className : "stx.arw.test.AfterRewriteTest", methodName : "testSync"});
		},function(e) {
			haxe_Log.trace(e,{ fileName : "src/main/haxe/stx/arw/test/AfterRewriteTest.hx", lineNumber : 15, className : "stx.arw.test.AfterRewriteTest", methodName : "testSync"});
		}));
	}
	,testAsync: function(async) {
		stx_arw_arrowlet_term_Fiber.submit(stx_arw_Arrowlet.environment(stx_arw_Arrowlet.fromFunSink(function(i,cb) {
			cb(++i);
		}),1,function(v) {
			utest_Assert.equals(2,v,null,{ fileName : "src/main/haxe/stx/arw/test/AfterRewriteTest.hx", lineNumber : 28, className : "stx.arw.test.AfterRewriteTest", methodName : "testAsync"});
			async.done({ fileName : "src/main/haxe/stx/arw/test/AfterRewriteTest.hx", lineNumber : 29, className : "stx.arw.test.AfterRewriteTest", methodName : "testAsync"});
		},function(_) {
		}));
	}
	,test_after_tick: function(async) {
		stx_arw_arrowlet_term_Fiber.submit(stx_arw_Arrowlet.environment(stx_arw_Arrowlet.fromFunSink(function(i,cb) {
			haxe_Timer.delay(function() {
				var tmp = i += 1;
				cb(tmp);
			},100);
		}),1,function(v) {
			utest_Assert.equals(2,v,null,{ fileName : "src/main/haxe/stx/arw/test/AfterRewriteTest.hx", lineNumber : 51, className : "stx.arw.test.AfterRewriteTest", methodName : "test_after_tick"});
			async.done({ fileName : "src/main/haxe/stx/arw/test/AfterRewriteTest.hx", lineNumber : 52, className : "stx.arw.test.AfterRewriteTest", methodName : "test_after_tick"});
		},function(e) {
			throw haxe_Exception.thrown(e);
		}));
	}
	,test_arrowlet_error: function(async) {
		stx_arw_arrowlet_term_Fiber.submit(stx_arw_Arrowlet.environment(stx_arw_Arrowlet.Anon(function(i,cont) {
			return stx_async_terminal_Receiver.serve(cont.issue(stx_pico_OutcomeSum.Failure(stx_nano_Defect.pure("E_UnexpectedNullValueEncountered")),{ fileName : "src/main/haxe/stx/arw/test/AfterRewriteTest.hx", lineNumber : 63, className : "stx.arw.test.AfterRewriteTest", methodName : "test_arrowlet_error"}));
		}),1,function(_) {
		},function(e) {
			utest_Assert.same(["E_UnexpectedNullValueEncountered"],e,null,null,null,{ fileName : "src/main/haxe/stx/arw/test/AfterRewriteTest.hx", lineNumber : 69, className : "stx.arw.test.AfterRewriteTest", methodName : "test_arrowlet_error"});
			async.done({ fileName : "src/main/haxe/stx/arw/test/AfterRewriteTest.hx", lineNumber : 70, className : "stx.arw.test.AfterRewriteTest", methodName : "test_arrowlet_error"});
		}));
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "test_arrowlet_error", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.test_arrowlet_error(async);
			return async;
		}});
		init.tests.push({ name : "test_after_tick", dependencies : [], execute : function() {
			var async = new utest_Async(7000);
			_gthis.test_after_tick(async);
			return async;
		}});
		init.tests.push({ name : "testSync", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.testSync(async);
			return async;
		}});
		init.tests.push({ name : "testAsync", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.testAsync(async);
			return async;
		}});
		return init;
	}
	,__class__: stx_arw_test_AfterRewriteTest
});
var stx_arw_test_FlatMapTest = function() {
	utest_Test.call(this);
};
stx_arw_test_FlatMapTest.__name__ = "stx.arw.test.FlatMapTest";
stx_arw_test_FlatMapTest.__super__ = utest_Test;
stx_arw_test_FlatMapTest.prototype = $extend(utest_Test.prototype,{
	test_then: function(async) {
		stx_arw_arrowlet_term_Fiber.submit(stx_arw_Arrowlet.environment(stx_arw_arrowlet_Lift.then(stx_arw_Arrowlet.Sync(function(x) {
			return x + 1;
		}),stx_arw_Arrowlet.Sync(function(x) {
			return x + 1;
		})),1,function(x) {
			utest_Assert.equals(3,x,null,{ fileName : "src/main/haxe/stx/arw/test/FlatMapTest.hx", lineNumber : 11, className : "stx.arw.test.FlatMapTest", methodName : "test_then"});
			async.done({ fileName : "src/main/haxe/stx/arw/test/FlatMapTest.hx", lineNumber : 12, className : "stx.arw.test.FlatMapTest", methodName : "test_then"});
		},function(y) {
			haxe_Log.trace(y,{ fileName : "src/main/haxe/stx/arw/test/FlatMapTest.hx", lineNumber : 15, className : "stx.arw.test.FlatMapTest", methodName : "test_then"});
		}));
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "test_then", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.test_then(async);
			return async;
		}});
		return init;
	}
	,__class__: stx_arw_test_FlatMapTest
});
var stx_arw_test_ProduceTest = function() {
	utest_Test.call(this);
};
stx_arw_test_ProduceTest.__name__ = "stx.arw.test.ProduceTest";
stx_arw_test_ProduceTest.__super__ = utest_Test;
stx_arw_test_ProduceTest.prototype = $extend(utest_Test.prototype,{
	test_lift_thunk: function(async) {
		stx_arw_arrowlet_term_Fiber.submit(stx_arw_Produce.environment(stx_arw_lift_LiftThunkToProduce.cascade(function() {
			return true;
		}),function(v) {
			utest_Assert.isTrue(v,null,{ fileName : "src/main/haxe/stx/arw/test/ProduceTest.hx", lineNumber : 10, className : "stx.arw.test.ProduceTest", methodName : "test_lift_thunk"});
			async.done({ fileName : "src/main/haxe/stx/arw/test/ProduceTest.hx", lineNumber : 11, className : "stx.arw.test.ProduceTest", methodName : "test_lift_thunk"});
		},function(_) {
		}));
	}
	,test_from_arrowlet: function(async) {
		stx_arw_arrowlet_term_Fiber.submit(stx_arw_Produce.environment(stx_arw_Produce.fromArrowlet(stx_arw_Arrowlet.Sync(function(_) {
			return 1;
		})),function(v) {
			utest_Assert.equals(1,v,null,{ fileName : "src/main/haxe/stx/arw/test/ProduceTest.hx", lineNumber : 23, className : "stx.arw.test.ProduceTest", methodName : "test_from_arrowlet"});
			async.done({ fileName : "src/main/haxe/stx/arw/test/ProduceTest.hx", lineNumber : 24, className : "stx.arw.test.ProduceTest", methodName : "test_from_arrowlet"});
		},function(_) {
		}));
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "test_lift_thunk", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.test_lift_thunk(async);
			return async;
		}});
		init.tests.push({ name : "test_from_arrowlet", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.test_from_arrowlet(async);
			return async;
		}});
		return init;
	}
	,__class__: stx_arw_test_ProduceTest
});
var stx_arw_test_RawTest = function() {
	utest_Test.call(this);
};
stx_arw_test_RawTest.__name__ = "stx.arw.test.RawTest";
stx_arw_test_RawTest.__super__ = utest_Test;
stx_arw_test_RawTest.prototype = $extend(utest_Test.prototype,{
	test: function(async) {
		stx_arw_arrowlet_term_Fiber.submit(stx_arw_Arrowlet.environment(stx_arw_Arrowlet.fromFunSink(function(i,cont) {
			cont(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,i));
		}),1,function(x) {
			utest_Assert.pass(null,{ fileName : "src/main/haxe/stx/arw/test/RawTest.hx", lineNumber : 14, className : "stx.arw.test.RawTest", methodName : "test"});
			async.done({ fileName : "src/main/haxe/stx/arw/test/RawTest.hx", lineNumber : 15, className : "stx.arw.test.RawTest", methodName : "test"});
		},function(e) {
			stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,e);
		}));
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "test", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.test(async);
			return async;
		}});
		return init;
	}
	,__class__: stx_arw_test_RawTest
});
var stx_arw_test_TerminalTest = function() {
	utest_Test.call(this);
};
stx_arw_test_TerminalTest.__name__ = "stx.arw.test.TerminalTest";
stx_arw_test_TerminalTest.__super__ = utest_Test;
stx_arw_test_TerminalTest.prototype = $extend(utest_Test.prototype,{
	test: function(async) {
		var term = stx_async_Terminal._new(null,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 6, className : "stx.arw.test.TerminalTest", methodName : "test"});
		stx_async_Work.crunch(stx_arw_arrowlet_Lift.prepare(stx_arw_arrowlet_Lift.then(stx_arw_Arrowlet.unit(),stx_arw_Arrowlet.unit()),1,term));
	}
	,_test_composition: function(async) {
		var t = stx_async_Terminal._new(null,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 72, className : "stx.arw.test.TerminalTest", methodName : "_test_composition"});
		(function(v) {
			haxe_Log.trace(v,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 85, className : "stx.arw.test.TerminalTest", methodName : "_test_composition"});
			utest_Assert.pass(null,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 86, className : "stx.arw.test.TerminalTest", methodName : "_test_composition"});
			async.done({ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 87, className : "stx.arw.test.TerminalTest", methodName : "_test_composition"});
		})(stx_async_terminal_Receiver.after(stx_async_terminal_Receiver.listen(t.value(1,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 73, className : "stx.arw.test.TerminalTest", methodName : "_test_composition"}),function(s) {
			haxe_Log.trace(s,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 74, className : "stx.arw.test.TerminalTest", methodName : "_test_composition"});
		}),stx_async_terminal_Receiver.serve(t.inner(function(outcome) {
			haxe_Log.trace(outcome,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 78, className : "stx.arw.test.TerminalTest", methodName : "_test_composition"});
		},{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 76, className : "stx.arw.test.TerminalTest", methodName : "_test_composition"}).value("str",{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 81, className : "stx.arw.test.TerminalTest", methodName : "_test_composition"}))));
	}
	,_test_inner: function(async) {
		var t = stx_async_Terminal._new(null,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 92, className : "stx.arw.test.TerminalTest", methodName : "_test_inner"});
		var deferI = tink_core_Future.trigger();
		var r0 = stx_async_terminal_Receiver.listen(t.later(deferI,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 94, className : "stx.arw.test.TerminalTest", methodName : "_test_inner"}),function(s) {
			haxe_Log.trace(s,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 95, className : "stx.arw.test.TerminalTest", methodName : "_test_inner"});
		});
		var inner = t.inner(function(s) {
			haxe_Log.trace(s,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 99, className : "stx.arw.test.TerminalTest", methodName : "_test_inner"});
			deferI.trigger(s);
		},{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 97, className : "stx.arw.test.TerminalTest", methodName : "_test_inner"});
		var deferII = tink_core_Future.trigger();
		var r2 = stx_async_terminal_Receiver.after(r0,stx_async_terminal_Receiver.serve(inner.later(deferII,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 104, className : "stx.arw.test.TerminalTest", methodName : "_test_inner"})));
		deferII.trigger(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,"hello"));
		(function(v) {
			haxe_Log.trace(v,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 109, className : "stx.arw.test.TerminalTest", methodName : "_test_inner"});
			utest_Assert.pass(null,{ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 110, className : "stx.arw.test.TerminalTest", methodName : "_test_inner"});
			async.done({ fileName : "src/main/haxe/stx/arw/test/TerminalTest.hx", lineNumber : 111, className : "stx.arw.test.TerminalTest", methodName : "_test_inner"});
		})(r2);
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "test", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.test(async);
			return async;
		}});
		return init;
	}
	,__class__: stx_arw_test_TerminalTest
});
var stx_arw_test__$TerminalTest_ERROR_$A = $hxEnums["stx.arw.test._TerminalTest.ERROR_A"] = { __ename__:"stx.arw.test._TerminalTest.ERROR_A",__constructs__:null
	,ERR_A: {_hx_name:"ERR_A",_hx_index:0,__enum__:"stx.arw.test._TerminalTest.ERROR_A",toString:$estr}
};
stx_arw_test__$TerminalTest_ERROR_$A.__constructs__ = [stx_arw_test__$TerminalTest_ERROR_$A.ERR_A];
var stx_arw_test__$TerminalTest_ERROR_$B = $hxEnums["stx.arw.test._TerminalTest.ERROR_B"] = { __ename__:"stx.arw.test._TerminalTest.ERROR_B",__constructs__:null
	,ERR_B: {_hx_name:"ERR_B",_hx_index:0,__enum__:"stx.arw.test._TerminalTest.ERROR_B",toString:$estr}
};
stx_arw_test__$TerminalTest_ERROR_$B.__constructs__ = [stx_arw_test__$TerminalTest_ERROR_$B.ERR_B];
var stx_arw_test_TestCascade = function() {
	utest_Test.call(this);
};
stx_arw_test_TestCascade.__name__ = "stx.arw.test.TestCascade";
stx_arw_test_TestCascade.__super__ = utest_Test;
stx_arw_test_TestCascade.prototype = $extend(utest_Test.prototype,{
	test_cascade: function(async) {
		stx_arw_arrowlet_term_Fiber.submit(stx_arw_Cascade.environment(stx_arw_Cascade.fromArrowlet(stx_arw_Arrowlet.Sync(function(x) {
			return x + 1;
		})),1,function(x) {
			utest_Assert.pass(null,{ fileName : "src/main/haxe/stx/arw/test/TestCascade.hx", lineNumber : 13, className : "stx.arw.test.TestCascade", methodName : "test_cascade"});
			async.done({ fileName : "src/main/haxe/stx/arw/test/TestCascade.hx", lineNumber : 14, className : "stx.arw.test.TestCascade", methodName : "test_cascade"});
		},function(e) {
			stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,e);
		}));
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "test_cascade", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.test_cascade(async);
			return async;
		}});
		return init;
	}
	,__class__: stx_arw_test_TestCascade
});
var stx_arw_test_ThenFunTest = function() {
	utest_Test.call(this);
};
stx_arw_test_ThenFunTest.__name__ = "stx.arw.test.ThenFunTest";
stx_arw_test_ThenFunTest.__super__ = utest_Test;
stx_arw_test_ThenFunTest.prototype = $extend(utest_Test.prototype,{
	test: function() {
		var c = stx_arw_arrowlet_Lift.next(stx_arw_arrowlet_Lift.next(stx_arw_Arrowlet.Sync(function(i) {
			return i + 1;
		}),function(i) {
			return i * 10;
		}),stx_Log.through(stx_arw_Test.log(stx_nano_Wildcard.__),{ fileName : "src/main/haxe/stx/arw/test/ThenFunTest.hx", lineNumber : 14, className : "stx.arw.test.ThenFunTest", methodName : "test"}));
		haxe_Log.trace(c,{ fileName : "src/main/haxe/stx/arw/test/ThenFunTest.hx", lineNumber : 16, className : "stx.arw.test.ThenFunTest", methodName : "test"});
		stx_arw_arrowlet_term_Fiber.crunch(stx_arw_Arrowlet.environment(c,1,function(x) {
			utest_Assert.equals(20,x,null,{ fileName : "src/main/haxe/stx/arw/test/ThenFunTest.hx", lineNumber : 19, className : "stx.arw.test.ThenFunTest", methodName : "test"});
		},function(e) {
			stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,e);
		}));
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "test", dependencies : [], execute : function() {
			_gthis.test();
			return utest_Async.getResolved();
		}});
		return init;
	}
	,__class__: stx_arw_test_ThenFunTest
});
var stx_nano_Err = function(data,prev,pos) {
	this.data = data;
	this.prev = stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,prev),haxe_ds_Option.None);
	this.pos = pos;
};
stx_nano_Err.__name__ = "stx.nano.Err";
stx_nano_Err.fromTinkError = function(err) {
	return new stx_nano_Err(stx_pico_Option.fromNullT(stx_nano_FailureSum.ERR(stx_nano_FailCode.fromString(err.message))),null,err.pos);
};
stx_nano_Err.grow = function(arr,pos) {
	return stx_lift_ArrayLift.lfold(stx_lift_ArrayLift.tail(arr),function(next,memo) {
		return new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF(next)),haxe_ds_Option.Some(memo),pos);
	},new stx_nano_Err(stx_pico_OptionLift.map(stx_lift_ArrayLift.head(arr),stx_nano_FailureSum.ERR_OF),haxe_ds_Option.None,pos));
};
stx_nano_Err.prototype = {
	uuid: null
	,get_uuid: function() {
		return stx_nano_Err.UUID;
	}
	,prev: null
	,data: null
	,pos: null
	,errate: function(fn) {
		return this.map(fn);
	}
	,map: function(fn) {
		var next_data = stx_pico_OptionLift.map(this.data,function(t) {
			switch(t._hx_index) {
			case 0:
				return stx_nano_FailureSum.ERR_OF(fn(t.v));
			case 1:
				return stx_nano_FailureSum.ERR(t.spec);
			}
		});
		var _g = this.prev;
		return new stx_nano_Err(next_data,_g == null ? haxe_ds_Option.None : _g._hx_index == 0 ? haxe_ds_Option.Some(_g.v.map(fn)) : haxe_ds_Option.None,this.pos);
	}
	,copy: function(data,prev,pos) {
		return new stx_nano_Err(stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,data),this.data),stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,prev),this.prev),stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,pos),this.pos));
	}
	,last: function() {
		var self = this;
		while(self.prev != haxe_ds_Option.None) {
			var _g = self.prev;
			if(_g._hx_index == 0) {
				self = _g.v;
			} else {
				break;
			}
		}
		return self;
	}
	,next: function(that) {
		var last = that.copy(null,null,{ fileName : "stx/nano/Err.hx", lineNumber : 60, className : "stx.nano.Err", methodName : "next"});
		var stack = [];
		while(stx_pico_OptionLift.is_defined(last.prev)) {
			stack.push(stx_pico_OptionLift.fudge(last.prev));
			last = stx_pico_OptionLift.fudge(last.prev);
		}
		return Lambda.fold(stack,function(next,memo) {
			return next.copy(null,stx_pico_Option.fromNullT(memo),{ fileName : "stx/nano/Err.hx", lineNumber : 67, className : "stx.nano.Err", methodName : "next"});
		},this);
	}
	,head: function() {
		var _g = this.data;
		if(_g._hx_index == 0) {
			var _g1 = _g.v;
			if(_g1._hx_index == 0) {
				return haxe_ds_Option.Some(_g1.v);
			} else {
				return haxe_ds_Option.None;
			}
		} else {
			return haxe_ds_Option.None;
		}
	}
	,fault: function() {
		return this.pos;
	}
	,toString: function() {
		var p = stx_nano_PositionLift.toStringClassMethodLine(stx_nano_Position.lift(this.pos));
		return "" + stx_pico_Option.toString(this.data) + " at (" + p + ")";
	}
	,iterator: function() {
		var cursor = haxe_ds_Option.Some(this);
		return { hasNext : function() {
			return stx_pico_OptionLift.is_defined(cursor);
		}, next : function() {
			var value = stx_nano_lift_LiftOptionNano.fudge(cursor);
			cursor = value.prev;
			return value;
		}};
	}
	,value: function() {
		return stx_pico_OptionLift.flat_map(this.data,function(f) {
			return stx_nano_FailureLift.fold(f,haxe_ds_Option.Some,function(_) {
				return haxe_ds_Option.None;
			});
		});
	}
	,elide: function() {
		return this.map(function(v) {
			return v;
		});
	}
	,__class__: stx_nano_Err
	,__properties__: {get_uuid:"get_uuid"}
};
var stx_assert_AssertError = function(data,prev,pos) {
	stx_nano_Err.call(this,data,prev,pos);
};
stx_assert_AssertError.__name__ = "stx.assert.AssertError";
stx_assert_AssertError.__super__ = stx_nano_Err;
stx_assert_AssertError.prototype = $extend(stx_nano_Err.prototype,{
	__class__: stx_assert_AssertError
});
var stx_assert_AssertionApi = function() { };
stx_assert_AssertionApi.__name__ = "stx.assert.AssertionApi";
stx_assert_AssertionApi.__isInterface__ = true;
stx_assert_AssertionApi.prototype = {
	applyII: null
	,asAssertionApi: null
	,__class__: stx_assert_AssertionApi
};
var stx_assert_Assertion = {};
stx_assert_Assertion.crunchII = function(this1,l,r) {
	var _g = stx_nano_Report.prj(this1.applyII(l,r));
	if(_g._hx_index == 0) {
		throw haxe_Exception.thrown(_g.v);
	}
};
stx_assert_Assertion.ok = function(this1,l,r) {
	return !stx_pico_OptionLift.is_defined(this1.applyII(l,r));
};
stx_assert_Assertion.bindI = function(this1,l) {
	return new stx_assert_predicate_term_AssertionPredicate(this1,l);
};
stx_assert_Assertion.equals = function(pos) {
	return new stx_assert_assertion_term_Equals(pos);
};
stx_assert_Assertion.alike = function(pos) {
	return new stx_assert_assertion_term_Alike(pos);
};
stx_assert_Assertion.gt = function(pos) {
	return new stx_assert_assertion_term_GreaterThan(pos);
};
stx_assert_Assertion.gt_eq = function(pos) {
	return new stx_assert_assertion_term_GreaterThanOrEquals(pos);
};
stx_assert_Assertion.lt = function(pos) {
	return new stx_assert_assertion_term_LessThan(pos);
};
stx_assert_Assertion.lt_eq = function(pos) {
	return new stx_assert_assertion_term_LessThanOrEquals(pos);
};
var stx_assert_OrderableApi = function() { };
stx_assert_OrderableApi.__name__ = "stx.assert.OrderableApi";
stx_assert_OrderableApi.__isInterface__ = true;
stx_assert_OrderableApi.prototype = {
	lt: null
	,__class__: stx_assert_OrderableApi
};
var stx_assert_EqualableApi = function() { };
stx_assert_EqualableApi.__name__ = "stx.assert.EqualableApi";
stx_assert_EqualableApi.__isInterface__ = true;
stx_assert_EqualableApi.prototype = {
	eq: null
	,__class__: stx_assert_EqualableApi
};
var stx_assert_ComparableApi = function() { };
stx_assert_ComparableApi.__name__ = "stx.assert.ComparableApi";
stx_assert_ComparableApi.__isInterface__ = true;
stx_assert_ComparableApi.__interfaces__ = [stx_assert_OrderableApi,stx_assert_EqualableApi];
var stx_assert_Comparable = {};
stx_assert_Comparable._new = function(self) {
	return self;
};
stx_assert_Comparable.Int = function() {
	return new stx_assert_comparable_term_Int();
};
stx_assert_Comparable.String = function() {
	return new stx_assert_comparable_term_String();
};
stx_assert_Comparable.Couple = function(l,r) {
	return new stx_assert_comparable_term_Couple(l,r);
};
stx_assert_Comparable.Primitive = function() {
	return new stx_assert_comparable_term_Primitive();
};
stx_assert_Comparable.Anon = function(eq,lt) {
	return new stx_assert_comparable_term_Anon(eq,lt);
};
var stx_assert_ComparativeSum = $hxEnums["stx.assert.ComparativeSum"] = { __ename__:"stx.assert.ComparativeSum",__constructs__:null
	,GT: {_hx_name:"GT",_hx_index:0,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,GTEQ: {_hx_name:"GTEQ",_hx_index:1,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,LT: {_hx_name:"LT",_hx_index:2,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,LTEQ: {_hx_name:"LTEQ",_hx_index:3,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,EQ: {_hx_name:"EQ",_hx_index:4,__enum__:"stx.assert.ComparativeSum",toString:$estr}
};
stx_assert_ComparativeSum.__constructs__ = [stx_assert_ComparativeSum.GT,stx_assert_ComparativeSum.GTEQ,stx_assert_ComparativeSum.LT,stx_assert_ComparativeSum.LTEQ,stx_assert_ComparativeSum.EQ];
var stx_assert_Comparative = {};
stx_assert_Comparative._new = function(self) {
	return self;
};
stx_assert_Comparative.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return ">";
	case 1:
		return ">=";
	case 2:
		return "<";
	case 3:
		return "<=";
	case 4:
		return "==";
	}
};
var stx_assert_Compare = {};
stx_assert_Compare.__properties__ = {get_self:"get_self"};
stx_assert_Compare._new = function(self) {
	return self;
};
stx_assert_Compare.pure = function(v) {
	return stx_assert__$Compare_CompareSum.Value(v);
};
stx_assert_Compare.and = function(this1,that) {
	return stx_assert__$Compare_CompareSum.And(this1,that);
};
stx_assert_Compare.or = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Or(this1,that);
};
stx_assert_Compare.not = function(this1) {
	return stx_assert__$Compare_CompareSum.Not(this1);
};
stx_assert_Compare.gt = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.GT,that);
};
stx_assert_Compare.gtEq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.GTEQ,that);
};
stx_assert_Compare.lt = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.LT,that);
};
stx_assert_Compare.ltEq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.LTEQ,that);
};
stx_assert_Compare.eq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.EQ,that);
};
stx_assert_Compare.nEq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Not(stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.GTEQ,that));
};
stx_assert_Compare.get_self = function(this1) {
	return this1;
};
var stx_assert__$Compare_CompareSum = $hxEnums["stx.assert._Compare.CompareSum"] = { __ename__:"stx.assert._Compare.CompareSum",__constructs__:null
	,Value: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Value",$_.__params__ = ["v"],$_)
	,And: ($_=function(l,r) { return {_hx_index:1,l:l,r:r,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="And",$_.__params__ = ["l","r"],$_)
	,Or: ($_=function(l,r) { return {_hx_index:2,l:l,r:r,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Or",$_.__params__ = ["l","r"],$_)
	,Not: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Not",$_.__params__ = ["e"],$_)
	,Binop: ($_=function(l,op,r) { return {_hx_index:4,l:l,op:op,r:r,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Binop",$_.__params__ = ["l","op","r"],$_)
};
stx_assert__$Compare_CompareSum.__constructs__ = [stx_assert__$Compare_CompareSum.Value,stx_assert__$Compare_CompareSum.And,stx_assert__$Compare_CompareSum.Or,stx_assert__$Compare_CompareSum.Not,stx_assert__$Compare_CompareSum.Binop];
var stx_assert_EqApi = function() { };
stx_assert_EqApi.__name__ = "stx.assert.EqApi";
stx_assert_EqApi.__isInterface__ = true;
stx_assert_EqApi.prototype = {
	applyII: null
	,__class__: stx_assert_EqApi
};
var stx_assert_Eq = {};
stx_assert_Eq._new = function(self) {
	return self;
};
stx_assert_Eq.toAssertion = function(this1,pos) {
	return new stx_assert_eq_term_EqAssertion(this1,pos);
};
stx_assert_Eq.Int = function() {
	return new stx_assert_eq_term_Int();
};
stx_assert_Eq.String = function() {
	return new stx_assert_eq_term_String();
};
stx_assert_Eq.Couple = function(l,r) {
	return new stx_assert_eq_term_Couple(l,r);
};
stx_assert_Eq.Anon = function(fn) {
	return new stx_assert_eq_term_Anon(fn);
};
stx_assert_Eq.Noise = function() {
	return stx_assert_Eq._new(new stx_assert_eq_term_Noise());
};
stx_assert_Eq.Bool = function() {
	return stx_assert_Eq.Anon(function(l,r) {
		if(l == r) {
			return true;
		} else {
			return false;
		}
	});
};
stx_assert_Eq.Float = function() {
	return stx_assert_Eq.Anon(function(l,r) {
		if(l == r) {
			return true;
		} else {
			return false;
		}
	});
};
stx_assert_Eq.Array = function(inner) {
	return new stx_assert_eq_term_Array(inner);
};
stx_assert_Eq.Primitive = function() {
	return new stx_assert_eq_term_Primitive();
};
stx_assert_Eq.Option = function(inner) {
	return new stx_assert_eq_term_Option(inner);
};
var stx_assert_Equal = function() { };
stx_assert_Equal.__name__ = "stx.assert.Equal";
stx_assert_Equal.getEqualFor = function(v) {
	return stx_assert_Equal.getEqualForType(Type.typeof(v));
};
stx_assert_Equal.getEqualForType = function(v) {
	var tmp;
	switch(v._hx_index) {
	case 0:
		tmp = new stx_assert_eq_term_Null();
		break;
	case 1:
		tmp = new stx_assert_eq_term_Int();
		break;
	case 2:
		tmp = new stx_assert_eq_term_Float();
		break;
	case 3:
		tmp = new stx_assert_eq_term_Bool();
		break;
	case 4:
		tmp = new stx_assert_eq_term_Object();
		break;
	case 5:
		tmp = new stx_assert_eq_term_Function();
		break;
	case 6:
		var _g = v.c;
		tmp = _g == haxe_ds_StringMap ? new stx_assert_eq_term_Map(new stx_assert_eq_term_Deferred()) : _g == stx_assert_eq_term_Array ? new stx_assert_eq_term_Array(new stx_assert_eq_term_Deferred()) : _g == stx_assert_eq_term_Date ? new stx_assert_eq_term_Date() : _g == stx_assert_eq_term_String ? new stx_assert_eq_term_String() : HxOverrides.remove(Type.getInstanceFields(_g),"equals") ? new stx_assert_eq_term_HasFunction().elide() : new stx_assert_eq_term_UnsupportedClass();
		break;
	case 7:
		tmp = new stx_assert_eq_term_Enum();
		break;
	case 8:
		tmp = new stx_assert_eq_term_Unknown();
		break;
	}
	return new stx_assert_eq_term_NotNull(tmp);
};
var stx_assert_Equalable = {};
stx_assert_Equalable._new = function(self) {
	return self;
};
var stx_assert_EqualedSum = {};
stx_assert_EqualedSum.ok = function(this1) {
	return this1;
};
stx_assert_EqualedSum.and = function(this1,that) {
	return stx_assert_Equaled.fromBool(this1 && stx_assert_EqualedSum.ok(that));
};
var stx_assert_Equaled = {};
stx_assert_Equaled.fromBool = function(b) {
	if(b) {
		return stx_assert_Equaled.AreEqual;
	} else {
		return stx_assert_Equaled.NotEqual;
	}
};
stx_assert_Equaled.and = function(this1,that) {
	return stx_assert_Equaled.fromBool(stx_assert_Equaled.toBool(this1) && stx_assert_Equaled.toBool(that));
};
stx_assert_Equaled.toBool = function(this1) {
	if(this1) {
		return true;
	} else {
		return false;
	}
};
stx_assert_Equaled.or = function(this1,that) {
	return stx_assert_Equaled.fromBool(stx_assert_Equaled.toBool(this1) || stx_assert_Equaled.toBool(that));
};
stx_assert_Equaled.not = function(this1) {
	if(this1) {
		return false;
	} else {
		return true;
	}
};
var stx_assert_Module = function(pos) {
	stx_pico_Clazz.call(this);
	this.pos = pos;
};
stx_assert_Module.__name__ = "stx.assert.Module";
stx_assert_Module.__super__ = stx_pico_Clazz;
stx_assert_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	pos: null
	,equals: function() {
		return stx_assert_Assertion.equals(this.pos);
	}
	,alike: function() {
		return stx_assert_Assertion.alike(this.pos);
	}
	,gt: function() {
		return stx_assert_Assertion.gt(this.pos);
	}
	,gt_eq: function() {
		return stx_assert_Assertion.gt_eq(this.pos);
	}
	,lt: function() {
		return stx_assert_Assertion.lt(this.pos);
	}
	,lt_eq: function() {
		return stx_assert_Assertion.lt_eq(this.pos);
	}
	,always: function() {
		return stx_assert_Predicate.always(this.pos);
	}
	,never: function() {
		return stx_assert_Predicate.never(this.pos);
	}
	,iz: function(clazz) {
		return stx_assert_Predicate.iz(this.pos,clazz);
	}
	,throws: function() {
		return stx_assert_Predicate.throws(this.pos);
	}
	,'void': function() {
		return stx_assert_Predicate.void(this.pos);
	}
	,exists: function() {
		return stx_assert_Predicate.exists(this.pos);
	}
	,matches: function(reg,opt) {
		return stx_assert_Predicate.matches(this.pos,reg,opt);
	}
	,ands: function(self,rest) {
		return stx_assert_Predicate._.ands(self,rest);
	}
	,ors: function(self,rest) {
		return stx_assert_Predicate._.ors(self,rest);
	}
	,and: function(self,that) {
		return stx_assert_Predicate._.and(self,that);
	}
	,or: function(self,that) {
		return stx_assert_Predicate._.or(self,that);
	}
	,xor: function(self,that) {
		return stx_assert_Predicate._.xor(self,that);
	}
	,not: function(self) {
		return stx_assert_Predicate._.not(self);
	}
	,__class__: stx_assert_Module
});
var stx_assert_OrdApi = function() { };
stx_assert_OrdApi.__name__ = "stx.assert.OrdApi";
stx_assert_OrdApi.__isInterface__ = true;
stx_assert_OrdApi.prototype = {
	applyII: null
	,__class__: stx_assert_OrdApi
};
var stx_assert_Ord = {};
stx_assert_Ord._new = function(self) {
	return self;
};
stx_assert_Ord.toAssertion = function(this1) {
	return new stx_assert_ord_term_OrdAssertion(this1,{ fileName : "stx/assert/Ord.hx", lineNumber : 22, className : "stx.assert._Ord.Ord_Impl_", methodName : "toAssertion"}).asAssertionApi();
};
stx_assert_Ord.Int = function() {
	return new stx_assert_ord_term_Int();
};
stx_assert_Ord.Float = function() {
	return new stx_assert_ord_term_Float();
};
stx_assert_Ord.String = function() {
	return new stx_assert_ord_term_String();
};
stx_assert_Ord.Couple = function(l,r) {
	return new stx_assert_ord_term_Couple(l,r);
};
stx_assert_Ord.Anon = function(fn) {
	return new stx_assert_ord_term_Anon(fn);
};
stx_assert_Ord.Bool = function() {
	return stx_assert_Ord.Anon(function(lhs,rhs) {
		if(lhs == rhs) {
			return false;
		} else if(lhs == false) {
			return true;
		} else {
			return false;
		}
	});
};
stx_assert_Ord.Primitive = function() {
	return new stx_assert_ord_term_Primitive();
};
stx_assert_Ord.Array = function(inner) {
	return new stx_assert_ord_term_Array(inner);
};
stx_assert_Ord.Option = function(inner) {
	return new stx_assert_ord_term_Option(inner);
};
var stx_assert_Orderable = {};
stx_assert_Orderable._new = function(self) {
	return self;
};
var stx_assert_OrderedSum = {};
stx_assert_OrderedSum.ok = function(this1) {
	return this1;
};
var stx_assert_Ordered = {};
stx_assert_Ordered._new = function(self) {
	return self;
};
stx_assert_Ordered.fromBool = function(b) {
	if(b) {
		return true;
	} else {
		return false;
	}
};
stx_assert_Ordered.toBool = function(this1) {
	if(this1) {
		return true;
	} else {
		return false;
	}
};
stx_assert_Ordered.or = function(this1,that) {
	return stx_assert_Ordered.fromBool(stx_assert_Ordered.toBool(this1) || stx_assert_Ordered.toBool(that));
};
stx_assert_Ordered.not = function(this1) {
	if(this1) {
		return false;
	} else {
		return true;
	}
};
stx_assert_Ordered.and = function(this1,that) {
	return stx_assert_Ordered.fromBool(stx_assert_Ordered.toBool(this1) && stx_assert_Ordered.toBool(that));
};
var stx_assert_PredicateLift = function() { };
stx_assert_PredicateLift.__name__ = "stx.assert.PredicateLift";
stx_assert_PredicateLift.ands = function(self,rest) {
	return Lambda.fold(rest,function(next,memo) {
		return new stx_assert_predicate_term_And(memo,next,{ fileName : "stx/assert/Predicate.hx", lineNumber : 81, className : "stx.assert.PredicateLift", methodName : "ands"});
	},self);
};
stx_assert_PredicateLift.ors = function(self,rest) {
	return Lambda.fold(rest,function(next,memo) {
		return new stx_assert_predicate_term_Or(memo,next,{ fileName : "stx/assert/Predicate.hx", lineNumber : 90, className : "stx.assert.PredicateLift", methodName : "ors"});
	},self);
};
stx_assert_PredicateLift.and = function(self,that) {
	return new stx_assert_predicate_term_And(self,that,{ fileName : "stx/assert/Predicate.hx", lineNumber : 98, className : "stx.assert.PredicateLift", methodName : "and"});
};
stx_assert_PredicateLift.or = function(self,that) {
	return new stx_assert_predicate_term_Or(self,that,{ fileName : "stx/assert/Predicate.hx", lineNumber : 105, className : "stx.assert.PredicateLift", methodName : "or"});
};
stx_assert_PredicateLift.xor = function(self,that) {
	return new stx_assert_predicate_term_XOr(self,that,{ fileName : "stx/assert/Predicate.hx", lineNumber : 111, className : "stx.assert.PredicateLift", methodName : "xor"});
};
stx_assert_PredicateLift.not = function(self) {
	return new stx_assert_predicate_term_Not(self,{ fileName : "stx/assert/Predicate.hx", lineNumber : 117, className : "stx.assert.PredicateLift", methodName : "not"});
};
stx_assert_PredicateLift.errata = function(self,fn) {
	return new stx_assert_predicate_term_Transform(self,fn,{ fileName : "stx/assert/Predicate.hx", lineNumber : 121, className : "stx.assert.PredicateLift", methodName : "errata"});
};
var stx_assert_Predicate = {};
stx_assert_Predicate._new = function(v) {
	return v;
};
stx_assert_Predicate.Natural = function(method,pos) {
	return new stx_assert_predicate_term_Natural(method,pos);
};
stx_assert_Predicate.NaturalReport = function(method,e,pos) {
	return new stx_assert_predicate_term_NaturalReport(method,e,pos);
};
stx_assert_Predicate.Anon = function(method) {
	return new stx_assert_predicate_term_Anon(method);
};
stx_assert_Predicate.unit = function() {
	return new stx_assert_predicate_term_Always({ fileName : "stx/assert/Predicate.hx", lineNumber : 25, className : "stx.assert._Predicate.Predicate_Impl_", methodName : "unit"});
};
stx_assert_Predicate.always = function(pos) {
	return new stx_assert_predicate_term_Always({ fileName : "stx/assert/Predicate.hx", lineNumber : 29, className : "stx.assert._Predicate.Predicate_Impl_", methodName : "always"});
};
stx_assert_Predicate.never = function(pos) {
	return new stx_assert_predicate_term_Never(pos);
};
stx_assert_Predicate.iz = function(pos,clazz) {
	return new stx_assert_predicate_term_Is(clazz,pos);
};
stx_assert_Predicate.throws = function(pos) {
	return new stx_assert_predicate_term_Throws(pos);
};
stx_assert_Predicate.void = function(pos) {
	return new stx_assert_predicate_term_Void(pos);
};
stx_assert_Predicate.exists = function(pos) {
	return new stx_assert_predicate_term_Exists(pos);
};
stx_assert_Predicate.matches = function(pos,reg,opt) {
	return new stx_assert_predicate_term_Matches(pos,reg,opt,{ fileName : "stx/assert/Predicate.hx", lineNumber : 47, className : "stx.assert._Predicate.Predicate_Impl_", methodName : "matches"});
};
stx_assert_Predicate.ordef = function(this1,l,r) {
	if(stx_pico_OptionLift.is_defined(this1.applyI(l))) {
		return r;
	} else {
		return l;
	}
};
stx_assert_Predicate.fudge = function(this1,v) {
	var _g = stx_nano_Report.prj(this1.applyI(v));
	switch(_g._hx_index) {
	case 0:
		throw haxe_Exception.thrown(_g.v);
	case 1:
		return v;
	}
};
stx_assert_Predicate.ok = function(this1) {
	return stx_fn_UnaryLift.then(stx_LiftUnary.fn($bind(this1,this1.applyI)),function(report) {
		return stx_nano_Report.ok(report);
	});
};
stx_assert_Predicate.bindI = function(this1,v) {
	var _g = $bind(this1,this1.applyI);
	var p = v;
	return function() {
		return _g(p);
	};
};
stx_assert_Predicate.check = function(this1) {
	return function(x) {
		return this1.applyI(x) == stx_nano_Report.fromStdOption(haxe_ds_Option.None);
	};
};
stx_assert_Predicate.crunch = function(this1,v) {
	var _g = stx_nano_Report.prj(this1.applyI(v));
	if(_g._hx_index == 0) {
		throw haxe_Exception.thrown(_g.v);
	}
};
var stx_assert_assertion_term_Base = function(pos) {
	stx_pico_Clazz.call(this);
	this.pos = pos;
};
stx_assert_assertion_term_Base.__name__ = "stx.assert.assertion.term.Base";
stx_assert_assertion_term_Base.__interfaces__ = [stx_assert_AssertionApi];
stx_assert_assertion_term_Base.__super__ = stx_pico_Clazz;
stx_assert_assertion_term_Base.prototype = $extend(stx_pico_Clazz.prototype,{
	pos: null
	,applyII: function(a,b) {
		return stx_nano_Report.unit();
	}
	,error: function(l,r,pos) {
		return stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos),stx_fail_AssertFailure.PredicateFailed(this.definition(),l,r));
	}
	,asAssertionApi: function() {
		return this;
	}
	,__class__: stx_assert_assertion_term_Base
});
var stx_assert_assertion_term_Alike = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
stx_assert_assertion_term_Alike.__name__ = "stx.assert.assertion.term.Alike";
stx_assert_assertion_term_Alike.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_Alike.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		return stx_LiftAssert.report(Type.enumIndex(a) == Type.enumIndex(b),this.error(null,null,{ fileName : "stx/assert/assertion/term/Alike.hx", lineNumber : 8, className : "stx.assert.assertion.term.Alike", methodName : "applyII"}));
	}
	,__class__: stx_assert_assertion_term_Alike
});
var stx_assert_assertion_term_Equals = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
stx_assert_assertion_term_Equals.__name__ = "stx.assert.assertion.term.Equals";
stx_assert_assertion_term_Equals.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_Equals.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		return stx_LiftAssert.report(a != b,this.error(null,null,{ fileName : "stx/assert/assertion/term/Equals.hx", lineNumber : 9, className : "stx.assert.assertion.term.Equals", methodName : "applyII"}));
	}
	,__class__: stx_assert_assertion_term_Equals
});
var stx_assert_assertion_term_GreaterThan = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
stx_assert_assertion_term_GreaterThan.__name__ = "stx.assert.assertion.term.GreaterThan";
stx_assert_assertion_term_GreaterThan.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_GreaterThan.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		return stx_LiftAssert.report(a > b,this.error(null,null,{ fileName : "stx/assert/assertion/term/GreaterThan.hx", lineNumber : 11, className : "stx.assert.assertion.term.GreaterThan", methodName : "applyII"}));
	}
	,__class__: stx_assert_assertion_term_GreaterThan
});
var stx_assert_assertion_term_GreaterThanOrEquals = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
stx_assert_assertion_term_GreaterThanOrEquals.__name__ = "stx.assert.assertion.term.GreaterThanOrEquals";
stx_assert_assertion_term_GreaterThanOrEquals.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_GreaterThanOrEquals.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		return stx_LiftAssert.report(a >= b,this.error(null,null,{ fileName : "stx/assert/assertion/term/GreaterThanOrEquals.hx", lineNumber : 11, className : "stx.assert.assertion.term.GreaterThanOrEquals", methodName : "applyII"}));
	}
	,__class__: stx_assert_assertion_term_GreaterThanOrEquals
});
var stx_assert_assertion_term_LessThan = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
stx_assert_assertion_term_LessThan.__name__ = "stx.assert.assertion.term.LessThan";
stx_assert_assertion_term_LessThan.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_LessThan.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		return stx_LiftAssert.report(a < b,this.error(null,null,{ fileName : "stx/assert/assertion/term/LessThan.hx", lineNumber : 10, className : "stx.assert.assertion.term.LessThan", methodName : "applyII"}));
	}
	,__class__: stx_assert_assertion_term_LessThan
});
var stx_assert_assertion_term_LessThanOrEquals = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
stx_assert_assertion_term_LessThanOrEquals.__name__ = "stx.assert.assertion.term.LessThanOrEquals";
stx_assert_assertion_term_LessThanOrEquals.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_LessThanOrEquals.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		return stx_LiftAssert.report(a <= b,this.error(null,null,{ fileName : "stx/assert/assertion/term/LessThanOrEquals.hx", lineNumber : 10, className : "stx.assert.assertion.term.LessThanOrEquals", methodName : "applyII"}));
	}
	,__class__: stx_assert_assertion_term_LessThanOrEquals
});
var stx_assert_comparable_term_Anon = function(_eq,_lt) {
	this._eq = _eq;
	this._lt = _lt;
};
stx_assert_comparable_term_Anon.__name__ = "stx.assert.comparable.term.Anon";
stx_assert_comparable_term_Anon.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_comparable_term_Anon.prototype = {
	_eq: null
	,_lt: null
	,eq: function() {
		return this._eq;
	}
	,lt: function() {
		return this._lt;
	}
	,__class__: stx_assert_comparable_term_Anon
};
var stx_assert_comparable_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
stx_assert_comparable_term_Couple.__name__ = "stx.assert.comparable.term.Couple";
stx_assert_comparable_term_Couple.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_comparable_term_Couple.prototype = {
	l: null
	,r: null
	,eq: function() {
		return stx_assert_Eq.Couple(this.l.eq(),this.r.eq());
	}
	,lt: function() {
		return stx_assert_Ord.Couple(this.l.lt(),this.r.lt());
	}
	,__class__: stx_assert_comparable_term_Couple
};
var stx_assert_comparable_term_Int = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_comparable_term_Int.__name__ = "stx.assert.comparable.term.Int";
stx_assert_comparable_term_Int.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_comparable_term_Int.__super__ = stx_pico_Clazz;
stx_assert_comparable_term_Int.prototype = $extend(stx_pico_Clazz.prototype,{
	eq: function() {
		return stx_assert_Eq.Int();
	}
	,lt: function() {
		return stx_assert_Ord.Int();
	}
	,__class__: stx_assert_comparable_term_Int
});
var stx_assert_comparable_term_Primitive = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_comparable_term_Primitive.__name__ = "stx.assert.comparable.term.Primitive";
stx_assert_comparable_term_Primitive.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_comparable_term_Primitive.__super__ = stx_pico_Clazz;
stx_assert_comparable_term_Primitive.prototype = $extend(stx_pico_Clazz.prototype,{
	eq: function() {
		return stx_assert_Eq.Primitive();
	}
	,lt: function() {
		return stx_assert_Ord.Primitive();
	}
	,__class__: stx_assert_comparable_term_Primitive
});
var stx_assert_comparable_term_String = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_comparable_term_String.__name__ = "stx.assert.comparable.term.String";
stx_assert_comparable_term_String.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_comparable_term_String.__super__ = stx_pico_Clazz;
stx_assert_comparable_term_String.prototype = $extend(stx_pico_Clazz.prototype,{
	eq: function() {
		return stx_assert_Eq.String();
	}
	,lt: function() {
		return stx_assert_Ord.String();
	}
	,__class__: stx_assert_comparable_term_String
});
var stx_assert_eq_term_Anon = function(self) {
	this.delegate = self;
};
stx_assert_eq_term_Anon.__name__ = "stx.assert.eq.term.Anon";
stx_assert_eq_term_Anon.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Anon.prototype = {
	delegate: null
	,applyII: function(lhs,rhs) {
		return this.delegate(lhs,rhs);
	}
	,__class__: stx_assert_eq_term_Anon
};
var stx_assert_eq_term_Array = function(inner) {
	this.inner = inner;
};
stx_assert_eq_term_Array.__name__ = "stx.assert.eq.term.Array";
stx_assert_eq_term_Array.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Array.prototype = {
	inner: null
	,applyII: function(a,b) {
		var ok = true;
		if(a.length != b.length) {
			return false;
		}
		var _g = 0;
		var _g1 = a.length - 1;
		while(_g < _g1) {
			var i = _g++;
			ok = this.inner.applyII(a[i],b[i]);
			if(!stx_assert_EqualedSum.ok(ok)) {
				break;
			}
		}
		return ok;
	}
	,__class__: stx_assert_eq_term_Array
};
var stx_assert_eq_term_Bool = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_Bool.__name__ = "stx.assert.eq.term.Bool";
stx_assert_eq_term_Bool.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Bool.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Bool.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Bool
});
var stx_assert_eq_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
stx_assert_eq_term_Couple.__name__ = "stx.assert.eq.term.Couple";
stx_assert_eq_term_Couple.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Couple.prototype = {
	l: null
	,r: null
	,applyII: function(a,b) {
		var _gthis = this;
		return stx_nano_CoupleLift.decouple(a,function(l0,r0) {
			return stx_nano_CoupleLift.decouple(b,function(l1,r1) {
				return stx_assert_Equaled.and(_gthis.l.applyII(l0,l1),_gthis.r.applyII(r0,r1));
			});
		});
	}
	,__class__: stx_assert_eq_term_Couple
};
var stx_assert_eq_term_Date = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_Date.__name__ = "stx.assert.eq.term.Date";
stx_assert_eq_term_Date.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Date.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Date.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(a.getTime() == b.getTime()) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Date
});
var stx_assert_eq_term_Deferred = function() {
};
stx_assert_eq_term_Deferred.__name__ = "stx.assert.eq.term.Deferred";
stx_assert_eq_term_Deferred.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Deferred.prototype = {
	eq: null
	,applyII: function(a,b) {
		if(this.eq == null) {
			if(a == null) {
				this.eq = stx_assert_Equal.getEqualFor(a);
			} else {
				this.eq = stx_assert_Equal.getEqualFor(b);
			}
		}
		return this.eq.applyII(a,b);
	}
	,__class__: stx_assert_eq_term_Deferred
};
var stx_assert_eq_term_Enum = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_Enum.__name__ = "stx.assert.eq.term.Enum";
stx_assert_eq_term_Enum.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Enum.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Enum.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(0 != Type.enumIndex(a) - Type.enumIndex(b)) {
			return false;
		} else {
			var pa = Type.enumParameters(a);
			var pb = Type.enumParameters(b);
			var b = true;
			var _g = 0;
			var _g1 = pa.length;
			while(_g < _g1) {
				var i = _g++;
				if(!stx_assert_EqualedSum.ok(stx_assert_Equal.getEqualFor(pa[i]).applyII(a[i],pb[i]))) {
					b = false;
					break;
				}
			}
			return b;
		}
	}
	,__class__: stx_assert_eq_term_Enum
});
var stx_assert_eq_term_EqAssertion = function(eq,pos) {
	stx_assert_assertion_term_Base.call(this,pos);
	this.eq = eq;
};
stx_assert_eq_term_EqAssertion.__name__ = "stx.assert.eq.term.EqAssertion";
stx_assert_eq_term_EqAssertion.__super__ = stx_assert_assertion_term_Base;
stx_assert_eq_term_EqAssertion.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	eq: null
	,applyII: function(a,b) {
		return stx_LiftAssert.report(stx_assert_Equaled.toBool(this.eq.applyII(a,b)),stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.pos),stx_fail_AssertFailure.PredicateFailed(this.definition(),a,b)));
	}
	,__class__: stx_assert_eq_term_EqAssertion
});
var stx_assert_eq_term_Float = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_Float.__name__ = "stx.assert.eq.term.Float";
stx_assert_eq_term_Float.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Float.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Float.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Float
});
var stx_assert_eq_term_Function = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_Function.__name__ = "stx.assert.eq.term.Function";
stx_assert_eq_term_Function.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Function.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Function.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(Reflect.compareMethods(a,b)) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Function
});
var stx_assert_eq_term_HasFunction = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_HasFunction.__name__ = "stx.assert.eq.term.HasFunction";
stx_assert_eq_term_HasFunction.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_HasFunction.__super__ = stx_pico_Clazz;
stx_assert_eq_term_HasFunction.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(a.equals(b)) {
			return true;
		} else {
			return false;
		}
	}
	,elide: function() {
		return this;
	}
	,__class__: stx_assert_eq_term_HasFunction
});
var stx_assert_eq_term_Int = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_Int.__name__ = "stx.assert.eq.term.Int";
stx_assert_eq_term_Int.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Int.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Int.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Int
});
var stx_assert_eq_term_Map = function(eq) {
	this.eq = eq;
};
stx_assert_eq_term_Map.__name__ = "stx.assert.eq.term.Map";
stx_assert_eq_term_Map.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Map.prototype = {
	eq: null
	,applyII: function(a,b) {
		var ok = true;
		var _g = $keyValueIterator(haxe_ds_Map)(a);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var val = _g1.value;
			if(!haxe_ds_Map.exists(b,key)) {
				break;
			}
			ok = stx_assert_Equaled.toBool(this.eq.applyII(val,haxe_ds_Map.get(b,key)));
			if(!ok) {
				break;
			}
		}
		var _g = $keyValueIterator(haxe_ds_Map)(b);
		while(_g.hasNext()) if(!haxe_ds_Map.exists(a,_g.next().key)) {
			break;
		}
		if(ok) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Map
};
var stx_assert_eq_term_Noise = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_Noise.__name__ = "stx.assert.eq.term.Noise";
stx_assert_eq_term_Noise.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Noise.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Noise.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		return stx_assert_Equaled.AreEqual;
	}
	,__class__: stx_assert_eq_term_Noise
});
var stx_assert_eq_term_NotNull = function(eq) {
	this.eq = eq;
};
stx_assert_eq_term_NotNull.__name__ = "stx.assert.eq.term.NotNull";
stx_assert_eq_term_NotNull.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_NotNull.prototype = {
	eq: null
	,applyII: function(a,b) {
		if(a == null) {
			if(b == null) {
				return true;
			} else {
				return false;
			}
		} else if(b == null) {
			return false;
		} else {
			return this.eq.applyII(a,b);
		}
	}
	,__class__: stx_assert_eq_term_NotNull
};
var stx_assert_eq_term_Null = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_Null.__name__ = "stx.assert.eq.term.Null";
stx_assert_eq_term_Null.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Null.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Null.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(a == null && b == null) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Null
});
var stx_assert_eq_term_Object = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_Object.__name__ = "stx.assert.eq.term.Object";
stx_assert_eq_term_Object.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Object.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Object.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		var o = true;
		var _g = 0;
		var _g1 = Reflect.fields(a);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var va = Reflect.field(a,key);
			if(!stx_assert_EqualedSum.ok(stx_assert_Equal.getEqualFor(va).applyII(va,Reflect.field(b,key)))) {
				o = false;
				break;
			}
		}
		return o;
	}
	,__class__: stx_assert_eq_term_Object
});
var stx_assert_eq_term_Option = function(eq) {
	this.eq = eq;
};
stx_assert_eq_term_Option.__name__ = "stx.assert.eq.term.Option";
stx_assert_eq_term_Option.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Option.prototype = {
	eq: null
	,applyII: function(a,b) {
		if(a._hx_index == 0) {
			if(b._hx_index == 0) {
				return this.eq.applyII(a.v,b.v);
			} else {
				return stx_assert_Equaled.fromBool(false);
			}
		} else {
			return stx_assert_Equaled.fromBool(false);
		}
	}
	,__class__: stx_assert_eq_term_Option
};
var stx_assert_eq_term_Primitive = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_Primitive.__name__ = "stx.assert.eq.term.Primitive";
stx_assert_eq_term_Primitive.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Primitive.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Primitive.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(lhs,rhs) {
		switch(lhs._hx_index) {
		case 0:
			if(rhs._hx_index == 0) {
				return true;
			} else if(Type.enumIndex(lhs) == Type.enumIndex(rhs)) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(rhs._hx_index == 1) {
				return stx_assert_Eq.Bool().applyII(lhs.b,rhs.b);
			} else if(Type.enumIndex(lhs) == Type.enumIndex(rhs)) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:
			if(rhs._hx_index == 2) {
				return stx_assert_Eq.Int().applyII(lhs.int,rhs.int);
			} else if(Type.enumIndex(lhs) == Type.enumIndex(rhs)) {
				return true;
			} else {
				return false;
			}
			break;
		case 3:
			if(rhs._hx_index == 3) {
				return stx_assert_Eq.Float().applyII(lhs.fl,rhs.fl);
			} else if(Type.enumIndex(lhs) == Type.enumIndex(rhs)) {
				return true;
			} else {
				return false;
			}
			break;
		case 4:
			if(rhs._hx_index == 4) {
				return stx_assert_Eq.String().applyII(lhs.str,rhs.str);
			} else if(Type.enumIndex(lhs) == Type.enumIndex(rhs)) {
				return true;
			} else {
				return false;
			}
			break;
		}
	}
	,__class__: stx_assert_eq_term_Primitive
});
var stx_assert_eq_term_String = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_String.__name__ = "stx.assert.eq.term.String";
stx_assert_eq_term_String.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_String.__super__ = stx_pico_Clazz;
stx_assert_eq_term_String.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_String
});
var stx_assert_eq_term_Unknown = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_Unknown.__name__ = "stx.assert.eq.term.Unknown";
stx_assert_eq_term_Unknown.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Unknown.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Unknown.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(Reflect.hasField(a,"equals")) {
			return new stx_assert_eq_term_HasFunction().applyII(a,b);
		} else {
			return new stx_assert_eq_term_Object().applyII(a,b);
		}
	}
	,__class__: stx_assert_eq_term_Unknown
});
var stx_assert_eq_term_UnsupportedClass = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_eq_term_UnsupportedClass.__name__ = "stx.assert.eq.term.UnsupportedClass";
stx_assert_eq_term_UnsupportedClass.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_UnsupportedClass.__super__ = stx_pico_Clazz;
stx_assert_eq_term_UnsupportedClass.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		return stx_assert_Equaled.and(new stx_assert_eq_term_Object().applyII(a,b),Type.getClass(a) == Type.getClass(b) && true);
	}
	,__class__: stx_assert_eq_term_UnsupportedClass
});
var stx_assert_module_Crunch = function(pos) {
	stx_pico_Clazz.call(this);
	this.module = new stx_assert_Module(pos);
};
stx_assert_module_Crunch.__name__ = "stx.assert.module.Crunch";
stx_assert_module_Crunch.__super__ = stx_pico_Clazz;
stx_assert_module_Crunch.prototype = $extend(stx_pico_Clazz.prototype,{
	module: null
	,equals: function(lhs,rhs) {
		stx_assert_Assertion.crunchII(this.module.equals(),lhs,rhs);
	}
	,alike: function(lhs,rhs) {
		stx_assert_Assertion.crunchII(this.module.alike(),lhs,rhs);
	}
	,gt: function(lhs,rhs) {
		stx_assert_Assertion.crunchII(this.module.gt(),lhs,rhs);
	}
	,gt_eq: function(lhs,rhs) {
		stx_assert_Assertion.crunchII(this.module.gt_eq(),lhs,rhs);
	}
	,lt: function(lhs,rhs) {
		stx_assert_Assertion.crunchII(this.module.lt(),lhs,rhs);
	}
	,lt_eq: function(lhs,rhs) {
		stx_assert_Assertion.crunchII(this.module.lt_eq(),lhs,rhs);
	}
	,always: function(t) {
		stx_assert_Predicate.crunch(this.module.always(),t);
	}
	,never: function(t) {
		stx_assert_Predicate.crunch(this.module.never(),t);
	}
	,iz: function(a,clazz) {
		stx_assert_Predicate.crunch(this.module.iz(clazz),a);
	}
	,throws: function(fn) {
		stx_assert_Predicate.crunch(this.module.throws(),fn);
	}
	,'void': function(t) {
		stx_assert_Predicate.crunch(this.module.void(),t);
	}
	,exists: function(t) {
		stx_assert_Predicate.crunch(this.module.exists(),t);
	}
	,matches: function(string,reg,opt) {
		stx_assert_Predicate.crunch(this.module.matches(reg,opt),string);
	}
	,__class__: stx_assert_module_Crunch
});
var stx_assert_ord_term_Anon = function(delegate) {
	this.delegate = delegate;
};
stx_assert_ord_term_Anon.__name__ = "stx.assert.ord.term.Anon";
stx_assert_ord_term_Anon.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Anon.prototype = {
	delegate: null
	,applyII: function(lhs,rhs) {
		return this.delegate(lhs,rhs);
	}
	,__class__: stx_assert_ord_term_Anon
};
var stx_assert_ord_term_Array = function(inner) {
	this.inner = inner;
};
stx_assert_ord_term_Array.__name__ = "stx.assert.ord.term.Array";
stx_assert_ord_term_Array.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Array.prototype = {
	inner: null
	,applyII: function(v1,v2) {
		var n = v1.length - v2.length;
		if(n != 0) {
			if(n > 0) {
				return false;
			} else {
				return true;
			}
		} else if(v1.length == 0) {
			return false;
		} else {
			var v = false;
			var _g = 0;
			var _g1 = v1.length;
			while(_g < _g1) {
				var i = _g++;
				v = this.inner.applyII(v1[i],v2[i]);
				if(v == true) {
					break;
				}
			}
			return v;
		}
	}
	,__class__: stx_assert_ord_term_Array
};
var stx_assert_ord_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
stx_assert_ord_term_Couple.__name__ = "stx.assert.ord.term.Couple";
stx_assert_ord_term_Couple.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Couple.prototype = {
	l: null
	,r: null
	,applyII: function(a,b) {
		var _gthis = this;
		return stx_nano_CoupleLift.decouple(a,function(l0,r0) {
			return stx_nano_CoupleLift.decouple(b,function(l1,r1) {
				return stx_assert_Ordered.or(_gthis.l.applyII(l0,l1),_gthis.r.applyII(r0,r1));
			});
		});
	}
	,__class__: stx_assert_ord_term_Couple
};
var stx_assert_ord_term_Float = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_ord_term_Float.__name__ = "stx.assert.ord.term.Float";
stx_assert_ord_term_Float.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Float.__super__ = stx_pico_Clazz;
stx_assert_ord_term_Float.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(a < b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Float
});
var stx_assert_ord_term_Int = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_ord_term_Int.__name__ = "stx.assert.ord.term.Int";
stx_assert_ord_term_Int.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Int.__super__ = stx_pico_Clazz;
stx_assert_ord_term_Int.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(a < b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Int
});
var stx_assert_ord_term_Option = function(inner) {
	this.inner = inner;
};
stx_assert_ord_term_Option.__name__ = "stx.assert.ord.term.Option";
stx_assert_ord_term_Option.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Option.prototype = {
	inner: null
	,applyII: function(lhs,rhs) {
		var _gthis = this;
		return stx_pico_OptionLift.defv(stx_pico_OptionLift.map(stx_nano_lift_LiftOptionNano.zip(lhs,rhs),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(l,r) {
			return _gthis.inner.applyII(l,r);
		})),false);
	}
	,__class__: stx_assert_ord_term_Option
};
var stx_assert_ord_term_OrdAssertion = function(ord,pos) {
	stx_assert_assertion_term_Base.call(this,pos);
	this.ord = ord;
};
stx_assert_ord_term_OrdAssertion.__name__ = "stx.assert.ord.term.OrdAssertion";
stx_assert_ord_term_OrdAssertion.__super__ = stx_assert_assertion_term_Base;
stx_assert_ord_term_OrdAssertion.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	ord: null
	,applyII: function(a,b) {
		return stx_LiftAssert.report(stx_assert_Ordered.toBool(this.ord.applyII(a,b)),stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.pos),stx_fail_AssertFailure.PredicateFailed(this.definition(),a,b)));
	}
	,__class__: stx_assert_ord_term_OrdAssertion
});
var stx_assert_ord_term_Primitive = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_ord_term_Primitive.__name__ = "stx.assert.ord.term.Primitive";
stx_assert_ord_term_Primitive.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Primitive.__super__ = stx_pico_Clazz;
stx_assert_ord_term_Primitive.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(lhs,rhs) {
		switch(lhs._hx_index) {
		case 0:
			if(rhs._hx_index == 0) {
				return false;
			} else if(Type.enumIndex(lhs) < Type.enumIndex(rhs)) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(rhs._hx_index == 1) {
				return stx_assert_Ord.Bool().applyII(lhs.b,rhs.b);
			} else if(Type.enumIndex(lhs) < Type.enumIndex(rhs)) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:
			if(rhs._hx_index == 2) {
				return stx_assert_Ord.Int().applyII(lhs.int,rhs.int);
			} else if(Type.enumIndex(lhs) < Type.enumIndex(rhs)) {
				return true;
			} else {
				return false;
			}
			break;
		case 3:
			if(rhs._hx_index == 3) {
				return stx_assert_Ord.Float().applyII(lhs.fl,rhs.fl);
			} else if(Type.enumIndex(lhs) < Type.enumIndex(rhs)) {
				return true;
			} else {
				return false;
			}
			break;
		case 4:
			if(rhs._hx_index == 4) {
				return stx_assert_Ord.String().applyII(lhs.str,rhs.str);
			} else if(Type.enumIndex(lhs) < Type.enumIndex(rhs)) {
				return true;
			} else {
				return false;
			}
			break;
		}
	}
	,__class__: stx_assert_ord_term_Primitive
});
var stx_assert_ord_term_String = function() {
	stx_pico_Clazz.call(this);
};
stx_assert_ord_term_String.__name__ = "stx.assert.ord.term.String";
stx_assert_ord_term_String.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_String.__super__ = stx_pico_Clazz;
stx_assert_ord_term_String.prototype = $extend(stx_pico_Clazz.prototype,{
	applyII: function(a,b) {
		if(a < b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_String
});
var stx_assert_predicate_term_Open = function(pos) {
	this.pos = pos;
};
stx_assert_predicate_term_Open.__name__ = "stx.assert.predicate.term.Open";
stx_assert_predicate_term_Open.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_Open.prototype = {
	pos: null
	,get_pos: function() {
		return this.pos;
	}
	,applyI: function(v) {
		return stx_nano_Report.unit();
	}
	,error: function() {
		return stx_nano_Fault.empty(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.get_pos()));
	}
	,__class__: stx_assert_predicate_term_Open
	,__properties__: {get_pos:"get_pos"}
};
var stx_assert_predicate_term_Always = function(pos) {
	stx_assert_predicate_term_Open.call(this,pos);
};
stx_assert_predicate_term_Always.__name__ = "stx.assert.predicate.term.Always";
stx_assert_predicate_term_Always.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Always.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	applyI: function(v) {
		return stx_nano_Report.unit();
	}
	,__class__: stx_assert_predicate_term_Always
});
var stx_assert_predicate_term_And = function(l,r,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
stx_assert_predicate_term_And.__name__ = "stx.assert.predicate.term.And";
stx_assert_predicate_term_And.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_And.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	l: null
	,r: null
	,applyI: function(v) {
		var lr = this.l.applyI(v);
		var rr = stx_nano_Report._new(haxe_ds_Option.None);
		if(!stx_pico_OptionLift.is_defined(lr)) {
			rr = this.r.applyI(v);
		}
		return stx_nano_Report.merge(lr,rr);
	}
	,__class__: stx_assert_predicate_term_And
});
var stx_assert_predicate_term_Anon = function(delegate) {
	this.delegate = delegate;
};
stx_assert_predicate_term_Anon.__name__ = "stx.assert.predicate.term.Anon";
stx_assert_predicate_term_Anon.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_Anon.prototype = {
	delegate: null
	,applyI: function(p) {
		return this.delegate(p);
	}
	,__class__: stx_assert_predicate_term_Anon
};
var stx_assert_predicate_term_AssertionPredicate = function(delegate,data) {
	this.delegate = delegate;
	this.data = data;
};
stx_assert_predicate_term_AssertionPredicate.__name__ = "stx.assert.predicate.term.AssertionPredicate";
stx_assert_predicate_term_AssertionPredicate.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_AssertionPredicate.prototype = {
	delegate: null
	,data: null
	,applyI: function(v) {
		return stx_nano_Report.errata(this.delegate.applyII(this.data,v),function(x) {
			return x;
		});
	}
	,__class__: stx_assert_predicate_term_AssertionPredicate
};
var stx_assert_predicate_term_Base = function(pos) {
	stx_pico_Clazz.call(this);
	this.pos = pos;
};
stx_assert_predicate_term_Base.__name__ = "stx.assert.predicate.term.Base";
stx_assert_predicate_term_Base.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_Base.__super__ = stx_pico_Clazz;
stx_assert_predicate_term_Base.prototype = $extend(stx_pico_Clazz.prototype,{
	pos: null
	,applyI: function(v) {
		return stx_nano_Report.fromStdOption(haxe_ds_Option.None);
	}
	,error: function(l,r) {
		return stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.pos),stx_fail_AssertFailure.PredicateFailed(this.definition(),l,r));
	}
	,__class__: stx_assert_predicate_term_Base
});
var stx_assert_predicate_term_Exists = function(pos) {
	stx_assert_predicate_term_Base.call(this,pos);
};
stx_assert_predicate_term_Exists.__name__ = "stx.assert.predicate.term.Exists";
stx_assert_predicate_term_Exists.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Exists.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	applyI: function(v) {
		return stx_LiftAssert.report(stx_pico_OptionLift.defv(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,v),function(_) {
			return true;
		}),false),this.error());
	}
	,__class__: stx_assert_predicate_term_Exists
});
var stx_assert_predicate_term_Is = function(type,pos) {
	stx_assert_predicate_term_Base.call(this,pos);
	this.type = type;
};
stx_assert_predicate_term_Is.__name__ = "stx.assert.predicate.term.Is";
stx_assert_predicate_term_Is.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Is.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	type: null
	,applyI: function(v) {
		return stx_LiftAssert.report(Std.isOfType(v,this.type),stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/assert/predicate/term/Is.hx", lineNumber : 12, className : "stx.assert.predicate.term.Is", methodName : "applyI"}),stx_fail_AssertFailure.PredicateFailed(this.definition(),v)));
	}
	,__class__: stx_assert_predicate_term_Is
});
var stx_assert_predicate_term_Matches = function(fault,match,opt,pos) {
	if(opt == null) {
		opt = "g";
	}
	stx_assert_predicate_term_Base.call(this,pos);
	this.fault = fault;
	this.match = match;
	this.opt = opt;
};
stx_assert_predicate_term_Matches.__name__ = "stx.assert.predicate.term.Matches";
stx_assert_predicate_term_Matches.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Matches.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	fault: null
	,match: null
	,opt: null
	,applyI: function(v) {
		var err = this.error("~/" + this.match + "/" + this.opt,v);
		var ereg = new EReg(this.match,this.opt);
		ereg.match(v);
		return stx_LiftAssert.report(ereg.matched(0) == null,err);
	}
	,__class__: stx_assert_predicate_term_Matches
});
var stx_assert_predicate_term_Natural = function(method,pos) {
	this.method = method;
	stx_assert_predicate_term_Base.call(this,pos);
};
stx_assert_predicate_term_Natural.__name__ = "stx.assert.predicate.term.Natural";
stx_assert_predicate_term_Natural.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Natural.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	method: null
	,applyI: function(v) {
		if(this.method(v)) {
			return stx_nano_Report.unit();
		} else {
			return stx_pico_Option.fromNullT(this.error());
		}
	}
	,__class__: stx_assert_predicate_term_Natural
});
var stx_assert_predicate_term_NaturalReport = function(delegate,report,pos) {
	this.delegate = delegate;
	this.report = report;
	this.pos = pos;
};
stx_assert_predicate_term_NaturalReport.__name__ = "stx.assert.predicate.term.NaturalReport";
stx_assert_predicate_term_NaturalReport.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_NaturalReport.prototype = {
	pos: null
	,report: null
	,delegate: null
	,applyI: function(p) {
		var _gthis = this;
		return stx_LiftIf.if_else(this.delegate(p),stx_nano_Report.unit,function() {
			return stx_pico_Option.fromNullT(stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,_gthis.pos),_gthis.report));
		});
	}
	,__class__: stx_assert_predicate_term_NaturalReport
};
var stx_assert_predicate_term_Never = function(pos) {
	stx_assert_predicate_term_Open.call(this,pos);
};
stx_assert_predicate_term_Never.__name__ = "stx.assert.predicate.term.Never";
stx_assert_predicate_term_Never.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Never.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	applyI: function(v) {
		return stx_nano_Report.pure(this.error());
	}
	,__class__: stx_assert_predicate_term_Never
});
var stx_assert_predicate_term_Not = function(predicate,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.predicate = predicate;
};
stx_assert_predicate_term_Not.__name__ = "stx.assert.predicate.term.Not";
stx_assert_predicate_term_Not.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Not.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	predicate: null
	,applyI: function(v) {
		return stx_LiftAssert.report(stx_pico_OptionLift.fold(this.predicate.applyI(v),function(c) {
			return true;
		},function() {
			return false;
		}),this.error());
	}
	,__class__: stx_assert_predicate_term_Not
});
var stx_assert_predicate_term_Or = function(l,r,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
stx_assert_predicate_term_Or.__name__ = "stx.assert.predicate.term.Or";
stx_assert_predicate_term_Or.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Or.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	l: null
	,r: null
	,applyI: function(v) {
		var resI = this.l.applyI(v);
		var resII = this.r.applyI(v);
		if(stx_pico_OptionLift.is_defined(resI) && stx_pico_OptionLift.is_defined(resII)) {
			return stx_nano_Report.merge(resI,resII);
		} else {
			return stx_nano_Report.unit();
		}
	}
	,__class__: stx_assert_predicate_term_Or
});
var stx_assert_predicate_term_Throws = function(pos) {
	stx_assert_predicate_term_Base.call(this,pos);
};
stx_assert_predicate_term_Throws.__name__ = "stx.assert.predicate.term.Throws";
stx_assert_predicate_term_Throws.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Throws.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	applyI: function(block) {
		try {
			block();
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			return stx_nano_Report.unit();
		}
		return stx_nano_Report.pure(this.error());
	}
	,__class__: stx_assert_predicate_term_Throws
});
var stx_assert_predicate_term_Transform = function(delegate,transform,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.transform = transform;
	this.delegate = delegate;
};
stx_assert_predicate_term_Transform.__name__ = "stx.assert.predicate.term.Transform";
stx_assert_predicate_term_Transform.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Transform.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	transform: null
	,delegate: null
	,applyI: function(v) {
		return stx_nano_Report.errata(this.delegate.applyI(v),this.transform);
	}
	,__class__: stx_assert_predicate_term_Transform
});
var stx_assert_predicate_term_Void = function(pos) {
	stx_assert_predicate_term_Base.call(this,pos);
};
stx_assert_predicate_term_Void.__name__ = "stx.assert.predicate.term.Void";
stx_assert_predicate_term_Void.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Void.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	applyI: function(v) {
		return stx_LiftAssert.report(v == null,this.error());
	}
	,__class__: stx_assert_predicate_term_Void
});
var stx_assert_predicate_term_XOr = function(l,r,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
stx_assert_predicate_term_XOr.__name__ = "stx.assert.predicate.term.XOr";
stx_assert_predicate_term_XOr.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_XOr.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	l: null
	,r: null
	,applyI: function(v) {
		var lr = this.l.applyI(v);
		var rr = this.r.applyI(v);
		return stx_LiftAssert.report(!stx_pico_OptionLift.is_defined(lr) && !stx_pico_OptionLift.is_defined(rr),this.error());
	}
	,__class__: stx_assert_predicate_term_XOr
});
var stx_async_Counter = function() { };
stx_async_Counter.__name__ = "stx.async.Counter";
stx_async_Counter.next = function() {
	return stx_async_Counter.val++;
};
var stx_async_GoalStatusLift = function() { };
stx_async_GoalStatusLift.__name__ = "stx.async.GoalStatusLift";
stx_async_GoalStatusLift.is_partial = function(self) {
	switch(self) {
	case 0:case 2:case 3:
		return true;
	default:
		return false;
	}
};
stx_async_GoalStatusLift.toString = function(self) {
	switch(self) {
	case -1:
		return "Problem";
	case 0:
		return "Pending";
	case 1:
		return "Applied";
	case 2:
		return "Working";
	case 3:
		return "Waiting";
	case 4:
		return "Secured";
	}
};
var stx_async_Hook = function() { };
stx_async_Hook.__name__ = "stx.async.Hook";
stx_async_Hook.__properties__ = {get_loops:"get_loops",set_initialized:"set_initialized",get_initialized:"get_initialized"};
stx_async_Hook.get_initialized = function() {
	if(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_async_Hook.initialized))) {
		return stx_async_Hook.initialized;
	} else {
		return stx_async_Hook.set_initialized(false);
	}
};
stx_async_Hook.set_initialized = function(b) {
	return stx_async_Hook.initialized = b;
};
stx_async_Hook.get_loops = function() {
	if(stx_async_Hook.loops == null) {
		return stx_async_Hook.loops = [];
	} else {
		return stx_async_Hook.loops;
	}
};
stx_async_Hook.notify = function(loop) {
	stx_async_Hook.get_loops().push(loop);
	stx_async_Hook.initialize();
};
stx_async_Hook.initialize = function() {
	if(stx_async_Hook.get_initialized() == false) {
		stx_async_Hook.set_initialized(true);
		stx_async_Hook.initializing();
	} else {
		stx_async_Hook.initializer(function() {
		});
	}
};
stx_async_Hook.initializing = function() {
	var event = null;
	var canceller = function() {
		event.stop();
	};
	event = haxe_MainLoop.add(function() {
		stx_async_Hook.initializer(canceller);
	});
};
stx_async_Hook.initializer = function(canceller) {
	var _g = 0;
	var _g1 = stx_async_Hook.get_loops();
	while(_g < _g1.length) _g1[_g++].ignition(stx_async_HookTag._new());
	canceller();
};
var stx_async_HookTag = {};
stx_async_HookTag._new = function() {
	return null;
};
function stx_async_Hook_log(wildcard) {
	return stx_Log.tag(stx_async_Log.log(stx_nano_Wildcard.__),stx_nano_PositionLift.identifier(stx_LiftPos.lift(stx_nano_lift_LiftNano.here(stx_nano_Wildcard.__,{ fileName : "stx/async/Hook.hx", lineNumber : 5, className : "stx.async._Hook.Hook_Fields_", methodName : "log"}))));
}
var stx_async_Log = function() { };
stx_async_Log.__name__ = "stx.async.Log";
stx_async_Log.log = function(wildcard) {
	return stx_Log.tag(stx_Log._new(),"stx.async");
};
var stx_async_LogicalClock = function() { };
stx_async_LogicalClock.__name__ = "stx.async.LogicalClock";
stx_async_LogicalClock.get = function() {
	var st = stx_async_TimeStamp.pure;
	if(stx_async_LogicalClock.previous == null) {
		return st({ realm : stx_async_LogicalClock.previous = haxe_Timer.stamp(), index : stx_async_LogicalClock.counter, exact : ++stx_async_LogicalClock.lifetime});
	} else {
		var stamp = haxe_Timer.stamp();
		if(stamp == stx_async_LogicalClock.previous) {
			return st({ realm : stamp, index : stx_async_LogicalClock.counter++, exact : ++stx_async_LogicalClock.lifetime});
		} else {
			stx_async_LogicalClock.previous = stamp;
			stx_async_LogicalClock.counter = 0;
			return st({ realm : stamp, index : stx_async_LogicalClock.counter, exact : ++stx_async_LogicalClock.lifetime});
		}
	}
};
var stx_async_LoopApi = function() { };
stx_async_LoopApi.__name__ = "stx.async.LoopApi";
stx_async_LoopApi.__isInterface__ = true;
stx_async_LoopApi.prototype = {
	suspended: null
	,threads: null
	,add: null
	,fail: null
	,exit: null
	,initialize: null
	,ignition: null
	,__class__: stx_async_LoopApi
};
var stx_async_LoopCls = function() {
	this.suspended = [];
	this.threads = new haxe_ds_List();
	this.initialized = false;
};
stx_async_LoopCls.__name__ = "stx.async.LoopCls";
stx_async_LoopCls.__interfaces__ = [stx_async_LoopApi];
stx_async_LoopCls.prototype = {
	initialized: null
	,initialize: function() {
		if(!this.initialized) {
			this.initialized = true;
			stx_async_Hook.notify(this);
		}
	}
	,suspended: null
	,threads: null
	,add: function(work) {
		this.initialize();
		this.threads.add(work);
	}
	,fail: function(error) {
		throw haxe_Exception.thrown(error);
	}
	,exit: function() {
	}
	,reply: function() {
		var _gthis = this;
		var next = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.threads.pop());
		if(stx_pico_OptionLift.is_defined(next)) {
			var work = $iterator(stx_pico_OptionLift)(next);
			while(work.hasNext()) {
				var work1 = [work.next()];
				try {
					work1[0].pursue();
				} catch( _g ) {
					haxe_NativeStackTrace.saveStack(_g);
					var _g1 = haxe_Exception.caught(_g).unwrap();
					this.fail(_g1);
					break;
				}
				if(!work1[0].get_loaded()) {
					switch(work1[0].get_status()) {
					case -1:
						throw haxe_Exception.thrown(work1[0].get_defect());
					case 0:
						this.threads.push(work1[0]);
						break;
					case 1:
						throw haxe_Exception.thrown("`Applied` tasks should always only take one `pursue` call to resolve");
					case 2:
						this.threads.push(work1[0]);
						break;
					case 3:
						this.suspended.push(work1[0]);
						tink_core_Future.handle(tink_core_Signal.nextTime(work1[0].get_signal()),(function(work) {
							return function(_) {
								HxOverrides.remove(_gthis.suspended,work[0]);
								_gthis.threads.push(work[0]);
							};
						})(work1));
						break;
					case 4:
						break;
					}
				}
			}
			return true;
		} else if(this.suspended.length > 0) {
			return true;
		} else {
			return false;
		}
	}
	,ignition: null
	,toString: function() {
		return "" + stx_pico_Identifier.get_name(stx_nano_lift_LiftNano.identifier(stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,this))) + "(initialized:" + Std.string(this.initialized) + ",suspended:" + Std.string(this.suspended) + ",threads:" + Std.string(this.threads) + ")";
	}
	,__class__: stx_async_LoopCls
};
var stx_async_loop_term_Event = function() {
	stx_async_LoopCls.call(this);
};
stx_async_loop_term_Event.__name__ = "stx.async.loop.term.Event";
stx_async_loop_term_Event.__super__ = stx_async_LoopCls;
stx_async_loop_term_Event.prototype = $extend(stx_async_LoopCls.prototype,{
	tick: null
	,add: function(work) {
		stx_async_LoopCls.prototype.add.call(this,work);
	}
	,rec: function() {
		if(!this.reply() && this.tick != null) {
			this.tick.stop();
			this.exit();
		}
	}
	,ignition: function(v) {
		if(this.tick == null) {
			this.tick = haxe_MainLoop.add($bind(this,this.rec));
		}
	}
	,__class__: stx_async_loop_term_Event
});
var stx_async_Loop = {};
stx_async_Loop.Event = function() {
	return new stx_async_loop_term_Event();
};
function stx_async_Loop_log(wildcard) {
	return stx_Log.tag(stx_async_Log.log(stx_nano_Wildcard.__),"stx.async.Loop");
}
var stx_async_TaskLift = function() { };
stx_async_TaskLift.__name__ = "stx.async.TaskLift";
stx_async_TaskLift.outcome = function(self) {
	return stx_pico_OptionLift.def(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,self.get_defect()),function(e) {
		return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,e);
	}),function() {
		return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,self.get_result());
	});
};
stx_async_TaskLift.map = function(self,fn) {
	return stx_async_Task.Map(self,fn);
};
stx_async_TaskLift.flat_map = function(self,fn) {
	return stx_async_Task.AnonFlatMap(self,fn,{ fileName : "stx/async/Task.hx", lineNumber : 60, className : "stx.async.TaskLift", methodName : "flat_map"});
};
var stx_async_Task = {};
stx_async_Task.lift = function(self) {
	return stx_async_Task._new(self);
};
stx_async_Task._new = function(self) {
	return self;
};
stx_async_Task.AnonFlatMap = function(self,flat_map,pos) {
	return new stx_async_task_term_AnonFlatMap(self,flat_map,pos);
};
stx_async_Task.ThroughBind = function(self,through_bind) {
	return new stx_async_task_term_AnonThroughBind(self,through_bind);
};
stx_async_Task.Handler = function(self,fn) {
	return new stx_async_task_term_Handler(self,fn);
};
stx_async_Task.FutureOutcome = function(self,pos) {
	return new stx_async_task_term_FutureOutcome(self,pos);
};
stx_async_Task.Later = function(self) {
	return stx_async_Task.lift(new stx_async_task_term_Later(self));
};
stx_async_Task.Thunk = function(self) {
	return stx_async_Task.lift(new stx_async_task_term_Thunk(self));
};
stx_async_Task.Pause = function(work,task) {
	return stx_async_Task.lift(new stx_async_task_term_Pause(work,task,{ fileName : "stx/async/Task.hx", lineNumber : 31, className : "stx.async._Task.Task_Impl_", methodName : "Pause"}));
};
stx_async_Task.After = function(task,work) {
	return stx_async_Task.lift(new stx_async_task_term_After(task,work,{ fileName : "stx/async/Task.hx", lineNumber : 34, className : "stx.async._Task.Task_Impl_", methodName : "After"}));
};
stx_async_Task.Map = function(self,fn) {
	return stx_async_Task.lift(new stx_async_task_term_Map(self,fn));
};
stx_async_Task.Logging = function(self,logging,showing) {
	return stx_async_Task.lift(new stx_async_task_term_Logging(self,logging,showing,{ fileName : "stx/async/Task.hx", lineNumber : 40, className : "stx.async._Task.Task_Impl_", methodName : "Logging"}));
};
stx_async_Task.At = function(self,pos) {
	return stx_async_Task.lift(new stx_async_task_term_At(self,pos));
};
stx_async_Task.Pure = function(t,pos) {
	return new stx_async_task_term_Pure(t,pos);
};
stx_async_Task.Fail = function(e,pos) {
	return new stx_async_task_term_Fail(e,pos);
};
stx_async_Task.Par = function(self,that) {
	return new stx_async_task_term_Par(self,that);
};
stx_async_Task.Seq = function(self,that) {
	return new stx_async_task_term_Seq(self,that,{ fileName : "stx/async/Task.hx", lineNumber : 49, className : "stx.async._Task.Task_Impl_", methodName : "Seq"});
};
var stx_async_terminal_Api = function() { };
stx_async_terminal_Api.__name__ = "stx.async.terminal.Api";
stx_async_terminal_Api.__isInterface__ = true;
stx_async_terminal_Api.__interfaces__ = [stx_async_declared_Api];
stx_async_terminal_Api.prototype = {
	resolve: null
	,issue: null
	,value: null
	,error: null
	,later: null
	,lense: null
	,release: null
	,pause: null
	,joint: null
	,inner: null
	,toTerminalApi: null
	,toTask: null
	,toWork: null
	,toGoalApi: null
	,__class__: stx_async_terminal_Api
};
var stx_async_terminal_Cls = function(pos) {
	stx_async_goal_term_Direct.call(this,pos);
	this.set_status(0);
	this.dependent = new stx_async_task_term_DeferredDelegate(stx_async_Work.Unit().toTaskApi(),{ fileName : "stx/async/terminal/Cls.hx", lineNumber : 9, className : "stx.async.terminal.Cls", methodName : "new"});
	this.id = stx_async_Counter.next();
};
stx_async_terminal_Cls.__name__ = "stx.async.terminal.Cls";
stx_async_terminal_Cls.__interfaces__ = [stx_async_terminal_Api];
stx_async_terminal_Cls.__super__ = stx_async_goal_term_Direct;
stx_async_terminal_Cls.prototype = $extend(stx_async_goal_term_Direct.prototype,{
	dependent: null
	,resolve: function(receiver) {
		return stx_async_terminal_Receiver.lift(stx_async_Task.After(stx_async_terminal_Receiver.prj(receiver),this.toWork({ fileName : "stx/async/terminal/Cls.hx", lineNumber : 14, className : "stx.async.terminal.Cls", methodName : "resolve"})).toTaskApi());
	}
	,issue: function(res,pos) {
		var _g = $bind(this,this.value);
		var pos1 = pos;
		var _g1 = $bind(this,this.error);
		var pos2 = pos;
		return this.resolve(stx_pico_OutcomeLift.fold(res,function(r) {
			return _g(r,pos1);
		},function(e) {
			return _g1(e,pos2);
		}));
	}
	,value: function(r,pos) {
		return this.resolve(stx_async_terminal_Receiver.lift(stx_async_Task.Pure(r,pos)));
	}
	,error: function(e,pos) {
		return this.resolve(stx_async_terminal_Receiver.lift(stx_async_Task.Fail(e,pos)));
	}
	,later: function(ft,pos) {
		return this.resolve(stx_async_terminal_Receiver.lift(stx_async_Task.FutureOutcome(ft,pos)));
	}
	,lense: function(t,pos) {
		return this.resolve(stx_async_terminal_Receiver.lift(stx_async_Task.At(t,pos)));
	}
	,release: function(term) {
		this.dependent.set_delegate(term.toTask());
		return new stx_async_terminal_term_Release(term,this.toWork({ fileName : "stx/async/terminal/Cls.hx", lineNumber : 37, className : "stx.async.terminal.Cls", methodName : "release"}),{ fileName : "stx/async/terminal/Cls.hx", lineNumber : 37, className : "stx.async.terminal.Cls", methodName : "release"});
	}
	,pause: function(work,pos) {
		return this.release(new stx_async_terminal_term_Pause(work,pos));
	}
	,inner: function(join,pos) {
		return this.release(new stx_async_terminal_term_Sub(join,pos));
	}
	,joint: function(joiner,pos) {
		return this.release(new stx_async_terminal_term_Joint(joiner,pos));
	}
	,toTerminalApi: function() {
		return this;
	}
	,toTask: function() {
		return stx_async_Task.lift(new stx_async_work_term_Goal(this.toGoalApi(),{ fileName : "stx/async/terminal/Cls.hx", lineNumber : 53, className : "stx.async.terminal.Cls", methodName : "toTask"}));
	}
	,toString: function() {
		return "" + stx_pico_Identifier.get_name(this.identifier()) + "[" + this.get_id() + ":" + stx_async_GoalStatusLift.toString(this.get_status()) + "]" + this.ident() + " [dependent: " + Std.string(this.dependent) + "]";
	}
	,ident: function() {
		return "(" + stx_nano_PositionLift.toString_name_method_line(stx_LiftPos.lift(this.pos)) + ")";
	}
	,get_status: function() {
		return this.dependent.get_status();
	}
	,get_result: function() {
		throw haxe_Exception.thrown("Terminal has no result");
	}
	,get_defect: function() {
		return stx_nano_Defect.entype(this.dependent.get_defect());
	}
	,pursue: function() {
		haxe_Log.trace("terminal.Cls.pursue " + this.dependent.get_status(),{ fileName : "stx/async/terminal/Cls.hx", lineNumber : 73, className : "stx.async.terminal.Cls", methodName : "pursue"});
		switch(this.dependent.get_status()) {
		case -1:
			break;
		case 0:
			this.dependent.pursue();
			break;
		case 1:
			this.dependent.pursue();
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		}
	}
	,escape: function() {
		this.dependent.escape();
	}
	,update: function() {
		this.dependent.update();
	}
	,get_signal: function() {
		return this.dependent.get_signal();
	}
	,toWork: function(pos) {
		return stx_async_Work.lift(new stx_async_work_term_Goal(this.toGoalApi(),pos));
	}
	,__class__: stx_async_terminal_Cls
});
var stx_async_work_term_Unit = function() {
	stx_async_task_Direct.call(this,{ fileName : "stx/async/work/term/Unit.hx", lineNumber : 5, className : "stx.async.work.term.Unit", methodName : "new"});
	this.set_result(null);
	this.loaded = true;
};
stx_async_work_term_Unit.__name__ = "stx.async.work.term.Unit";
stx_async_work_term_Unit.__super__ = stx_async_task_Direct;
stx_async_work_term_Unit.prototype = $extend(stx_async_task_Direct.prototype,{
	pursue: function() {
	}
	,get_status: function() {
		return 4;
	}
	,__class__: stx_async_work_term_Unit
});
var stx_async_Work = {};
stx_async_Work.lift = function(self) {
	return stx_async_Work._new(self);
};
stx_async_Work.unit = function() {
	return stx_async_Work.Unit();
};
stx_async_Work.Unit = function() {
	return new stx_async_work_term_Unit().toWork({ fileName : "stx/async/Work.hx", lineNumber : 18, className : "stx.async._Work.Work_Impl_", methodName : "Unit"});
};
stx_async_Work.At = function(delegate,pos) {
	return new stx_async_work_term_At(delegate,pos).toWork({ fileName : "stx/async/Work.hx", lineNumber : 21, className : "stx.async._Work.Work_Impl_", methodName : "At"});
};
stx_async_Work.Canceller = function(delegate,fn) {
	return new stx_async_work_term_Canceller(delegate,fn,{ fileName : "stx/async/Work.hx", lineNumber : 24, className : "stx.async._Work.Work_Impl_", methodName : "Canceller"}).toWork({ fileName : "stx/async/Work.hx", lineNumber : 24, className : "stx.async._Work.Work_Impl_", methodName : "Canceller"});
};
stx_async_Work.Delegate = function(delegate) {
	return new stx_async_work_term_Delegate(delegate,{ fileName : "stx/async/Work.hx", lineNumber : 27, className : "stx.async._Work.Work_Impl_", methodName : "Delegate"}).toWork({ fileName : "stx/async/Work.hx", lineNumber : 27, className : "stx.async._Work.Work_Impl_", methodName : "Delegate"});
};
stx_async_Work.Shim = function(delegate) {
	return new stx_async_work_term_Shim(delegate,{ fileName : "stx/async/Work.hx", lineNumber : 30, className : "stx.async._Work.Work_Impl_", methodName : "Shim"}).toWork({ fileName : "stx/async/Work.hx", lineNumber : 30, className : "stx.async._Work.Work_Impl_", methodName : "Shim"});
};
stx_async_Work.fromFutureWork = function(ft) {
	return stx_async_Task.Later(tink_core_Future.map(ft,function(work) {
		return work.toTaskApi();
	})).toWork({ fileName : "stx/async/Work.hx", lineNumber : 33, className : "stx.async._Work.Work_Impl_", methodName : "fromFutureWork"});
};
stx_async_Work.Stamp = function(outcome) {
	return new stx_async_work_term_Stamp(outcome);
};
stx_async_Work.fromFunXX = function(fn) {
	return stx_async_Work.lift(new stx_async_work_term_Block(fn));
};
stx_async_Work._new = function(self) {
	return self;
};
stx_async_Work.submit = function(this1,loop) {
	loop = stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,loop),stx_async_Loop.ZERO);
	if(this1 != null) {
		loop.add(this1);
	}
};
stx_async_Work.latch = function(this1) {
	return this1;
};
stx_async_Work.carrying = function(this1,oc) {
	return new stx_async_task_term_Pause(this1,new stx_async_task_term_Stamp(oc),{ fileName : "stx/async/Work.hx", lineNumber : 54, className : "stx.async._Work.Work_Impl_", methodName : "carrying"});
};
stx_async_Work.crunch = function(this1,loop) {
	stx_async_work_Crunch.apply(this1,loop);
};
var stx_async_goal_term_Delegate = function(pos) {
	stx_async_tick_Abs.call(this,pos);
};
stx_async_goal_term_Delegate.__name__ = "stx.async.goal.term.Delegate";
stx_async_goal_term_Delegate.__interfaces__ = [stx_async_goal_Api];
stx_async_goal_term_Delegate.__super__ = stx_async_tick_Abs;
stx_async_goal_term_Delegate.prototype = $extend(stx_async_tick_Abs.prototype,{
	loaded: null
	,get_loaded: null
	,get_status: null
	,toGoalApi: function() {
		return this;
	}
	,toString: null
	,__class__: stx_async_goal_term_Delegate
	,__properties__: $extend(stx_async_tick_Abs.prototype.__properties__,{get_loaded:"get_loaded"})
});
var stx_async_task_Delegate = function(pos) {
	stx_async_goal_term_Delegate.call(this,pos);
};
stx_async_task_Delegate.__name__ = "stx.async.task.Delegate";
stx_async_task_Delegate.__interfaces__ = [stx_async_task_Api];
stx_async_task_Delegate.__super__ = stx_async_goal_term_Delegate;
stx_async_task_Delegate.prototype = $extend(stx_async_goal_term_Delegate.prototype,{
	get_defect: null
	,get_result: null
	,toString: function() {
		return stx_async_task_Util.toString(this);
	}
	,toTaskApi: function() {
		return this;
	}
	,toWork: function(pos) {
		return this;
	}
	,__class__: stx_async_task_Delegate
});
var stx_async_task_term_Delegate = function(delegate,pos) {
	stx_async_task_Delegate.call(this,pos);
	this.set_delegate(delegate);
};
stx_async_task_term_Delegate.__name__ = "stx.async.task.term.Delegate";
stx_async_task_term_Delegate.__super__ = stx_async_task_Delegate;
stx_async_task_term_Delegate.prototype = $extend(stx_async_task_Delegate.prototype,{
	delegate: null
	,get_delegate: function() {
		return this.delegate;
	}
	,set_delegate: function(delegate) {
		return this.delegate = delegate;
	}
	,get_signal: function() {
		var _gthis = this;
		tink_core_Signal.handle(this.get_delegate().get_signal(),function(_) {
			_gthis.get_trigger().trigger(null);
		});
		return stx_async_task_Delegate.prototype.get_signal.call(this);
	}
	,get_defect: function() {
		return this.get_delegate().get_defect();
	}
	,get_result: function() {
		return this.get_delegate().get_result();
	}
	,get_status: null
	,pursue: function() {
		if(!this.get_loaded()) {
			this.get_delegate().pursue();
		}
	}
	,escape: function() {
		this.get_delegate().escape();
	}
	,update: function() {
		this.get_delegate().update();
	}
	,get_loaded: function() {
		return this.get_delegate().get_loaded();
	}
	,toString: function() {
		return "" + stx_pico_Identifier.get_name(this.identifier()) + "(" + Std.string(this.get_delegate()) + ")";
	}
	,__class__: stx_async_task_term_Delegate
	,__properties__: $extend(stx_async_task_Delegate.prototype.__properties__,{set_delegate:"set_delegate",get_delegate:"get_delegate"})
});
var stx_async_task_term_DeferredDelegate = function(delegate,pos) {
	stx_async_task_term_Delegate.call(this,delegate,pos);
};
stx_async_task_term_DeferredDelegate.__name__ = "stx.async.task.term.DeferredDelegate";
stx_async_task_term_DeferredDelegate.__super__ = stx_async_task_term_Delegate;
stx_async_task_term_DeferredDelegate.prototype = $extend(stx_async_task_term_Delegate.prototype,{
	get_status: function() {
		if(this.get_delegate() == null) {
			return 0;
		} else {
			return this.get_delegate().get_status();
		}
	}
	,pursue: function() {
		if(this.get_delegate() != null) {
			stx_async_task_term_Delegate.prototype.pursue.call(this);
		}
	}
	,is_defined: function() {
		return stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.get_delegate()));
	}
	,toString: function() {
		return "DDelegate(" + Std.string(this.get_delegate()) + ")";
	}
	,__class__: stx_async_task_term_DeferredDelegate
});
var stx_async_Terminal = {};
stx_async_Terminal.lift = function(self,pos) {
	return stx_async_Terminal._new(self,pos);
};
stx_async_Terminal._new = function(self,pos) {
	return stx_pico_OptionLift.def(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,self),function() {
		return new stx_async_terminal_Cls(pos);
	});
};
stx_async_Terminal.identifier = function() {
	return stx_nano_PositionLift.identifier(stx_LiftPos.lift(stx_nano_lift_LiftNano.here(stx_nano_Wildcard.__,{ fileName : "stx/async/Terminal.hx", lineNumber : 19, className : "stx.async._Terminal.Terminal_Impl_", methodName : "identifier"})));
};
stx_async_Terminal.Logging = function(terminal) {
	return new stx_async_terminal_term_Logging(terminal,{ fileName : "stx/async/Terminal.hx", lineNumber : 22, className : "stx.async._Terminal.Terminal_Impl_", methodName : "Logging"});
};
function stx_async_Terminal_log(wildcard) {
	return stx_Log.tag(stx_async_Log.log(stx_nano_Wildcard.__),stx_nano_PositionLift.identifier(stx_LiftPos.lift(stx_nano_lift_LiftNano.here(stx_nano_Wildcard.__,{ fileName : "stx/async/Terminal.hx", lineNumber : 8, className : "stx.async._Terminal.Terminal_Fields_", methodName : "log"}))));
}
var stx_async_TimeStamp = {};
stx_async_TimeStamp.__properties__ = {get_exact:"get_exact",get_index:"get_index",get_realm:"get_realm"};
stx_async_TimeStamp._new = function(self) {
	return self;
};
stx_async_TimeStamp.pure = function(v) {
	return stx_async_TimeStamp._new(v);
};
stx_async_TimeStamp.get_realm = function(this1) {
	return this1.realm;
};
stx_async_TimeStamp.get_index = function(this1) {
	return this1.index;
};
stx_async_TimeStamp.get_exact = function(this1) {
	return this1.exact;
};
stx_async_TimeStamp.lt = function(this1,that) {
	return this1.exact < stx_async_TimeStamp.get_exact(that);
};
stx_async_TimeStamp.eq = function(this1,that) {
	return this1.realm == stx_async_TimeStamp.get_realm(that);
};
var stx_async_Timer = {};
stx_async_Timer._new = function(self) {
	var this1;
	if(self == null) {
		this1 = stx_async_Timer.unit();
	} else {
		this1 = self;
	}
	return this1;
};
stx_async_Timer.pure = function(v) {
	return { created : v};
};
stx_async_Timer.unit = function() {
	return stx_async_Timer.pure(stx_async_Timer.mark());
};
stx_async_Timer.mark = function() {
	return haxe_Timer.stamp();
};
stx_async_Timer.copy = function(this1,created) {
	return stx_async_Timer.pure(created == null ? this1.created : created);
};
stx_async_Timer.start = function(this1) {
	return stx_async_Timer.copy(this1,stx_async_Timer.mark());
};
stx_async_Timer.since = function(this1) {
	return stx_async_Timer.mark() - this1.created;
};
stx_async_Timer.prj = function(this1) {
	return this1;
};
var stx_async_WorkLift = function() { };
stx_async_WorkLift.__name__ = "stx.async.WorkLift";
stx_async_WorkLift.seq = function(self,that) {
	if(self == null) {
		return that;
	} else if(that == null) {
		return null;
	} else {
		return stx_async_Task.Seq(self.toTaskApi(),that.toTaskApi()).toWork({ fileName : "stx/async/Work.hx", lineNumber : 60, className : "stx.async.WorkLift", methodName : "seq"});
	}
};
stx_async_WorkLift.par = function(self,that) {
	if(self == null) {
		return that;
	} else if(that == null) {
		return null;
	} else {
		return stx_async_Task.Par(self.toTaskApi(),that.toTaskApi()).toWork({ fileName : "stx/async/Work.hx", lineNumber : 63, className : "stx.async.WorkLift", methodName : "par"});
	}
};
var stx_async_goal_term_Delegated = function(delegate,pos) {
	stx_async_goal_term_Delegate.call(this,pos);
	this.delegate = delegate;
};
stx_async_goal_term_Delegated.__name__ = "stx.async.goal.term.Delegated";
stx_async_goal_term_Delegated.__super__ = stx_async_goal_term_Delegate;
stx_async_goal_term_Delegated.prototype = $extend(stx_async_goal_term_Delegate.prototype,{
	delegate: null
	,get_loaded: function() {
		return this.delegate.get_loaded();
	}
	,get_status: function() {
		return this.delegate.get_status();
	}
	,pursue: function() {
		this.delegate.pursue();
	}
	,escape: function() {
		this.delegate.escape();
	}
	,update: function() {
		this.delegate.update();
	}
	,toString: function() {
		if(this.delegate == null) {
			return "?";
		} else {
			return this.delegate.toString();
		}
	}
	,__class__: stx_async_goal_term_Delegated
});
var stx_async_goal_term_DeferredDelegated = function(delegate,pos) {
	stx_async_goal_term_Delegated.call(this,delegate,pos);
};
stx_async_goal_term_DeferredDelegated.__name__ = "stx.async.goal.term.DeferredDelegated";
stx_async_goal_term_DeferredDelegated.__super__ = stx_async_goal_term_Delegated;
stx_async_goal_term_DeferredDelegated.prototype = $extend(stx_async_goal_term_Delegated.prototype,{
	get_status: function() {
		var _gthis = this;
		return stx_nano_lift_LiftNano.if_else(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.delegate)),function() {
			return _gthis.delegate.get_status();
		},function() {
			return 0;
		});
	}
	,pursue: function() {
		if(this.delegate != null) {
			this.delegate.pursue();
		}
	}
	,escape: function() {
		if(this.delegate != null) {
			this.delegate.escape();
		}
	}
	,update: function() {
		if(this.delegate != null) {
			this.delegate.update();
		}
	}
	,__class__: stx_async_goal_term_DeferredDelegated
});
var stx_async_goal_term_Seq = function(lhs,rhs,pos) {
	stx_async_goal_term_Delegate.call(this,pos);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_async_goal_term_Seq.__name__ = "stx.async.goal.term.Seq";
stx_async_goal_term_Seq.__super__ = stx_async_goal_term_Delegate;
stx_async_goal_term_Seq.prototype = $extend(stx_async_goal_term_Delegate.prototype,{
	set_status: function(v) {
		return this.status = this.get_status();
	}
	,get_loaded: function() {
		if(this.lhs.get_loaded()) {
			return this.rhs.get_loaded();
		} else {
			return false;
		}
	}
	,get_status: function() {
		var l = this.lhs.get_status();
		var r = this.rhs.get_status();
		if(this.status == null) {
			if(l == 4) {
				return r;
			} else {
				return l;
			}
		} else if(l == 4) {
			if(r == 4) {
				return 4;
			} else {
				return this.status;
			}
		} else {
			return this.status;
		}
	}
	,status: null
	,lhs: null
	,rhs: null
	,sel: null
	,pursue: function() {
		var _gthis = this;
		if(!this.get_loaded()) {
			if(this.sel) {
				switch(this.rhs.get_status()) {
				case -1:
					break;
				case 0:
					this.rhs.pursue();
					break;
				case 1:
					this.loaded = true;
					this.set_status(4);
					break;
				case 2:
					break;
				case 3:
					if(!this.rhs.get_loaded()) {
						this.set_status(3);
						tink_core_Future.handle(tink_core_Signal.nextTime(this.rhs.get_signal()),function(_) {
							_gthis.get_trigger().trigger(null);
						});
					} else {
						this.set_status(4);
					}
					break;
				case 4:
					this.loaded = true;
					this.set_status(4);
					break;
				}
			} else {
				switch(this.lhs.get_status()) {
				case -1:
					break;
				case 0:
					this.lhs.pursue();
					break;
				case 1:
					this.sel = true;
					break;
				case 2:
					break;
				case 3:
					if(!this.lhs.get_loaded()) {
						this.set_status(3);
						tink_core_Future.handle(tink_core_Signal.nextTime(this.lhs.get_signal()),function(_) {
							_gthis.get_trigger().trigger(null);
						});
					} else {
						this.sel = true;
					}
					break;
				case 4:
					this.sel = true;
					break;
				}
			}
		}
	}
	,escape: function() {
		this.lhs.escape();
		this.rhs.escape();
	}
	,update: function() {
		this.lhs.update();
		this.rhs.update();
	}
	,toString: function() {
		return "goal.Seq(" + Std.string(this.lhs) + " " + Std.string(this.rhs) + ")";
	}
	,__class__: stx_async_goal_term_Seq
	,__properties__: $extend(stx_async_goal_term_Delegate.prototype.__properties__,{set_status:"set_status",get_status:"get_status"})
});
function stx_async_loop_term_Event_log(wildcard) {
	return stx_Log.tag(stx_async_Log.log(stx_nano_Wildcard.__),stx_nano_PositionLift.identifier(stx_nano_lift_LiftNano.toPosition(stx_nano_lift_LiftNano.here(stx_nano_Wildcard.__,{ fileName : "stx/async/loop/term/Event.hx", lineNumber : 6, className : "stx.async.loop.term._Event.Event_Fields_", methodName : "log"}))));
}
var stx_async_task_Util = function() { };
stx_async_task_Util.__name__ = "stx.async.task.Util";
stx_async_task_Util.toString = function(self) {
	return "" + stx_pico_Identifier.get_name(stx_nano_lift_LiftNano.identifier(stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,self))) + "[" + self.get_id() + ":" + stx_async_GoalStatusLift.toString(self.get_status()) + "]@(" + stx_nano_PositionLift.toString_name_method_line(stx_LiftPos.lift(self.pos)) + ")";
};
var stx_async_task_term_Delegation = function(delegation,pos) {
	stx_async_task_Delegate.call(this,pos);
	this.delegation = delegation;
};
stx_async_task_term_Delegation.__name__ = "stx.async.task.term.Delegation";
stx_async_task_term_Delegation.__super__ = stx_async_task_Delegate;
stx_async_task_term_Delegation.prototype = $extend(stx_async_task_Delegate.prototype,{
	delegation: null
	,__class__: stx_async_task_term_Delegation
});
var stx_async_task_term_Filter = function(delegation,pos) {
	stx_async_task_term_Delegation.call(this,delegation,pos);
};
stx_async_task_term_Filter.__name__ = "stx.async.task.term.Filter";
stx_async_task_term_Filter.__super__ = stx_async_task_term_Delegation;
stx_async_task_term_Filter.prototype = $extend(stx_async_task_term_Delegation.prototype,{
	filter: null
	,pursue: function() {
		this.delegation.pursue();
	}
	,escape: function() {
		this.delegation.escape();
	}
	,update: function() {
		this.delegation.update();
	}
	,get_loaded: function() {
		return this.delegation.get_loaded();
	}
	,get_status: function() {
		return this.delegation.get_status();
	}
	,get_result: function() {
		return this.filter(this.delegation.get_result());
	}
	,get_defect: function() {
		return this.delegation.get_defect();
	}
	,__class__: stx_async_task_term_Filter
});
var stx_async_task_term_After = function(next,work,pos) {
	stx_async_task_term_Filter.call(this,stx_async_Task.lift(new stx_async_task_term_Seq(next,stx_async_Work.latch(work),{ fileName : "stx/async/task/term/After.hx", lineNumber : 7, className : "stx.async.task.term.After", methodName : "new"}).toTaskApi()),pos);
};
stx_async_task_term_After.__name__ = "stx.async.task.term.After";
stx_async_task_term_After.__super__ = stx_async_task_term_Filter;
stx_async_task_term_After.prototype = $extend(stx_async_task_term_Filter.prototype,{
	filter: function(tp) {
		return stx_nano_CoupleLift.fst(tp);
	}
	,toString: function() {
		return "After:" + this.get_id() + "[" + stx_async_GoalStatusLift.toString(this.get_status()) + "](" + this.delegation.toString() + ")";
	}
	,__class__: stx_async_task_term_After
});
var stx_async_task_term_FlatMap = function(deferred,pos) {
	stx_async_task_Direct.call(this,pos);
	this.deferred = deferred;
};
stx_async_task_term_FlatMap.__name__ = "stx.async.task.term.FlatMap";
stx_async_task_term_FlatMap.__super__ = stx_async_task_Direct;
stx_async_task_term_FlatMap.prototype = $extend(stx_async_task_Direct.prototype,{
	deferred: null
	,further: null
	,flat_map: null
	,pursue: function() {
		var _gthis = this;
		if(!stx_lift_ArrayLift.is_defined(this.get_defect()) && !this.get_loaded()) {
			if(this.further == null) {
				switch(this.deferred.get_status()) {
				case -1:
					this.status = -1;
					break;
				case 0:
					this.deferred.pursue();
					break;
				case 1:case 4:
					this.deferred.pursue();
					this.further = this.flat_map(this.deferred.get_result());
					this.status = 0;
					break;
				case 3:
					this.status = 3;
					tink_core_Future.handle(tink_core_Signal.nextTime(this.deferred.get_signal()),function(_) {
						_gthis.get_trigger().trigger(null);
					});
					break;
				default:
				}
			} else if(!this.further.get_loaded()) {
				switch(this.further.get_status()) {
				case -1:
					this.status = -1;
					break;
				case 0:
					this.further.pursue();
					break;
				case 1:case 4:
					this.further.pursue();
					this.loaded = true;
					this.status = 4;
					break;
				case 2:
					break;
				case 3:
					stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/async/task/term/FlatMap.hx", lineNumber : 46, className : "stx.async.task.term.FlatMap", methodName : "pursue"}).exists(this.further.get_signal());
					this.status = 3;
					tink_core_Future.handle(tink_core_Signal.nextTime(this.further.get_signal()),function(_) {
						_gthis.get_trigger().trigger(null);
					});
					break;
				}
			} else {
				this.loaded = true;
				this.status = 4;
			}
		}
	}
	,update: function() {
		this.deferred.update();
		if(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.further))) {
			this.further.update();
		}
	}
	,toString: function() {
		return "FlatMap(" + Std.string(this.deferred) + " -> " + Std.string(this.further) + ")";
	}
	,get_defect: function() {
		return stx_nano_Defect.concat(this.deferred.get_defect(),stx_pico_OptionLift.def(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.further),function(_) {
			return _.get_defect();
		}),stx_nano_Defect.unit));
	}
	,get_result: function() {
		return stx_pico_OptionLift.defv(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.further),function(_) {
			return _.get_result();
		}),null);
	}
	,__class__: stx_async_task_term_FlatMap
});
var stx_async_task_term_AnonFlatMap = function(deferred,__flat_map,pos) {
	stx_async_task_term_FlatMap.call(this,deferred,pos);
	this.__flat_map = __flat_map;
};
stx_async_task_term_AnonFlatMap.__name__ = "stx.async.task.term.AnonFlatMap";
stx_async_task_term_AnonFlatMap.__super__ = stx_async_task_term_FlatMap;
stx_async_task_term_AnonFlatMap.prototype = $extend(stx_async_task_term_FlatMap.prototype,{
	__flat_map: function(t) {
		throw haxe_Exception.thrown("Constructor not called");
	}
	,flat_map: function(t) {
		return this.__flat_map(t);
	}
	,__class__: stx_async_task_term_AnonFlatMap
});
var stx_async_task_term_ThroughBind = function(delegate) {
	stx_async_task_Direct.call(this,{ fileName : "stx/async/task/term/ThroughBind.hx", lineNumber : 11, className : "stx.async.task.term.ThroughBind", methodName : "new"});
	this.delegate = delegate;
};
stx_async_task_term_ThroughBind.__name__ = "stx.async.task.term.ThroughBind";
stx_async_task_term_ThroughBind.__super__ = stx_async_task_Direct;
stx_async_task_term_ThroughBind.prototype = $extend(stx_async_task_Direct.prototype,{
	delegate: null
	,further: null
	,through_bind: null
	,pursue: function() {
		var _gthis = this;
		if(!stx_lift_ArrayLift.is_defined(this.get_defect()) && !this.get_loaded()) {
			if(this.further == null) {
				switch(this.delegate.get_status()) {
				case -1:
					this.status = -1;
					break;
				case 0:
					this.delegate.pursue();
					this.status = this.delegate.get_status();
					break;
				case 1:
					this.delegate.pursue();
					this.further = this.through_bind(stx_nano_lift_LiftNano.if_else(stx_lift_ArrayLift.is_defined(this.delegate.get_defect()),function() {
						return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,_gthis.delegate.get_defect());
					},function() {
						return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,_gthis.delegate.get_result());
					}));
					this.status = 0;
					break;
				case 3:
					this.status = 3;
					tink_core_Future.handle(tink_core_Signal.nextTime(this.delegate.get_signal()),function(_) {
						_gthis.get_trigger().trigger(null);
					});
					break;
				case 4:
					this.further = this.through_bind(stx_nano_lift_LiftNano.if_else(stx_lift_ArrayLift.is_defined(this.delegate.get_defect()),function() {
						return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,_gthis.delegate.get_defect());
					},function() {
						return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,_gthis.delegate.get_result());
					}));
					this.status = 0;
					break;
				default:
				}
			} else if(!this.further.get_loaded()) {
				switch(this.further.get_status()) {
				case -1:
					this.status = -1;
					break;
				case 0:
					this.further.pursue();
					break;
				case 1:
					this.further.pursue();
					this.status = 4;
					break;
				case 2:
					break;
				case 3:
					stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/async/task/term/ThroughBind.hx", lineNumber : 56, className : "stx.async.task.term.ThroughBind", methodName : "pursue"}).exists(this.further.get_signal());
					this.status = 3;
					tink_core_Future.handle(tink_core_Signal.nextTime(this.further.get_signal()),function(_) {
						_gthis.get_trigger().trigger(null);
					});
					break;
				case 4:
					this.status = 4;
					break;
				}
			} else {
				this.status = 4;
			}
		}
	}
	,toString: function() {
		return "ThroughBind:" + this.get_id() + "(" + Std.string(this.delegate) + ")";
	}
	,get_defect: function() {
		return stx_nano_Defect.concat(this.delegate.get_defect(),stx_pico_OptionLift.def(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.further),function(_) {
			return _.get_defect();
		}),stx_nano_Defect.unit));
	}
	,get_result: function() {
		return stx_pico_OptionLift.defv(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.further),function(_) {
			return _.get_result();
		}),null);
	}
	,__class__: stx_async_task_term_ThroughBind
});
var stx_async_task_term_AnonThroughBind = function(delegate,__through_bind) {
	stx_async_task_term_ThroughBind.call(this,delegate);
	this.__through_bind = __through_bind;
};
stx_async_task_term_AnonThroughBind.__name__ = "stx.async.task.term.AnonThroughBind";
stx_async_task_term_AnonThroughBind.__super__ = stx_async_task_term_ThroughBind;
stx_async_task_term_AnonThroughBind.prototype = $extend(stx_async_task_term_ThroughBind.prototype,{
	__through_bind: function(outcome) {
		return new stx_async_task_term_Fail([],{ fileName : "stx/async/task/term/AnonThroughBind.hx", lineNumber : 9, className : "stx.async.task.term.AnonThroughBind", methodName : "__through_bind"});
	}
	,through_bind: function(outcome) {
		return this.__through_bind(outcome);
	}
	,__class__: stx_async_task_term_AnonThroughBind
});
var stx_async_task_term_At = function(delegate,pos) {
	stx_async_task_term_Delegate.call(this,delegate,{ fileName : "stx/async/task/term/At.hx", lineNumber : 5, className : "stx.async.task.term.At", methodName : "new"});
	this.pos = pos;
};
stx_async_task_term_At.__name__ = "stx.async.task.term.At";
stx_async_task_term_At.__super__ = stx_async_task_term_Delegate;
stx_async_task_term_At.prototype = $extend(stx_async_task_term_Delegate.prototype,{
	get_status: function() {
		return this.get_delegate().get_status();
	}
	,__class__: stx_async_task_term_At
});
var stx_async_task_term_Fail = function(defect,pos) {
	stx_async_task_Direct.call(this,pos);
	this.set_defect(defect);
	this.status = -1;
};
stx_async_task_term_Fail.__name__ = "stx.async.task.term.Fail";
stx_async_task_term_Fail.__super__ = stx_async_task_Direct;
stx_async_task_term_Fail.prototype = $extend(stx_async_task_Direct.prototype,{
	__class__: stx_async_task_term_Fail
});
var stx_async_task_term_FutureOutcome = function(delegate,pos) {
	stx_async_task_Direct.call(this,pos);
	this.delegate = delegate;
	tink_core_Future.handle(this.delegate,$bind(this,this.handler));
	this.started = false;
	this.finished = false;
};
stx_async_task_term_FutureOutcome.__name__ = "stx.async.task.term.FutureOutcome";
stx_async_task_term_FutureOutcome.__super__ = stx_async_task_Direct;
stx_async_task_term_FutureOutcome.prototype = $extend(stx_async_task_Direct.prototype,{
	delegate: null
	,started: null
	,finished: null
	,handler: function(outcome) {
		var _gthis = this;
		this.finished = true;
		stx_pico_OutcomeLift.fold(outcome,function(ok) {
			_gthis.set_result(ok);
			_gthis.status = 4;
			_gthis.loaded = true;
			return null;
		},function(no) {
			_gthis.set_defect(no);
			_gthis.status = -1;
			return null;
		});
		this.get_trigger().trigger(null);
	}
	,pursue: function() {
		if(!this.started) {
			this.started = true;
			this.status = 2;
			tink_core_Future.handle(this.delegate,$bind(this,this.handler));
		} else if(this.get_status() == 2) {
			this.status = 3;
		}
	}
	,toString: function() {
		var tmp = "FutureOutcome:" + this.get_id() + "(" + Std.string(this.started) + " " + Std.string(this.finished) + " " + stx_async_GoalStatusLift.toString(this.get_status()) + ") ";
		var tmp1 = stx_nano_lift_LiftNano.toPosition(this.pos);
		return tmp + (tmp1 == null ? "null" : stx_nano_Position.toString(tmp1));
	}
	,__class__: stx_async_task_term_FutureOutcome
});
var stx_async_task_term_Handler = function(delegate,handler) {
	stx_async_task_term_Delegate.call(this,delegate,{ fileName : "stx/async/task/term/Handler.hx", lineNumber : 7, className : "stx.async.task.term.Handler", methodName : "new"});
	this.set_delegate(delegate);
	this.handler = handler;
	this.called = false;
};
stx_async_task_term_Handler.__name__ = "stx.async.task.term.Handler";
stx_async_task_term_Handler.__super__ = stx_async_task_term_Delegate;
stx_async_task_term_Handler.prototype = $extend(stx_async_task_term_Delegate.prototype,{
	handler: null
	,called: null
	,handle: function(outcome) {
		if(!this.called) {
			this.called = true;
			this.handler(outcome);
		}
	}
	,pursue: function() {
		var _gthis = this;
		switch(this.get_status()) {
		case -1:
			this.handle(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,this.get_delegate().get_defect()));
			break;
		case 0:
			this.get_delegate().pursue();
			break;
		case 1:
			this.get_delegate().pursue();
			this.loaded = true;
			this.handle(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,this.get_result()));
			break;
		case 2:
			break;
		case 3:
			tink_core_Signal.handle(this.get_delegate().get_signal(),function(_) {
				_gthis.get_trigger().trigger(null);
			});
			break;
		case 4:
			this.loaded = true;
			this.handle(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,this.get_result()));
			break;
		}
	}
	,toString: function() {
		return "Handler(" + this.get_delegate().toString() + ")";
	}
	,get_status: function() {
		return this.get_delegate().get_status();
	}
	,__class__: stx_async_task_term_Handler
});
var stx_async_task_term_Later = function(delegate) {
	stx_async_task_Direct.call(this,{ fileName : "stx/async/task/term/Later.hx", lineNumber : 9, className : "stx.async.task.term.Later", methodName : "new"});
	this.delegate = delegate;
	this.started = false;
};
stx_async_task_term_Later.__name__ = "stx.async.task.term.Later";
stx_async_task_term_Later.__super__ = stx_async_task_Direct;
stx_async_task_term_Later.prototype = $extend(stx_async_task_Direct.prototype,{
	delegate: null
	,further: null
	,started: null
	,pursue: function() {
		var _gthis = this;
		if(!this.get_loaded() && !stx_lift_ArrayLift.is_defined(this.get_defect())) {
			if(!this.started) {
				this.started = true;
				tink_core_Future.handle(this.delegate,function(next) {
					_gthis.further = next;
				});
				if(this.further == null) {
					tink_core_Future.handle(this.delegate,function(next) {
						_gthis.get_trigger().trigger(null);
					});
				} else if(this.further.get_status() == 0) {
					this.further.pursue();
				}
			} else {
				if(this.further.get_status() == 0) {
					this.further.pursue();
				}
				this.status = this.further.get_status();
			}
		}
	}
	,toString: function() {
		return "Later(" + (this.further == null ? "?" : this.further.toString()) + ")";
	}
	,get_defect: function() {
		return stx_pico_OptionLift.def(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.further),function(_) {
			return _.get_defect();
		}),stx_nano_Defect.unit);
	}
	,get_result: function() {
		return stx_pico_OptionLift.defv(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.further),function(_) {
			return _.get_result();
		}),null);
	}
	,get_status: function() {
		if(this.started) {
			return stx_pico_OptionLift.defv(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.further),function(_) {
				return _.get_status();
			}),3);
		} else {
			return 0;
		}
	}
	,get_loaded: function() {
		return stx_pico_OptionLift.defv(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.further),function(_) {
			return _.get_loaded();
		}),false);
	}
	,__class__: stx_async_task_term_Later
});
var stx_async_task_term_Logging = function(delegate,logging,showing,pos) {
	stx_async_task_term_Delegate.call(this,delegate,pos);
	this.logging = stx_pico_OptionLift.def(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,logging),function() {
		return stx_async_Log.log(stx_nano_Wildcard.__);
	});
	this.showing = stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,showing),function(t) {
		return t.toString();
	});
};
stx_async_task_term_Logging.__name__ = "stx.async.task.term.Logging";
stx_async_task_term_Logging.__super__ = stx_async_task_term_Delegate;
stx_async_task_term_Logging.prototype = $extend(stx_async_task_term_Delegate.prototype,{
	logging: null
	,showing: null
	,pursue: function() {
		this.get_delegate().pursue();
	}
	,escape: function() {
		this.get_delegate().escape();
	}
	,toString: function() {
		return "Logging(" + Std.string(this.get_delegate()) + ")";
	}
	,get_status: function() {
		return this.get_delegate().get_status();
	}
	,__class__: stx_async_task_term_Logging
});
var stx_async_task_term_Map = function(delegate,transform) {
	stx_async_task_Direct.call(this,{ fileName : "stx/async/task/term/Map.hx", lineNumber : 8, className : "stx.async.task.term.Map", methodName : "new"});
	this.delegate = delegate;
	this.transform = transform;
};
stx_async_task_term_Map.__name__ = "stx.async.task.term.Map";
stx_async_task_term_Map.__super__ = stx_async_task_Direct;
stx_async_task_term_Map.prototype = $extend(stx_async_task_Direct.prototype,{
	delegate: null
	,transform: null
	,get_signal: function() {
		return this.delegate.get_signal();
	}
	,get_defect: function() {
		return this.delegate.get_defect();
	}
	,get_status: function() {
		return this.delegate.get_status();
	}
	,pursue: function() {
		this.delegate.pursue();
	}
	,escape: function() {
		this.delegate.pursue();
	}
	,update: function() {
		this.delegate.update();
	}
	,get_result: function() {
		return this.transform(this.delegate.get_result());
	}
	,__class__: stx_async_task_term_Map
});
var stx_async_task_term_Par = function(lhs,rhs) {
	stx_async_task_Direct.call(this,{ fileName : "stx/async/task/term/Par.hx", lineNumber : 8, className : "stx.async.task.term.Par", methodName : "new"});
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_async_task_term_Par.__name__ = "stx.async.task.term.Par";
stx_async_task_term_Par.__super__ = stx_async_task_Direct;
stx_async_task_term_Par.prototype = $extend(stx_async_task_Direct.prototype,{
	lhs: null
	,rhs: null
	,pursue: function() {
		var _gthis = this;
		if(!stx_lift_ArrayLift.is_defined(this.get_defect()) && !this.get_loaded()) {
			this.lhs.pursue();
			this.rhs.pursue();
			var _g = this.lhs.get_status();
			var _g1 = this.rhs.get_status();
			switch(_g) {
			case -1:
				this.set_defect(this.lhs.get_defect());
				this.status = -1;
				break;
			case 1:
				switch(_g1) {
				case -1:
					this.set_defect(this.rhs.get_defect());
					this.status = -1;
					break;
				case 1:
					this.status = 4;
					this.set_result(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.lhs.get_result(),this.rhs.get_result()));
					this.loaded = true;
					break;
				case 3:
					this.status = 3;
					tink_core_Future.handle(tink_core_Signal.nextTime(this.rhs.get_signal()),function(_) {
						_gthis.get_trigger().trigger(null);
					});
					break;
				default:
				}
				break;
			case 3:
				switch(_g1) {
				case -1:
					this.set_defect(this.rhs.get_defect());
					this.status = -1;
					break;
				case 3:
					this.status = 3;
					tink_core_Future.handle(tink_core_Future.merge(tink_core_Signal.nextTime(this.lhs.get_signal()),tink_core_Signal.nextTime(this.rhs.get_signal()),function(_,_1) {
						return null;
					}),function(_) {
						_gthis.get_trigger().trigger(null);
					});
					break;
				default:
					this.status = 3;
					tink_core_Future.handle(tink_core_Signal.nextTime(this.lhs.get_signal()),function(_) {
						_gthis.get_trigger().trigger(null);
					});
				}
				break;
			case 4:
				switch(_g1) {
				case -1:
					this.set_defect(this.rhs.get_defect());
					this.status = -1;
					break;
				case 3:
					this.status = 3;
					tink_core_Future.handle(tink_core_Signal.nextTime(this.rhs.get_signal()),function(_) {
						_gthis.get_trigger().trigger(null);
					});
					break;
				case 4:
					this.loaded = true;
					this.status = 4;
					this.set_result(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.lhs.get_result(),this.rhs.get_result()));
					break;
				default:
				}
				break;
			default:
				switch(_g1) {
				case -1:
					this.set_defect(this.rhs.get_defect());
					this.status = -1;
					break;
				case 3:
					this.status = 3;
					tink_core_Future.handle(tink_core_Signal.nextTime(this.rhs.get_signal()),function(_) {
						_gthis.get_trigger().trigger(null);
					});
					break;
				default:
				}
			}
		}
	}
	,__class__: stx_async_task_term_Par
});
var stx_async_task_term_Pause = function(work,next,pos) {
	stx_async_task_term_Filter.call(this,stx_async_Task.Seq(stx_async_Work.latch(work),next),pos);
};
stx_async_task_term_Pause.__name__ = "stx.async.task.term.Pause";
stx_async_task_term_Pause.__super__ = stx_async_task_term_Filter;
stx_async_task_term_Pause.prototype = $extend(stx_async_task_term_Filter.prototype,{
	filter: function(tp) {
		return stx_nano_CoupleLift.snd(tp);
	}
	,__class__: stx_async_task_term_Pause
});
var stx_async_task_term_Seq = function(lhs,rhs,pos) {
	stx_async_goal_term_Seq.call(this,lhs,rhs,pos);
	this.set_status(0);
	this.lhs_task = lhs;
	this.rhs_task = rhs;
	this.sel = false;
};
stx_async_task_term_Seq.__name__ = "stx.async.task.term.Seq";
stx_async_task_term_Seq.__interfaces__ = [stx_async_task_Api];
stx_async_task_term_Seq.__super__ = stx_async_goal_term_Seq;
stx_async_task_term_Seq.prototype = $extend(stx_async_goal_term_Seq.prototype,{
	lhs_task: null
	,rhs_task: null
	,pursue: function() {
		var _gthis = this;
		if(!stx_lift_ArrayLift.is_defined(this.get_defect()) && !this.get_loaded()) {
			if(this.sel) {
				switch(this.rhs.get_status()) {
				case 0:
					break;
				case 1:
					this.loaded = true;
					this.set_status(4);
					break;
				case 3:
					if(!this.rhs.get_loaded()) {
						this.set_status(3);
						tink_core_Future.handle(tink_core_Signal.nextTime(this.rhs.get_signal()),function(_) {
							_gthis.get_trigger().trigger(null);
						});
					} else {
						this.set_status(4);
					}
					break;
				case 4:
					this.loaded = true;
					this.set_status(4);
					break;
				default:
				}
			} else if(this.lhs.get_status() == 3) {
				if(!this.lhs.get_loaded()) {
					this.set_status(3);
					tink_core_Future.handle(tink_core_Signal.nextTime(this.lhs.get_signal()),function(_) {
						_gthis.get_trigger().trigger(null);
					});
				}
			}
		}
		stx_async_goal_term_Seq.prototype.pursue.call(this);
	}
	,toString: function() {
		var name = stx_pico_Identifier.get_name(this.identifier());
		var self_status = this.get_status() == null ? "<auto>" : "";
		return "task." + name + "[" + this.get_id() + ":" + self_status + stx_async_GoalStatusLift.toString(this.get_status()) + "](" + Std.string(this.sel) + " of " + Std.string(this.lhs) + " ==> " + Std.string(this.rhs) + ")";
	}
	,get_defect: function() {
		return stx_nano_Defect.concat(this.lhs_task.get_defect(),this.rhs_task.get_defect());
	}
	,get_result: function() {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this.lhs_task.get_result(),this.rhs_task.get_result());
	}
	,toWork: function(pos) {
		return this;
	}
	,toTaskApi: function() {
		return this;
	}
	,__class__: stx_async_task_term_Seq
});
var stx_async_task_term_Stamp = function(outcome) {
	stx_async_task_Delegate.call(this,{ fileName : "stx/async/task/term/Stamp.hx", lineNumber : 6, className : "stx.async.task.term.Stamp", methodName : "new"});
	this.delegate = outcome;
};
stx_async_task_term_Stamp.__name__ = "stx.async.task.term.Stamp";
stx_async_task_term_Stamp.__super__ = stx_async_task_Delegate;
stx_async_task_term_Stamp.prototype = $extend(stx_async_task_Delegate.prototype,{
	delegate: null
	,get_defect: function() {
		return stx_pico_OutcomeLift.fold(this.delegate,function(_) {
			return null;
		},function(e) {
			return e;
		});
	}
	,get_result: function() {
		return stx_pico_OutcomeLift.fold(this.delegate,function(r) {
			return r;
		},function(_) {
			return null;
		});
	}
	,toString: function() {
		return "Stamp(" + Std.string(this.delegate) + ")";
	}
	,get_loaded: function() {
		return true;
	}
	,get_status: function() {
		return 4;
	}
	,pursue: function() {
	}
	,escape: function() {
	}
	,update: function() {
	}
	,__class__: stx_async_task_term_Stamp
});
var stx_async_task_term_Thunk = function(delegate) {
	stx_async_task_Direct.call(this,{ fileName : "stx/async/task/term/Thunk.hx", lineNumber : 6, className : "stx.async.task.term.Thunk", methodName : "new"});
	this.delegate = delegate;
};
stx_async_task_term_Thunk.__name__ = "stx.async.task.term.Thunk";
stx_async_task_term_Thunk.__super__ = stx_async_task_Direct;
stx_async_task_term_Thunk.prototype = $extend(stx_async_task_Direct.prototype,{
	delegate: null
	,pursue: function() {
		this.set_result(this.delegate());
		this.status = 4;
		this.loaded = true;
	}
	,__class__: stx_async_task_term_Thunk
});
var stx_async_terminal_Receiver = {};
stx_async_terminal_Receiver.lift = function(self) {
	return stx_async_terminal_Receiver._new(self);
};
stx_async_terminal_Receiver._new = function(self) {
	return self;
};
stx_async_terminal_Receiver.after = function(this1,res) {
	return stx_async_WorkLift.seq(res,stx_async_terminal_Receiver.serve(stx_async_terminal_Receiver.lift(this1)));
};
stx_async_terminal_Receiver.listen = function(this1,fn) {
	return stx_async_terminal_Receiver.lift(stx_async_Task.Handler(this1,fn));
};
stx_async_terminal_Receiver.serve = function(this1) {
	return this1.toWork(this1.pos);
};
stx_async_terminal_Receiver.prj = function(this1) {
	return this1;
};
stx_async_terminal_Receiver.toString = function(this1) {
	return "Receiver(" + Std.string(this1) + ")";
};
var stx_async_terminal_Task = function(delegate,joiner,pos) {
	this.delegate = delegate;
	this.deferred = new stx_async_goal_term_DeferredDelegated(null,{ fileName : "stx/async/terminal/Task.hx", lineNumber : 22, className : "stx.async.terminal.Task", methodName : "new"});
	stx_async_goal_term_Seq.call(this,delegate,this.deferred,pos);
	this.joiner = joiner;
	this.state = false;
};
stx_async_terminal_Task.__name__ = "stx.async.terminal.Task";
stx_async_terminal_Task.__interfaces__ = [stx_async_task_Api];
stx_async_terminal_Task.__super__ = stx_async_goal_term_Seq;
stx_async_terminal_Task.prototype = $extend(stx_async_goal_term_Seq.prototype,{
	delegate: null
	,state: null
	,deferred: null
	,work: null
	,get_work: function() {
		return this.work;
	}
	,set_work: function(v) {
		var goal = v.toGoalApi();
		this.deferred.delegate = goal;
		return this.work = v;
	}
	,joiner: function(outcome) {
		return stx_async_Work.Unit();
	}
	,join: function(oc) {
		var _gthis = this;
		this.set_work(stx_pico_OutcomeLift.fold(oc,function(ok) {
			return _gthis.joiner(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,ok));
		},function(no) {
			return _gthis.joiner(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no));
		}));
	}
	,pursue: function() {
		var _gthis = this;
		haxe_Log.trace("terminal.Task.pursue()",{ fileName : "stx/async/terminal/Task.hx", lineNumber : 40, className : "stx.async.terminal.Task", methodName : "pursue"});
		stx_async_goal_term_Seq.prototype.pursue.call(this);
		switch(this.lhs.get_status()) {
		case -1:
			this.join(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,this.delegate.get_defect()));
			break;
		case 0:
			break;
		case 1:
			stx_nano_lift_LiftNano.if_else(stx_lift_ArrayLift.is_defined(this.delegate.get_defect()),function() {
				_gthis.join(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,_gthis.delegate.get_defect()));
			},function() {
				_gthis.join(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,_gthis.delegate.get_result()));
			});
			break;
		case 2:
			break;
		case 3:
			tink_core_Future.handle(tink_core_Signal.nextTime(this.delegate.get_signal()),function(_) {
				_gthis.get_trigger().trigger(null);
			});
			break;
		case 4:
			this.join(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,this.delegate.get_result()));
			break;
		}
	}
	,get_defect: function() {
		var that = stx_pico_OptionLift.def(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.get_work()),function(_) {
			return _.get_defect();
		}),stx_nano_Defect.unit);
		return stx_nano_Defect.concat(this.delegate.get_defect(),stx_nano_Defect.entype(that));
	}
	,get_result: function() {
		return this.delegate.get_result();
	}
	,toString: function() {
		var b = this.deferred.toString();
		return "" + stx_pico_Identifier.get_name(this.identifier()) + "[" + this.get_id() + ":" + stx_async_GoalStatusLift.toString(this.get_status()) + "](" + Std.string(this.delegate) + " >>> " + b + ")";
	}
	,toTaskApi: function() {
		return this;
	}
	,toWork: function(pos) {
		return this;
	}
	,__class__: stx_async_terminal_Task
	,__properties__: $extend(stx_async_goal_term_Seq.prototype.__properties__,{set_work:"set_work",get_work:"get_work"})
});
var stx_async_terminal_term_Delegate = function(term,pos) {
	stx_async_task_term_Delegate.call(this,term.toTask(),pos);
	this.term = term;
};
stx_async_terminal_term_Delegate.__name__ = "stx.async.terminal.term.Delegate";
stx_async_terminal_term_Delegate.__interfaces__ = [stx_async_terminal_Api];
stx_async_terminal_term_Delegate.__super__ = stx_async_task_term_Delegate;
stx_async_terminal_term_Delegate.prototype = $extend(stx_async_task_term_Delegate.prototype,{
	term: null
	,resolve: function(receiver) {
		return this.term.resolve(receiver);
	}
	,issue: function(res,pos) {
		return this.term.issue(res,pos);
	}
	,value: function(r,pos) {
		return this.term.value(r,pos);
	}
	,error: function(err,pos) {
		return this.term.error(err,pos);
	}
	,later: function(ft,pos) {
		return this.term.later(ft,pos);
	}
	,lense: function(t,pos) {
		return this.term.lense(t,pos);
	}
	,release: function(next) {
		return this.term.release(next);
	}
	,pause: function(n,pos) {
		return this.term.pause(n,pos);
	}
	,joint: function(joiner,pos) {
		return this.term.joint(joiner,pos);
	}
	,inner: function(join,pos) {
		return this.term.inner(join,pos);
	}
	,toTerminalApi: function() {
		return this;
	}
	,toTask: function() {
		return stx_async_Task.lift(this);
	}
	,get_status: function() {
		return this.term.toWork({ fileName : "stx/async/terminal/term/Delegate.hx", lineNumber : 49, className : "stx.async.terminal.term.Delegate", methodName : "get_status"}).get_status();
	}
	,__class__: stx_async_terminal_term_Delegate
});
var stx_async_terminal_term_Joint = function(joiner,pos) {
	stx_async_terminal_Cls.call(this,pos);
	this.called = false;
	this.joiner = joiner;
};
stx_async_terminal_term_Joint.__name__ = "stx.async.terminal.term.Joint";
stx_async_terminal_term_Joint.__super__ = stx_async_terminal_Cls;
stx_async_terminal_term_Joint.prototype = $extend(stx_async_terminal_Cls.prototype,{
	joiner: function(outcome) {
		return stx_async_Work.Unit();
	}
	,called: null
	,resolve: function(receiver) {
		return stx_async_terminal_Cls.prototype.resolve.call(this,stx_async_terminal_Receiver.lift(new stx_async_terminal_Task(stx_async_terminal_Receiver.prj(receiver),$bind(this,this.joining),{ fileName : "stx/async/terminal/term/Joint.hx", lineNumber : 18, className : "stx.async.terminal.term.Joint", methodName : "resolve"})));
	}
	,joining: function(outcome) {
		if(!this.called) {
			this.called = true;
			return this.joiner(outcome);
		} else {
			throw haxe_Exception.thrown("rejoin");
		}
	}
	,__class__: stx_async_terminal_term_Joint
});
var stx_async_terminal_term_Logging = function(term,pos) {
	stx_async_terminal_term_Delegate.call(this,term,pos);
};
stx_async_terminal_term_Logging.__name__ = "stx.async.terminal.term.Logging";
stx_async_terminal_term_Logging.__interfaces__ = [stx_async_terminal_Api];
stx_async_terminal_term_Logging.__super__ = stx_async_terminal_term_Delegate;
stx_async_terminal_term_Logging.prototype = $extend(stx_async_terminal_term_Delegate.prototype,{
	issue: function(res,pos) {
		return this.term.issue(res,pos);
	}
	,value: function(r,pos) {
		return this.term.value(r,pos);
	}
	,error: function(e,pos) {
		return this.term.error(e,pos);
	}
	,later: function(ft,pos) {
		tink_core_Future.handle(ft,function(_) {
		});
		return this.term.later(ft,pos);
	}
	,lense: function(t,pos) {
		return this.term.lense(t,pos);
	}
	,inner: function(join,pos) {
		return this.term.inner(join,pos);
	}
	,joint: function(joiner,pos) {
		return this.term.joint(function(outcome) {
			return joiner(outcome);
		},pos);
	}
	,pause: function(work,pos) {
		return this.term.pause(work,pos);
	}
	,toTerminalApi: function() {
		return this;
	}
	,ident: function() {
		return "" + this.get_id() + ":id(" + stx_nano_PositionLift.toString_name_method_line(stx_LiftPos.lift(this.pos)) + ")";
	}
	,toWork: function(pos) {
		return this.term.toWork(pos);
	}
	,toGoalApi: function() {
		return this;
	}
	,__class__: stx_async_terminal_term_Logging
});
var stx_async_terminal_term_Pause = function(work,pos) {
	stx_async_terminal_Cls.call(this,pos);
	this.work = work;
};
stx_async_terminal_term_Pause.__name__ = "stx.async.terminal.term.Pause";
stx_async_terminal_term_Pause.__super__ = stx_async_terminal_Cls;
stx_async_terminal_term_Pause.prototype = $extend(stx_async_terminal_Cls.prototype,{
	work: null
	,resolve: function(receiver) {
		return stx_async_terminal_Cls.prototype.resolve.call(this,stx_async_terminal_Receiver.lift(stx_async_Task.Pause(this.work,stx_async_terminal_Receiver.prj(receiver)).toTaskApi()));
	}
	,__class__: stx_async_terminal_term_Pause
});
var stx_async_terminal_term_Release = function(delegate,work,pos) {
	stx_async_terminal_term_Delegate.call(this,delegate,pos);
	this.work = work;
};
stx_async_terminal_term_Release.__name__ = "stx.async.terminal.term.Release";
stx_async_terminal_term_Release.__super__ = stx_async_terminal_term_Delegate;
stx_async_terminal_term_Release.prototype = $extend(stx_async_terminal_term_Delegate.prototype,{
	work: null
	,resolve: function(receiver) {
		return stx_async_terminal_term_Delegate.prototype.resolve.call(this,stx_async_terminal_Receiver.lift(stx_async_Task.After(stx_async_terminal_Receiver.prj(receiver),this.work).toTaskApi()));
	}
	,pursue: function() {
		haxe_Log.trace(this.get_delegate(),{ fileName : "stx/async/terminal/term/Release.hx", lineNumber : 16, className : "stx.async.terminal.term.Release", methodName : "pursue"});
		stx_async_terminal_term_Delegate.prototype.pursue.call(this);
	}
	,__class__: stx_async_terminal_term_Release
});
var stx_async_terminal_term_Sub = function(handler,pos) {
	stx_async_terminal_Cls.call(this,pos);
	this.handler = handler;
};
stx_async_terminal_term_Sub.__name__ = "stx.async.terminal.term.Sub";
stx_async_terminal_term_Sub.__super__ = stx_async_terminal_Cls;
stx_async_terminal_term_Sub.prototype = $extend(stx_async_terminal_Cls.prototype,{
	handler: null
	,resolve: function(receiver) {
		return stx_async_terminal_Cls.prototype.resolve.call(this,stx_async_terminal_Receiver.listen(receiver,this.handler));
	}
	,__class__: stx_async_terminal_term_Sub
});
var stx_async_work_Crunch = function() { };
stx_async_work_Crunch.__name__ = "stx.async.work.Crunch";
stx_async_work_Crunch.apply = function(self,loop) {
	loop = stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,loop),stx_async_Loop.ZERO);
	var cont = true;
	var suspended = false;
	var backoff = 0.2;
	while(true == cont) {
		if(stx_lift_ArrayLift.is_defined(self.get_defect())) {
			loop.fail(self.get_defect());
			cont = false;
		}
		if(!suspended) {
			self.pursue();
			if(self.get_loaded()) {
				cont = false;
			} else {
				switch(self.get_status()) {
				case -1:
					loop.fail(self.get_defect());
					break;
				case 1:case 4:
					cont = false;
					break;
				case 0:case 2:
					break;
				case 3:
					suspended = true;
					tink_core_Future.handle(tink_core_Signal.nextTime(self.get_signal()),function(_) {
						backoff = 1.22;
						suspended = false;
					});
					break;
				}
			}
		}
	}
};
function stx_async_work_Crunch_log(wildcard) {
	return stx_Log.tag(stx_Log.unit(),stx_nano_lift_LiftNano.identifier(stx_async_work_Crunch));
}
var stx_async_work_term_Delegate = function(delegate,pos) {
	stx_async_task_Direct.call(this,delegate.pos);
	this.delegate = delegate;
	this.pos = pos;
};
stx_async_work_term_Delegate.__name__ = "stx.async.work.term.Delegate";
stx_async_work_term_Delegate.__super__ = stx_async_task_Direct;
stx_async_work_term_Delegate.prototype = $extend(stx_async_task_Direct.prototype,{
	delegate: null
	,get_signal: function() {
		return this.delegate.get_signal();
	}
	,get_defect: function() {
		return this.delegate.get_defect();
	}
	,get_result: function() {
		return this.delegate.get_result();
	}
	,get_status: function() {
		return this.delegate.get_status();
	}
	,pursue: function() {
		this.delegate.pursue();
	}
	,escape: function() {
		this.delegate.escape();
	}
	,update: function() {
		this.delegate.update();
	}
	,__class__: stx_async_work_term_Delegate
});
var stx_async_work_term_At = function(delegate,pos) {
	stx_async_work_term_Delegate.call(this,delegate,{ fileName : "stx/async/work/term/At.hx", lineNumber : 5, className : "stx.async.work.term.At", methodName : "new"});
	this.pos = pos;
};
stx_async_work_term_At.__name__ = "stx.async.work.term.At";
stx_async_work_term_At.__super__ = stx_async_work_term_Delegate;
stx_async_work_term_At.prototype = $extend(stx_async_work_term_Delegate.prototype,{
	__class__: stx_async_work_term_At
});
var stx_async_work_term_Block = function(deferred) {
	stx_async_task_Direct.call(this,{ fileName : "stx/async/work/term/Block.hx", lineNumber : 6, className : "stx.async.work.term.Block", methodName : "new"});
	this.deferred = deferred;
};
stx_async_work_term_Block.__name__ = "stx.async.work.term.Block";
stx_async_work_term_Block.__super__ = stx_async_task_Direct;
stx_async_work_term_Block.prototype = $extend(stx_async_task_Direct.prototype,{
	deferred: null
	,pursue: function() {
		this.deferred();
		this.set_result(null);
		this.loaded = true;
		this.status = 4;
	}
	,__class__: stx_async_work_term_Block
});
var stx_async_work_term_Canceller = function(work,canceller,pos) {
	stx_async_task_term_Delegate.call(this,work.toTaskApi(),pos);
	this.canceller = canceller;
};
stx_async_work_term_Canceller.__name__ = "stx.async.work.term.Canceller";
stx_async_work_term_Canceller.__super__ = stx_async_task_term_Delegate;
stx_async_work_term_Canceller.prototype = $extend(stx_async_task_term_Delegate.prototype,{
	canceller: null
	,escape: function() {
		this.get_delegate().escape();
		this.canceller();
	}
	,get_status: function() {
		return this.get_delegate().get_status();
	}
	,__class__: stx_async_work_term_Canceller
});
var stx_async_work_term_Goal = function(delegate,pos) {
	stx_async_task_Delegate.call(this,pos);
	this.delegate = delegate;
	this.pos = pos;
};
stx_async_work_term_Goal.__name__ = "stx.async.work.term.Goal";
stx_async_work_term_Goal.__super__ = stx_async_task_Delegate;
stx_async_work_term_Goal.prototype = $extend(stx_async_task_Delegate.prototype,{
	delegate: null
	,get_signal: function() {
		return this.delegate.get_signal();
	}
	,get_defect: function() {
		return stx_nano_Defect.unit();
	}
	,get_result: function() {
		return null;
	}
	,get_loaded: function() {
		return this.delegate.get_loaded();
	}
	,get_status: function() {
		return this.delegate.get_status();
	}
	,pursue: function() {
		this.delegate.pursue();
	}
	,escape: function() {
		this.delegate.escape();
	}
	,update: function() {
		this.delegate.update();
	}
	,toString: function() {
		return "Goal(" + this.delegate.toString() + ")";
	}
	,__class__: stx_async_work_term_Goal
});
var stx_async_work_term_Shim = function(task,pos) {
	stx_async_goal_term_Delegated.call(this,task.toGoalApi(),pos);
	this.task = task;
};
stx_async_work_term_Shim.__name__ = "stx.async.work.term.Shim";
stx_async_work_term_Shim.__interfaces__ = [stx_async_task_Api];
stx_async_work_term_Shim.__super__ = stx_async_goal_term_Delegated;
stx_async_work_term_Shim.prototype = $extend(stx_async_goal_term_Delegated.prototype,{
	task: null
	,toWork: function(pos) {
		return stx_async_Work.lift(this);
	}
	,toTaskApi: function() {
		return this;
	}
	,get_defect: function() {
		return stx_nano_Defect.elide(this.task.get_defect());
	}
	,get_result: function() {
		return null;
	}
	,equals: function(that) {
		return this.task.get_id() == that.get_id();
	}
	,toString: function() {
		return this.task.toString();
	}
	,__class__: stx_async_work_term_Shim
});
var stx_async_work_term_Stamp = function(outcome) {
	stx_async_task_Direct.call(this,{ fileName : "stx/async/work/term/Stamp.hx", lineNumber : 6, className : "stx.async.work.term.Stamp", methodName : "new"});
	this.loaded = true;
	this.delegate = outcome;
	this.status = 4;
};
stx_async_work_term_Stamp.__name__ = "stx.async.work.term.Stamp";
stx_async_work_term_Stamp.__super__ = stx_async_task_Direct;
stx_async_work_term_Stamp.prototype = $extend(stx_async_task_Direct.prototype,{
	delegate: null
	,get_defect: function() {
		return stx_pico_OutcomeLift.fold(this.delegate,function(_) {
			return null;
		},function(e) {
			return e;
		});
	}
	,get_result: function() {
		return stx_pico_OutcomeLift.fold(this.delegate,function(r) {
			return r;
		},function(_) {
			return null;
		});
	}
	,__class__: stx_async_work_term_Stamp
});
var stx_ext_Blob = {};
stx_ext_Blob.asInt = function(this1) {
	return this1;
};
stx_ext_Blob.asString = function(this1) {
	return this1;
};
stx_ext_Blob.asBool = function(this1) {
	return this1;
};
stx_ext_Blob.asFloat = function(this1) {
	return this1;
};
stx_ext_Blob.typeof = function(this1) {
	return Type.typeof(this1);
};
var stx_ext_CardSum = $hxEnums["stx.ext.CardSum"] = { __ename__:"stx.ext.CardSum",__constructs__:null
	,___: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.ext.CardSum",toString:$estr}; },$_._hx_name="___",$_.__params__ = ["v"],$_)
};
stx_ext_CardSum.__constructs__ = [stx_ext_CardSum.___];
var stx_ext_Card = {};
stx_ext_Card._new = function(self) {
	return self;
};
stx_ext_Card.of = function(wildcard,x) {
	return stx_ext_Card._new(stx_ext_CardSum.___(x));
};
stx_ext_Card.asAny = function(this1) {
	return stx_ext_Card.map(this1,function(x) {
		return x;
	});
};
stx_ext_Card.asDynamic = function(this1) {
	return stx_ext_Card.map(this1,function(x) {
		return x;
	});
};
stx_ext_Card.then = function(this1,v) {
	return stx_ext_Card._new(stx_ext_CardSum.___(v));
};
stx_ext_Card.val = function(this1,pos) {
	return stx_ext_Card.pull(this1,function(x) {
		return x;
	},pos);
};
stx_ext_Card.pull = function(this1,fn,pos) {
	var _g = this1.v;
	if(_g == null) {
		throw haxe_Exception.thrown("Null Encountered at (${pos})");
	}
	return fn(_g);
};
stx_ext_Card.or = function(this1,thk) {
	if(this1 == null) {
		return stx_ext_CardSum.___(thk());
	} else {
		return stx_ext_CardSum.___(this1.v);
	}
};
stx_ext_Card.orv = function(this1,v) {
	return stx_ext_Card.or(this1,function() {
		return v;
	});
};
stx_ext_Card.def = function(this1,thk) {
	if(this1 == null) {
		return thk();
	} else {
		return this1.v;
	}
};
stx_ext_Card.defv = function(this1,v) {
	return stx_ext_Card.def(this1,function() {
		return v;
	});
};
stx_ext_Card.map = function(this1,fn) {
	var _g = this1.v;
	if(_g == null) {
		return stx_ext_Card._new(stx_ext_CardSum.___(null));
	} else {
		return stx_ext_Card._new(stx_ext_CardSum.___(fn(_g)));
	}
};
stx_ext_Card.fromWildcard = function(crd) {
	return stx_ext_Card._new(stx_ext_CardSum.___(crd));
};
stx_ext_Card.ab = function(tp) {
	return stx_ext_Card.val(stx_ext_Card.map(tp,function(tp) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tp.a,tp.b);
	}),{ fileName : "stx/ext/Card.hx", lineNumber : 66, className : "stx.ext._Card.Card_Impl_", methodName : "ab"});
};
var stx_ext_Cell = {};
stx_ext_Cell.__properties__ = {get_value:"get_value"};
stx_ext_Cell._new = function(self) {
	return self;
};
stx_ext_Cell.fromT = function(v) {
	return stx_ext_Cell._new(tink_core_Ref.to(v));
};
stx_ext_Cell.get_value = function(this1) {
	return tink_core_Ref.get_value(this1);
};
stx_ext_Cell.prj = function(this1) {
	return this1;
};
stx_ext_Cell.get = function(this1) {
	return stx_ext_Cell.get_value(this1);
};
var stx_ext_Char = {};
stx_ext_Char._new = function(self) {
	return self;
};
stx_ext_Char.code = function(this1) {
	return HxOverrides.cca(this1,0);
};
var stx_ext_CharsLift = function() { };
stx_ext_CharsLift.__name__ = "stx.ext.CharsLift";
stx_ext_CharsLift.ldropn = function(self,n) {
	return self.substring(n);
};
stx_ext_CharsLift.parse_bool = function(self) {
	switch(self.toLowerCase()) {
	case "false":
		return haxe_ds_Option.Some(false);
	case "true":
		switch(self) {
		case "0":
			return haxe_ds_Option.Some(false);
		case "1":
			return haxe_ds_Option.Some(true);
		default:
			return haxe_ds_Option.Some(true);
		}
		break;
	default:
		switch(self) {
		case "0":
			return haxe_ds_Option.Some(false);
		case "1":
			return haxe_ds_Option.Some(true);
		default:
			return haxe_ds_Option.None;
		}
	}
};
stx_ext_CharsLift.parse_int = function(self) {
	return stx_pico_OptionLift.filter(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,Std.parseInt(self)),function(i) {
		return !stx_ext_Math.isNaN(i);
	});
};
stx_ext_CharsLift.parse_float = function(self) {
	return stx_pico_OptionLift.filter(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,Std.parseFloat(self)),function(i) {
		return !stx_ext_Math.isNaN(i);
	});
};
stx_ext_CharsLift.starts_with = function(self,frag) {
	if(self.length >= frag.length && frag == HxOverrides.substr(self,0,frag.length)) {
		return true;
	} else {
		return false;
	}
};
stx_ext_CharsLift.ends_with = function(self,frag) {
	if(self.length >= frag.length && frag == HxOverrides.substr(self,self.length - frag.length,null)) {
		return true;
	} else {
		return false;
	}
};
stx_ext_CharsLift.contains = function(self,substr) {
	return self.indexOf(substr) != -1;
};
stx_ext_CharsLift.replace = function(self,sub,by) {
	return StringTools.replace(self,sub,by);
};
stx_ext_CharsLift.brackets = function(self,l,r) {
	return "" + l + self + r;
};
stx_ext_CharsLift.prepend = function(self,before) {
	return stx_ext_Chars.add(before,self);
};
stx_ext_CharsLift.append = function(self,after) {
	return stx_ext_Chars.add(self,after);
};
stx_ext_CharsLift.cca = function(self,i) {
	return HxOverrides.cca(self,i);
};
stx_ext_CharsLift.at = function(self,i) {
	return self.charAt(i);
};
stx_ext_CharsLift.chunk = function(self,len) {
	if(len == null) {
		len = 1;
	}
	var end = Math.round(Math.min(len,self.length));
	if(end == 0) {
		return [];
	} else {
		return [HxOverrides.substr(self,0,end)].concat(stx_ext_CharsLift.chunk(HxOverrides.substr(self,end,null),len));
	}
};
stx_ext_CharsLift.chars = function(self) {
	var a = [];
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) a.push(self.charAt(_g++));
	return a;
};
stx_ext_CharsLift.split = function(self,sep) {
	return self.split(sep);
};
stx_ext_CharsLift.strip_white = function(self) {
	var l = self.length;
	var i = 0;
	var sb = new StringBuf();
	while(i < l) {
		if(!stx_ext_CharsLift.is_space(self,i)) {
			sb.add(self.charAt(i));
		}
		++i;
	}
	return sb.toString();
};
stx_ext_CharsLift.replace_recurse = function(self,sub,by) {
	if(sub.length == 0) {
		return stx_ext_CharsLift.replace(self,sub,by);
	}
	if(by.indexOf(sub) >= 0) {
		throw haxe_Exception.thrown("Infinite recursion");
	}
	var ns = self.toString();
	var olen = 0;
	var nlen = ns.length;
	while(olen != nlen) {
		olen = ns.length;
		stx_ext_CharsLift.replace(sub,by,ns);
		nlen = ns.length;
	}
	return ns;
};
stx_ext_CharsLift.iterator = function(self) {
	var index = 0;
	return { hasNext : function() {
		return index < self.length;
	}, next : function() {
		if(index < self.length) {
			index += 1;
			return HxOverrides.substr(self,index - 1,1);
		} else {
			throw haxe_Exception.thrown(stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/ext/Chars.hx", lineNumber : 184, className : "stx.ext.CharsLift", methodName : "iterator"}),"E_IndexOutOfBounds"));
		}
	}};
};
stx_ext_CharsLift.is_space = function(self,pos) {
	var c = HxOverrides.cca(self,pos);
	if(!(c >= 9 && c <= 13)) {
		return c == 32;
	} else {
		return true;
	}
};
stx_ext_CharsLift.chr = function(i) {
	return String.fromCodePoint(i);
};
stx_ext_CharsLift.underscore = function(s) {
	s = new EReg("::","g").replace(s,"/");
	s = new EReg("([A-Z]+)([A-Z][a-z])","g").replace(s,"$1_$2");
	s = new EReg("([a-z\\d])([A-Z])","g").replace(s,"$1_$2");
	s = new EReg("-","g").replace(s,"_");
	return s.toLowerCase();
};
stx_ext_CharsLift.after = function(self,sub) {
	var idx = self.indexOf(sub);
	if(idx < 0) {
		return "";
	}
	return self.substring(idx + sub.length,self.length);
};
stx_ext_CharsLift.before = function(self,sub) {
	return self.substring(0,self.indexOf(sub));
};
stx_ext_CharsLift.quote = function(str) {
	return "\"" + str + "\"";
};
stx_ext_CharsLift.requote = function(self) {
	return stx_ext_CharsLift.replace(self,"\"","\\\"");
};
stx_ext_CharsLift.truncate = function(self,int) {
	return HxOverrides.substr(self,0,int);
};
var stx_ext_Chars = {};
stx_ext_Chars._new = function(self) {
	return self;
};
stx_ext_Chars.char = function(this1,int) {
	return stx_ext_Char._new(this1.charAt(int));
};
stx_ext_Chars.add = function(this1,that) {
	return this1 + that;
};
var stx_ext_ChunkSum = $hxEnums["stx.ext.ChunkSum"] = { __ename__:"stx.ext.ChunkSum",__constructs__:null
	,Val: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.ext.ChunkSum",toString:$estr}; },$_._hx_name="Val",$_.__params__ = ["v"],$_)
	,Tap: {_hx_name:"Tap",_hx_index:1,__enum__:"stx.ext.ChunkSum",toString:$estr}
	,End: ($_=function(err) { return {_hx_index:2,err:err,__enum__:"stx.ext.ChunkSum",toString:$estr}; },$_._hx_name="End",$_.__params__ = ["err"],$_)
};
stx_ext_ChunkSum.__constructs__ = [stx_ext_ChunkSum.Val,stx_ext_ChunkSum.Tap,stx_ext_ChunkSum.End];
var stx_ext_ChunkLift = function() { };
stx_ext_ChunkLift.__name__ = "stx.ext.ChunkLift";
stx_ext_ChunkLift.def = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		return self.v;
	case 1:
		return fn();
	case 2:
		throw haxe_Exception.thrown(self.err);
	}
};
stx_ext_ChunkLift.defv = function(self,t) {
	switch(self._hx_index) {
	case 0:
		return self.v;
	case 1:
		return t;
	case 2:
		throw haxe_Exception.thrown(self.err);
	}
};
stx_ext_ChunkLift.fold = function(chk,val,ers,tap) {
	switch(chk._hx_index) {
	case 0:
		return val(chk.v);
	case 1:
		return tap();
	case 2:
		return ers(chk.err);
	}
};
stx_ext_ChunkLift.map = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		return stx_ext_Chunk.pure(fn(self.v));
	case 1:
		return stx_ext_ChunkSum.Tap;
	case 2:
		return stx_ext_ChunkSum.End(self.err);
	}
};
stx_ext_ChunkLift.flatten = function(self) {
	return stx_ext_ChunkLift.flat_map(self,function(x) {
		return x;
	});
};
stx_ext_ChunkLift.flat_map = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		return fn(self.v);
	case 1:
		return stx_ext_ChunkSum.Tap;
	case 2:
		return stx_ext_ChunkSum.End(self.err);
	}
};
stx_ext_ChunkLift.recover = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		return stx_ext_ChunkSum.Val(self.v);
	case 1:
		return stx_ext_ChunkSum.Tap;
	case 2:
		return fn(self.err);
	}
};
stx_ext_ChunkLift.errata = function(self,fn) {
	return stx_ext_ChunkLift.recover(self,function(x) {
		return stx_ext_ChunkSum.End(fn(x));
	});
};
stx_ext_ChunkLift.zip = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		switch(that._hx_index) {
		case 0:
			return stx_ext_ChunkSum.Val(stx_nano_lift_LiftNano.toCouple(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,v,that.v)));
		case 1:
			return stx_ext_ChunkSum.Tap;
		case 2:
			return stx_ext_ChunkSum.End(that.err);
		}
		break;
	case 1:
		return stx_ext_ChunkSum.Tap;
	case 2:
		if(that._hx_index == 2) {
			return stx_ext_ChunkSum.End(self.err.next(that.err));
		} else {
			return stx_ext_ChunkSum.Tap;
		}
		break;
	}
};
stx_ext_ChunkLift.value = function(chk) {
	switch(chk._hx_index) {
	case 0:
		return haxe_ds_Option.Some(chk.v);
	case 1:
		return haxe_ds_Option.None;
	case 2:
		return haxe_ds_Option.None;
	}
};
stx_ext_ChunkLift.is_defined = function(self) {
	return stx_ext_ChunkLift.fold(self,function(_) {
		return true;
	},function(_) {
		return false;
	},function() {
		return false;
	});
};
stx_ext_ChunkLift.opt_else = function(self,_if,_else) {
	return stx_ext_ChunkLift.fold(self,_if,function(e) {
		return _else(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e));
	},function() {
		return _else(haxe_ds_Option.None);
	});
};
stx_ext_ChunkLift.fudge = function(self,pos) {
	if(self == null) {
		throw haxe_Exception.thrown("no self to push on");
	} else {
		switch(self._hx_index) {
		case 0:
			return self.v;
		case 1:
			throw haxe_Exception.thrown("Value not found on force");
		case 2:
			var _g = self.err;
			if(_g == null) {
				throw haxe_Exception.thrown("Value not found on force");
			} else {
				throw haxe_Exception.thrown(_g);
			}
			break;
		}
	}
};
stx_ext_ChunkLift.iterator = function(self) {
	var done = false;
	return { hasNext : function() {
		if(!done) {
			return stx_ext_EnumValue.alike(stx_ext_EnumValue._new(self),stx_ext_EnumValue._new(stx_ext_ChunkSum.Val(null)));
		} else {
			return false;
		}
	}, next : function() {
		done = true;
		if(self._hx_index == 0) {
			return self.v;
		} else {
			return null;
		}
	}};
};
stx_ext_ChunkLift.secure = function(self) {
	return stx_ext_ChunkLift.fold(self,function(v) {
		if(v == null) {
			return stx_ext_ChunkSum.Tap;
		} else {
			return stx_ext_ChunkSum.Val(v);
		}
	},stx_ext_ChunkSum.End,function() {
		return stx_ext_ChunkSum.Tap;
	});
};
var stx_ext_Chunk = {};
stx_ext_Chunk.__properties__ = {get_self:"get_self"};
stx_ext_Chunk._new = function(self) {
	return self;
};
stx_ext_Chunk.fromError = function(e) {
	return stx_ext_ChunkSum.End(e);
};
stx_ext_Chunk.fromNull_T = function(v) {
	return stx_ext_Chunk.pure(v);
};
stx_ext_Chunk.lift = function(v) {
	return stx_ext_Chunk._new(v);
};
stx_ext_Chunk.pure = function(c) {
	if(c == null) {
		return stx_ext_ChunkSum.Tap;
	} else {
		return stx_ext_ChunkSum.Val(c);
	}
};
stx_ext_Chunk.unit = function() {
	return stx_ext_ChunkSum.Tap;
};
stx_ext_Chunk.fromTinkOutcome = function(outcome) {
	var tmp;
	switch(outcome._hx_index) {
	case 0:
		tmp = stx_ext_Chunk.pure(outcome.data);
		break;
	case 1:
		tmp = stx_ext_ChunkSum.End(outcome.failure);
		break;
	}
	return stx_ext_Chunk._new(tmp);
};
stx_ext_Chunk.fromOption = function(opt) {
	switch(opt._hx_index) {
	case 0:
		return stx_ext_ChunkSum.Val(opt.v);
	case 1:
		return stx_ext_ChunkSum.Tap;
	}
};
stx_ext_Chunk.fromOptionError = function(opt) {
	switch(opt._hx_index) {
	case 0:
		return stx_ext_ChunkSum.End(opt.v);
	case 1:
		return stx_ext_ChunkSum.Tap;
	}
};
stx_ext_Chunk.all = function(arr,TapFail) {
	return Lambda.fold(arr,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			var _g = memo.v;
			switch(next._hx_index) {
			case 0:
				var memo1 = _g;
				memo1.push(next.v);
				return stx_ext_ChunkSum.Val(memo1);
			case 1:
				if(TapFail == null) {
					return stx_ext_ChunkSum.Tap;
				} else {
					return stx_ext_ChunkSum.End(TapFail);
				}
				break;
			case 2:
				return stx_ext_ChunkSum.End(next.err);
			}
			break;
		case 2:
			var _g = memo.err;
			switch(next._hx_index) {
			case 1:
				return stx_ext_ChunkSum.End(stx_pico_OptionLift.defv(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,_g),function(e) {
					return e.next(TapFail);
				}),TapFail));
			case 2:
				return stx_ext_ChunkSum.End(Lambda.fold(stx_pico_OptionLift.toArray(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,_g)).concat(stx_pico_OptionLift.toArray(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,next.err))),function(nx,mm) {
					return mm.next(nx);
				},TapFail));
			default:
				return stx_ext_ChunkSum.End(_g);
			}
			break;
		default:
			if(TapFail == null) {
				return stx_ext_ChunkSum.Tap;
			} else {
				return stx_ext_ChunkSum.End(TapFail);
			}
		}
	},stx_ext_ChunkSum.Val([]));
};
stx_ext_Chunk.available = function(rest) {
	return Lambda.fold(rest,function(next,memo) {
		if(memo._hx_index == 0) {
			var xs = memo.v;
			switch(next._hx_index) {
			case 0:
				xs.push(next.v);
				return stx_ext_ChunkSum.Val(xs);
			case 1:
				return stx_ext_ChunkSum.Val(xs);
			case 2:
				return stx_ext_ChunkSum.End(next.err);
			}
		} else {
			return memo;
		}
	},stx_ext_ChunkSum.Val([]));
};
stx_ext_Chunk.get_self = function(this1) {
	return this1;
};
var stx_ext_ContractLift = function() {
	stx_pico_Clazz.call(this);
};
stx_ext_ContractLift.__name__ = "stx.ext.ContractLift";
stx_ext_ContractLift.lift = function(self) {
	return stx_ext_Contract.lift(self);
};
stx_ext_ContractLift.zip = function(self,that) {
	return tink_core_Future.map(stx_ext_lift_LiftFuture.zip(stx_ext_Contract.prj(self),stx_ext_Contract.prj(that)),function(tp) {
		return stx_ext_ChunkLift.zip(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp));
	});
};
stx_ext_ContractLift.map = function(self,fn) {
	return stx_ext_ContractLift.lift(tink_core_Future.map(stx_ext_Contract.prj(self),function(x) {
		switch(x._hx_index) {
		case 0:
			return stx_ext_ChunkSum.Val(fn(x.v));
		case 1:
			return stx_ext_ChunkSum.Tap;
		case 2:
			return stx_ext_ChunkSum.End(x.err);
		}
	}));
};
stx_ext_ContractLift.flat_map = function(self,fn) {
	return tink_core_Future.flatMap(stx_ext_Contract.prj(self),function(x) {
		switch(x._hx_index) {
		case 0:
			return stx_ext_Contract.prj(fn(x.v));
		case 1:
			return stx_ext_Contract.prj(stx_ext_Contract._new(tink_core_Future.sync(stx_ext_ChunkSum.Tap)));
		case 2:
			return stx_ext_Contract.prj(stx_ext_Contract.fromChunk(stx_ext_ChunkSum.End(x.err)));
		}
	});
};
stx_ext_ContractLift.fold = function(self,val,ers,nil) {
	var val1 = val;
	var ers1 = ers;
	var tap = nil;
	var tmp = function(chk) {
		return stx_ext_Chunk._.fold(chk,val1,ers1,tap);
	};
	return tink_core_Future.map(stx_ext_Contract.prj(self),tmp);
};
stx_ext_ContractLift.recover = function(self,fn) {
	return stx_ext_ContractLift.lift(stx_ext_ContractLift.fold(self,function(x) {
		return stx_ext_ChunkSum.Val(x);
	},function(e) {
		return fn(e);
	},function() {
		return stx_ext_ChunkSum.Tap;
	}));
};
stx_ext_ContractLift.attempt = function(self,fn) {
	return stx_ext_ContractLift.lift(stx_ext_ContractLift.fold(self,function(x) {
		return fn(x);
	},function(v) {
		return stx_ext_ChunkSum.End(v);
	},function() {
		return stx_ext_ChunkSum.Tap;
	}));
};
stx_ext_ContractLift.receive = function(self,fn) {
	return tink_core_Future.map(stx_ext_Contract.prj(self),function(chk) {
		switch(chk._hx_index) {
		case 0:
			fn(chk.v);
			return haxe_ds_Option.None;
		case 1:
			return haxe_ds_Option.None;
		case 2:
			return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,chk.err);
		}
	});
};
stx_ext_ContractLift.now = function(self) {
	var out = null;
	tink_core_Future.handle(stx_ext_Contract.prj(self),function(v) {
		out = v;
	});
	if(out == null) {
		out = stx_ext_ChunkSum.Tap;
	}
	return out;
};
stx_ext_ContractLift.errata = function(fn,self) {
	return tink_core_Future.map(stx_ext_Contract.prj(self),function(chk) {
		return stx_ext_ChunkLift.errata(chk,fn);
	});
};
stx_ext_ContractLift.__super__ = stx_pico_Clazz;
stx_ext_ContractLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_ext_ContractLift
});
var stx_ext_Contract = {};
stx_ext_Contract._new = function(v) {
	return v;
};
stx_ext_Contract.lift = function(self) {
	return stx_ext_Contract._new(self);
};
stx_ext_Contract.unit = function() {
	return stx_ext_Contract.pure(stx_ext_ChunkSum.Tap);
};
stx_ext_Contract.pure = function(ch) {
	return tink_core_Future.irreversible(function(f) {
		f(ch);
	});
};
stx_ext_Contract.bind_fold = function(it,start,fm) {
	return stx_ext_Contract._new(stx_Ext.core(stx_nano_Wildcard.__).Future().bind_fold(it,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			return stx_ext_Contract.prj(fm(memo.v,next));
		case 1:
			return stx_ext_Contract.prj(stx_ext_Contract.unit());
		case 2:
			return stx_ext_Contract.prj(stx_ext_Contract.end(memo.err));
		}
	},tink_core_Future.ofAny(stx_ext_ChunkSum.Val(start))));
};
stx_ext_Contract.lazy = function(fn) {
	return stx_ext_Contract.lift(tink_core_Future.irreversible(function(f) {
		f(stx_ext_ChunkSum.Val(fn()));
	}));
};
stx_ext_Contract.fromLazyError = function(fn) {
	return stx_ext_Contract.fromLazyChunk(function() {
		return stx_ext_ChunkSum.End(fn());
	});
};
stx_ext_Contract.fromLazyChunk = function(fn) {
	return tink_core_Future.irreversible(function(f) {
		f(fn());
	});
};
stx_ext_Contract.end = function(e) {
	return stx_ext_Contract.pure(stx_ext_ChunkSum.End(e));
};
stx_ext_Contract.tap = function() {
	return stx_ext_Contract.unit();
};
stx_ext_Contract.fromChunk = function(chk) {
	return tink_core_Future.irreversible(function(cb) {
		cb(chk);
	});
};
stx_ext_Contract.fromOption = function(m) {
	return stx_ext_Contract.fromChunk(stx_pico_OptionLift.fold(m,function(x) {
		return stx_ext_ChunkSum.Val(x);
	},function() {
		return stx_ext_ChunkSum.Tap;
	}));
};
stx_ext_Contract.prj = function(this1) {
	return this1;
};
var stx_ext_Embed = {};
stx_ext_Embed._new = function() {
	return stx_ext__$Embed_Constructor.embed();
};
var stx_ext__$Embed_Constructor = function() {
	stx_pico_Clazz.call(this);
};
stx_ext__$Embed_Constructor.__name__ = "stx.ext._Embed.Constructor";
stx_ext__$Embed_Constructor.embed = function() {
	var r = haxe_ds_Option.None;
	var unpack = null;
	unpack = function(fn) {
		r = haxe_ds_Option.None;
		fn();
		return r;
	};
	var pull = null;
	pull = function(fn) {
		r = haxe_ds_Option.None;
		fn();
		return stx_pico_OptionLift.fudge(r);
	};
	var pack = null;
	pack = function(v) {
		var o = haxe_ds_Option.Some(v);
		return function() {
			r = o;
		};
	};
	var check = null;
	check = function(fn) {
		switch(unpack(fn)._hx_index) {
		case 0:
			return true;
		case 1:
			return false;
		}
	};
	return { pack : pack, unpack : unpack, pull : pull, check : check};
};
stx_ext__$Embed_Constructor.__super__ = stx_pico_Clazz;
stx_ext__$Embed_Constructor.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_ext__$Embed_Constructor
});
var stx_ext_Enum = {};
stx_ext_Enum._new = function(self) {
	return self;
};
stx_ext_Enum.constructs = function(this1) {
	return Type.getEnumConstructs(this1);
};
stx_ext_Enum.$name = function(this1) {
	return Type.getEnumName(this1);
};
stx_ext_Enum.construct = function(this1,cons,args) {
	switch(cons._hx_index) {
	case 0:
		return stx_pico_Option.fromNullT(Type.createEnumIndex(this1,cons.v,args));
	case 1:
		return stx_pico_Option.fromNullT(Type.createEnum(this1,cons.v,args));
	}
};
var stx_ext_EnumValue = {};
stx_ext_EnumValue.pure = function(self) {
	return stx_ext_EnumValue._new(self);
};
stx_ext_EnumValue._new = function(self) {
	return self;
};
stx_ext_EnumValue.params = function(this1) {
	return Type.enumParameters(this1);
};
stx_ext_EnumValue.constructor = function(this1) {
	return Type.enumConstructor(this1);
};
stx_ext_EnumValue.index = function(this1) {
	return Type.enumIndex(this1);
};
stx_ext_EnumValue.alike = function(this1,that) {
	if(stx_ext_EnumValue.constructor(this1) == stx_ext_EnumValue.constructor(that)) {
		return stx_ext_EnumValue.index(this1) == stx_ext_EnumValue.index(that);
	} else {
		return false;
	}
};
stx_ext_EnumValue.prj = function(this1) {
	return this1;
};
var stx_ext_ErrorCode = {};
stx_ext_ErrorCode._new = function(self) {
	return self;
};
stx_ext_ErrorCode.prj = function(this1) {
	return this1;
};
stx_ext_ErrorCode._ = function() {
	return stx_ext__$ErrorCode_Constructor.ZERO;
};
var stx_ext__$ErrorCode_Constructor = function() {
	stx_pico_Clazz.call(this);
};
stx_ext__$ErrorCode_Constructor.__name__ = "stx.ext._ErrorCode.Constructor";
stx_ext__$ErrorCode_Constructor.__super__ = stx_pico_Clazz;
stx_ext__$ErrorCode_Constructor.prototype = $extend(stx_pico_Clazz.prototype,{
	five_hundred: function() {
		return stx_ext_error_$code_term_FiveHundred._new();
	}
	,__class__: stx_ext__$ErrorCode_Constructor
});
var stx_ext_ErrorMsg = {};
stx_ext_ErrorMsg.create = function(this1,code,pos) {
	return new tink_core_TypedError(code,this1,pos);
};
stx_ext_ErrorMsg.internal = function(this1,pos) {
	return stx_ext_ErrorMsg.create(this1,500,pos);
};
var stx_ext_Field = {};
stx_ext_Field._new = function(self) {
	return self;
};
stx_ext_Field.fromTup = function(tp) {
	return stx_ext_Field._new(stx_nano_KV.fromObj({ key : stx_nano_CoupleLift.fst(tp), val : stx_nano_CoupleLift.snd(tp)}));
};
stx_ext_Field.create = function(key,val) {
	return stx_ext_Field._new(stx_nano_KV.fromObj({ key : key, val : val}));
};
stx_ext_Field.map = function(this1,fn) {
	return stx_nano_KV.map(this1,fn);
};
stx_ext_Field.into = function(this1,fn) {
	return fn(this1.key,this1.val);
};
stx_ext_Field.toCouple = function(this1) {
	return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this1.key,this1.val);
};
var stx_ext_Floats = function() { };
stx_ext_Floats.__name__ = "stx.ext.Floats";
stx_ext_Floats.delta = function(n0,n1) {
	return n1 - n0;
};
stx_ext_Floats.normalize = function(v,n0,n1) {
	return (v - n0) / stx_ext_Floats.delta(n0,n1);
};
stx_ext_Floats.interpolate = function(v,n0,n1) {
	return n0 + stx_ext_Floats.delta(n0,n1) * v;
};
stx_ext_Floats.map = function(v,min0,max0,min1,max1) {
	return stx_ext_Floats.interpolate(stx_ext_Floats.normalize(v,min0,max0),min1,max1);
};
stx_ext_Floats.round = function(n,c) {
	if(c == null) {
		c = 1;
	}
	var r = Math.pow(10,c);
	return stx_ext_Floats.int(Math.round(n * r) / r);
};
stx_ext_Floats.ceil = function(n,c) {
	if(c == null) {
		c = 1;
	}
	var r = Math.pow(10,c);
	return stx_ext_Floats.int(Math.ceil(n * r) / r);
};
stx_ext_Floats.floor = function(n,c) {
	if(c == null) {
		c = 1;
	}
	var r = Math.pow(10,c);
	return stx_ext_Floats.int(Math.floor(n * r) / r);
};
stx_ext_Floats.clamp = function(n,min,max) {
	if(n > max) {
		n = max;
	} else if(n < min) {
		n = min;
	}
	return n;
};
stx_ext_Floats.sgn = function(n) {
	if(n == 0) {
		return 0;
	} else {
		return Math.abs(n) / n;
	}
};
stx_ext_Floats.max = function(v1,v2) {
	if(v2 > v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_ext_Floats.min = function(v1,v2) {
	if(v2 < v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_ext_Floats.int = function(v) {
	return Std.int(v);
};
stx_ext_Floats.compare = function(v1,v2) {
	if(v1 < v2) {
		return -1;
	} else if(v1 > v2) {
		return 1;
	} else {
		return 0;
	}
};
stx_ext_Floats.equals = function(v1,v2) {
	return v1 == v2;
};
stx_ext_Floats.toString = function(v) {
	return "" + v;
};
stx_ext_Floats.toInt = function(v) {
	return Std.int(v);
};
stx_ext_Floats.add = function(a,b) {
	return a + b;
};
stx_ext_Floats.sub = function(a,b) {
	return a - b;
};
stx_ext_Floats.div = function(a,b) {
	return a / b;
};
stx_ext_Floats.mul = function(a,b) {
	return a * b;
};
stx_ext_Floats.mod = function(a,b) {
	return a % b;
};
var stx_ext_Generator = function(f,stack) {
	this.fn = function(i) {
		return stack[i] == null ? stack[i] = f() : stack[i];
	};
	this.index = 0;
};
stx_ext_Generator.__name__ = "stx.ext.Generator";
stx_ext_Generator.pure = function(fn) {
	return stx_ext_Generator.create(fn,[]);
};
stx_ext_Generator.create = function(fn,stack) {
	return new stx_ext_Generator(fn,stack);
};
stx_ext_Generator.yielding = function(fn) {
	var stack = [];
	return { iterator : function() {
		return stx_ext_Generator.create(fn,stack).iterator();
	}};
};
stx_ext_Generator.prototype = {
	fn: null
	,index: null
	,restart: function() {
		var next = new stx_ext_Generator(null,null);
		next.fn = this.fn;
		return next;
	}
	,next: function() {
		var o;
		var _g = this.fn(this.index);
		switch(_g._hx_index) {
		case 0:
			o = _g.v;
			break;
		case 1:
			o = null;
			break;
		}
		this.index++;
		return o;
	}
	,hasNext: function() {
		var o;
		switch(this.fn(this.index)._hx_index) {
		case 0:
			o = true;
			break;
		case 1:
			o = false;
			break;
		}
		return o;
	}
	,iterator: function() {
		return { next : $bind(this,this.next), hasNext : $bind(this,this.hasNext)};
	}
	,__class__: stx_ext_Generator
};
var stx_ext_ID = {};
stx_ext_ID.prj = function(this1) {
	return this1;
};
stx_ext_ID.toString = function(this1) {
	return this1;
};
var stx_ext_Ident = {};
stx_ext_Ident.fromDotPath = function(str) {
	var arr = str.split(".");
	if(arr.length == 1) {
		return { name : str, pack : []};
	} else {
		return { name : arr.pop(), pack : arr};
	}
};
stx_ext_Ident.toStructure = function(this1) {
	var tail = [];
	var _g = 0;
	var _g1 = this1.pack;
	while(_g < _g1.length) tail.push(_g1[_g++]);
	return { name : this1.name, pack : tail};
};
stx_ext_Ident.canonical = function(this1) {
	if(this1.pack.length > 0) {
		return this1.pack.concat([this1.name]).join(".");
	} else {
		return this1.name;
	}
};
var stx_ext_Ints = function() { };
stx_ext_Ints.__name__ = "stx.ext.Ints";
stx_ext_Ints.max = function(v1,v2) {
	if(v2 > v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_ext_Ints.min = function(v1,v2) {
	if(v2 < v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_ext_Ints.toBool = function(v) {
	if(v == 0) {
		return false;
	} else {
		return true;
	}
};
stx_ext_Ints.toFloat = function(v) {
	return v;
};
stx_ext_Ints.compare = function(v1,v2) {
	if(v1 < v2) {
		return -1;
	} else if(v1 > v2) {
		return 1;
	} else {
		return 0;
	}
};
stx_ext_Ints.equals = function(v1,v2) {
	return v1 == v2;
};
stx_ext_Ints.isOdd = function(n) {
	if(n % 2 == 0) {
		return false;
	} else {
		return true;
	}
};
stx_ext_Ints.isEven = function(n) {
	return stx_ext_Ints.isOdd(n) == false;
};
stx_ext_Ints.isInteger = function(n) {
	return n % 1 == 0;
};
stx_ext_Ints.isNatural = function(n) {
	if(n > 0) {
		return n % 1 == 0;
	} else {
		return false;
	}
};
stx_ext_Ints.isPrime = function(n) {
	if(n == 1) {
		return false;
	}
	if(n == 2) {
		return false;
	}
	if(n % 2 == 0) {
		return false;
	}
	var itr = new IntIterator(3,Math.ceil(Math.sqrt(n)) + 1);
	while(itr.hasNext()) {
		itr.next();
		if(n % 1 == 0) {
			return false;
		}
	}
	return true;
};
stx_ext_Ints.factorial = function(n) {
	if(!stx_ext_Ints.isNatural(n)) {
		throw haxe_Exception.thrown("function factorial requires natural number as input");
	}
	if(n == 0) {
		return 1;
	}
	var i = n - 1;
	while(i > 0) {
		n *= i;
		--i;
	}
	return n;
};
stx_ext_Ints.divisors = function(n) {
	var r = [];
	var iter = new IntIterator(1,Math.ceil(n / 2 + 1));
	while(iter.hasNext()) {
		var i = iter.next();
		if(n % i == 0) {
			r.push(i);
		}
	}
	if(n != 0) {
		r.push(n);
	}
	return r;
};
stx_ext_Ints.clamp = function(n,min,max) {
	if(n > max) {
		n = max;
	} else if(n < min) {
		n = min;
	}
	return n;
};
stx_ext_Ints.half = function(n) {
	return n / 2;
};
stx_ext_Ints.sum = function(xs) {
	var o = 0;
	var val = $getIterator(xs);
	while(val.hasNext()) o += val.next();
	return o;
};
stx_ext_Ints.add = function(a,b) {
	return a + b;
};
stx_ext_Ints.sub = function(a,b) {
	return a - b;
};
stx_ext_Ints.div = function(a,b) {
	return a / b;
};
stx_ext_Ints.mul = function(a,b) {
	return a * b;
};
stx_ext_Ints.mod = function(a,b) {
	return a % b;
};
stx_ext_Ints.inv = function(n) {
	return -n;
};
stx_ext_Ints.and = function(a,b) {
	return a & b;
};
stx_ext_Ints.eq = function(a,b) {
	return a == b;
};
stx_ext_Ints.gt = function(a,b) {
	return a > b;
};
stx_ext_Ints.gteq = function(a,b) {
	return a >= b;
};
stx_ext_Ints.lt = function(a,b) {
	return a < b;
};
stx_ext_Ints.lteq = function(a,b) {
	return a <= b;
};
stx_ext_Ints.ushr = function(v,bits) {
	return v >>> bits;
};
stx_ext_Ints.xor = function(a,b) {
	return a ^ b;
};
stx_ext_Ints.shl = function(v,bits) {
	return v << bits;
};
stx_ext_Ints.shr = function(v,bits) {
	return v >> bits;
};
stx_ext_Ints.abs = function(v) {
	return Std.int(Math.abs(v));
};
stx_ext_Ints.toString = function(a) {
	return "" + a;
};
stx_ext_Ints.is_between = function(n,l,h) {
	if(n > l) {
		return n < h;
	} else {
		return false;
	}
};
stx_ext_Ints.is_of_range = function(n,l,h) {
	if(n >= l) {
		return n <= h;
	} else {
		return false;
	}
};
var stx_ext_RegexApi = function(source,option) {
	this.source = source;
	this.option = option;
};
stx_ext_RegexApi.__name__ = "stx.ext.RegexApi";
stx_ext_RegexApi.prototype = {
	source: null
	,option: null
	,match: function(match) {
		return new stx_ext_MatchApi(this.source,this.option,match);
	}
	,__class__: stx_ext_RegexApi
};
var stx_ext_MatchApi = function(source,option,target) {
	stx_ext_RegexApi.call(this,source,option);
	this.target = target;
	this.state = new EReg(source,option);
	this.status = this.state.match(target);
};
stx_ext_MatchApi.__name__ = "stx.ext.MatchApi";
stx_ext_MatchApi.__super__ = stx_ext_RegexApi;
stx_ext_MatchApi.prototype = $extend(stx_ext_RegexApi.prototype,{
	target: null
	,status: null
	,state: null
	,__class__: stx_ext_MatchApi
});
var stx_ext_Match = {};
stx_ext_Match.__properties__ = {get_self:"get_self"};
stx_ext_Match._new = function(self) {
	return self;
};
stx_ext_Match.lift = function(self) {
	return stx_ext_Match._new(self);
};
stx_ext_Match.prj = function(this1) {
	return this1;
};
stx_ext_Match.get_self = function(this1) {
	return stx_ext_Match.lift(this1);
};
var stx_ext_Math = function() { };
stx_ext_Math.__name__ = "stx.ext.Math";
stx_ext_Math.rndOne = function(weight) {
	if(weight == null) {
		weight = 0.5;
	}
	return Std.int(stx_ext_Math.random() - weight);
};
stx_ext_Math.radians = function(v) {
	return v * (Math.PI / 180);
};
stx_ext_Math.degrees = function(v) {
	return v * (180 / Math.PI);
};
stx_ext_Math.random = function(max,min) {
	if(min == null) {
		min = 0;
	}
	if(max == null) {
		max = 1;
	}
	return stx_ext_Math.random() * (max - min) + min;
};
stx_ext_Math.isNaN = function(fl) {
	return isNaN(fl);
};
var stx_ext_Module = function() {
};
stx_ext_Module.__name__ = "stx.ext.Module";
stx_ext_Module.prototype = {
	Future: function() {
		return new stx_ext__$Module_Ft();
	}
	,Map: function() {
		return new stx_ext__$Module_Map();
	}
	,__class__: stx_ext_Module
};
var stx_ext__$Module_Ft = function() {
	stx_pico_Clazz.call(this);
};
stx_ext__$Module_Ft.__name__ = "stx.ext._Module.Ft";
stx_ext__$Module_Ft.__super__ = stx_pico_Clazz;
stx_ext__$Module_Ft.prototype = $extend(stx_pico_Clazz.prototype,{
	bind_fold: function(arr,fn,init) {
		return Lambda.fold(arr,function(next,memo) {
			return tink_core_Future.flatMap(memo,function(tt) {
				return fn(next,tt);
			});
		},init);
	}
	,__class__: stx_ext__$Module_Ft
});
var stx_ext__$Module_Map = function() {
	stx_pico_Clazz.call(this);
};
stx_ext__$Module_Map.__name__ = "stx.ext._Module.Map";
stx_ext__$Module_Map.__super__ = stx_pico_Clazz;
stx_ext__$Module_Map.prototype = $extend(stx_pico_Clazz.prototype,{
	String: function() {
		return haxe_ds_Map.toStringMap(null);
	}
	,__class__: stx_ext__$Module_Map
});
var stx_ext_ParameterDef = $hxEnums["stx.ext.ParameterDef"] = { __ename__:"stx.ext.ParameterDef",__constructs__:null
	,Unbound: ($_=function(k) { return {_hx_index:0,k:k,__enum__:"stx.ext.ParameterDef",toString:$estr}; },$_._hx_name="Unbound",$_.__params__ = ["k"],$_)
	,Bound: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.ext.ParameterDef",toString:$estr}; },$_._hx_name="Bound",$_.__params__ = ["v"],$_)
};
stx_ext_ParameterDef.__constructs__ = [stx_ext_ParameterDef.Unbound,stx_ext_ParameterDef.Bound];
var stx_ext_Parameter = {};
stx_ext_Parameter._new = function(self) {
	return self;
};
var stx_ext_PledgeLift = function() { };
stx_ext_PledgeLift.__name__ = "stx.ext.PledgeLift";
stx_ext_PledgeLift.lift = function(self) {
	return stx_ext_Pledge.lift(self);
};
stx_ext_PledgeLift.zip = function(self,that) {
	return tink_core_Future.map(stx_ext_lift_LiftFuture.zip(stx_ext_Pledge.prj(self),stx_ext_Pledge.prj(that)),function(tp) {
		return stx_nano_ResLift.zip(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp));
	});
};
stx_ext_PledgeLift.map = function(self,fn) {
	return stx_ext_PledgeLift.lift(tink_core_Future.map(stx_ext_Pledge.prj(self),function(x) {
		return stx_nano_ResLift.fold(x,function(s) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(s));
		},function(e) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		});
	}));
};
stx_ext_PledgeLift.flat_map = function(self,fn) {
	return tink_core_Future.flatMap(stx_ext_Pledge.prj(self),function(x) {
		return stx_nano_ResLift.fold(x,function(v) {
			return stx_ext_Pledge.prj(fn(v));
		},function(err) {
			return stx_ext_Pledge.prj(stx_ext_Pledge.fromRes(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,err)));
		});
	});
};
stx_ext_PledgeLift.fold = function(self,val,ers) {
	var fn = val;
	var er = ers;
	var tmp = function(self) {
		return stx_nano_Res._.fold(self,fn,er);
	};
	return tink_core_Future.map(stx_ext_Pledge.prj(self),tmp);
};
stx_ext_PledgeLift.recover = function(self,fn) {
	return stx_ext_PledgeLift.lift(stx_ext_PledgeLift.fold(self,function(x) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,x);
	},function(e) {
		return fn(e);
	}));
};
stx_ext_PledgeLift.attempt = function(self,fn) {
	return stx_ext_PledgeLift.lift(stx_ext_PledgeLift.fold(self,function(x) {
		return fn(x);
	},function(v) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,v);
	}));
};
stx_ext_PledgeLift.receive = function(self,fn) {
	return tink_core_Future.map(stx_ext_Pledge.prj(self),function(res) {
		return stx_nano_ResLift.fold(res,function(v) {
			fn(v);
			return haxe_ds_Option.None;
		},function(v) {
			return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,v);
		});
	});
};
stx_ext_PledgeLift.now = function(self) {
	var out = null;
	tink_core_Future.handle(stx_ext_Pledge.prj(self),function(v) {
		out = v;
	});
	if(out == null) {
		throw haxe_Exception.thrown(stx_nano_Fault.err(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/ext/Pledge.hx", lineNumber : 143, className : "stx.ext.PledgeLift", methodName : "now"}),"E_ValueNotReady"));
	}
	return out;
};
stx_ext_PledgeLift.errata = function(fn,self) {
	return tink_core_Future.map(stx_ext_Contract.prj(self),function(chk) {
		return stx_ext_ChunkLift.errata(chk,fn);
	});
};
var stx_ext_Pledge = {};
stx_ext_Pledge.__properties__ = {get_self:"get_self"};
stx_ext_Pledge._new = function(self) {
	return self;
};
stx_ext_Pledge.lift = function(self) {
	return stx_ext_Pledge._new(self);
};
stx_ext_Pledge.pure = function(ch) {
	return tink_core_Future.irreversible(function(f) {
		f(ch);
	});
};
stx_ext_Pledge.bind_fold = function(it,start,fm) {
	return stx_ext_Pledge._new(stx_Ext.core(stx_nano_Wildcard.__).Future().bind_fold(it,function(next,memo) {
		return stx_nano_ResLift.fold(memo,function(v) {
			return stx_ext_Pledge.prj(fm(v,next));
		},function(e) {
			return stx_ext_Pledge.pure(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
		});
	},tink_core_Future.ofAny(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,start))));
};
stx_ext_Pledge.lazy = function(fn) {
	return stx_ext_Pledge.lift(tink_core_Future.irreversible(function(f) {
		f(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn()));
	}));
};
stx_ext_Pledge.fromLazyError = function(fn) {
	return stx_ext_Pledge.fromLazyRes(function() {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,fn());
	});
};
stx_ext_Pledge.fromTinkPromise = function(promise) {
	return stx_ext_Pledge.lift(tink_core_Promise.map(promise,function(outcome) {
		switch(outcome._hx_index) {
		case 0:
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,outcome.data);
		case 1:
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Err.fromTinkError(outcome.failure));
		}
	}));
};
stx_ext_Pledge.fromLazyRes = function(fn) {
	return tink_core_Future.irreversible(function(f) {
		f(fn());
	});
};
stx_ext_Pledge.err = function(e) {
	return stx_ext_Pledge.pure(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
};
stx_ext_Pledge.fromRes = function(chk) {
	return tink_core_Future.irreversible(function(cb) {
		cb(chk);
	});
};
stx_ext_Pledge.fromOption = function(m) {
	return stx_ext_Pledge.fromRes(stx_pico_OptionLift.fold(m,function(x) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,x);
	},function() {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Fault.err(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/ext/Pledge.hx", lineNumber : 67, className : "stx.ext._Pledge.Pledge_Impl_", methodName : "fromOption"}),"E_UnexpectedNullValueEncountered"));
	}));
};
stx_ext_Pledge.prj = function(this1) {
	return this1;
};
stx_ext_Pledge.get_self = function(this1) {
	return stx_ext_Pledge.lift(this1);
};
var stx_ext_Regex = {};
stx_ext_Regex.__properties__ = {get_self:"get_self"};
stx_ext_Regex._new = function(self) {
	return self;
};
stx_ext_Regex.lift = function(self) {
	return stx_ext_Regex._new(self);
};
stx_ext_Regex.make = function(source,option) {
	return new stx_ext_RegexApi(source,option);
};
stx_ext_Regex.prj = function(this1) {
	return this1;
};
stx_ext_Regex.get_self = function(this1) {
	return stx_ext_Regex.lift(this1);
};
var stx_ext_Reporter = {};
stx_ext_Reporter.command = function(err) {
	throw haxe_Exception.thrown(err);
};
stx_ext_Reporter._new = function() {
	return function() {
		return stx_ext_Reporter.command;
	};
};
stx_ext_Reporter.react = function(this1,err) {
	(this1())(err);
};
var stx_ext_SourceIdent = {};
stx_ext_SourceIdent._new = function(self) {
	return self;
};
stx_ext_SourceIdent.fromPosInfos = function(p) {
	var class_path = p.className.split(".");
	var class_name = class_path.pop();
	return stx_ext_SourceIdent._new({ module : stx_pico_Option.fromNullT(new haxe_io_Path(p.fileName)), name : class_name, pack : class_path});
};
stx_ext_SourceIdent.eq = function(this1,that) {
	if(this1.name != that.name) {
		return false;
	} else if(this1.pack.length != that.pack.length) {
		return false;
	} else if(stx_pico_OptionLift.defv(stx_pico_OptionLift.map(stx_nano_lift_LiftOptionNano.zip(this1.module,that.module),function(tp) {
		return stx_nano_CoupleLift.decouple(tp,function(l,r) {
			return l.toString().length != r.toString().length;
		});
	}),false)) {
		return false;
	} else {
		var _g = 0;
		var _g1 = this1.pack.length - 1;
		while(_g < _g1) {
			var i = _g++;
			if(this1.pack[i] != that.pack[i]) {
				return false;
			}
		}
		if(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this1.module)) && stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,that.module))) {
			var this_string = stx_pico_OptionLift.fudge(this1.module).toString();
			var that_string = stx_pico_OptionLift.fudge(that.module).toString();
			var _g = 0;
			var _g1 = this_string.length;
			while(_g < _g1) {
				var i = _g++;
				if(this_string.charAt(i) != that_string.charAt(i)) {
					return false;
				}
			}
		}
		return true;
	}
};
stx_ext_SourceIdent.toString = function(this1) {
	var _g = this1.module;
	var _g1 = this1.pack;
	if(_g == null) {
		if(_g1.length == 0) {
			return this1.name;
		} else {
			var next = [this1.name];
			var _g2 = 0;
			while(_g2 < _g1.length) next.push(_g1[_g2++]);
			return next.join(".");
		}
	} else if(_g1.length == 0) {
		return "" + (_g == null ? "null" : stx_pico_Option.toString(_g)) + "." + this1.name;
	} else {
		return "" + (_g == null ? "null" : stx_pico_Option.toString(_g)) + "." + this1.name;
	}
};
var stx_ext_SymbolApi = function() { };
stx_ext_SymbolApi.__name__ = "stx.ext.SymbolApi";
stx_ext_SymbolApi.__isInterface__ = true;
stx_ext_SymbolApi.prototype = {
	get_id: null
	,set_id: null
	,__class__: stx_ext_SymbolApi
	,__properties__: {set_id:"set_id",get_id:"get_id"}
};
var stx_ext_Unfold = {};
stx_ext_Unfold.fromFunction = function(fn) {
	var unfolder = fn;
	return function(initial) {
		return stx_ext_Unfold.unfold(initial,unfolder);
	};
};
stx_ext_Unfold._new = function(v) {
	return v;
};
stx_ext_Unfold.unfold = function(initial,unfolder) {
	return { iterator : function() {
		var _next = haxe_ds_Option.None;
		var _progress = initial;
		var precomputeNext = function() {
			var _g = unfolder(_progress);
			switch(_g._hx_index) {
			case 0:
				var tup = _g.v;
				_progress = stx_nano_CoupleLift.fst(tup);
				_next = haxe_ds_Option.Some(stx_nano_CoupleLift.snd(tup));
				break;
			case 1:
				_progress = null;
				_next = haxe_ds_Option.None;
				break;
			}
		};
		precomputeNext();
		return { hasNext : function() {
			if(_next._hx_index == 0) {
				return true;
			} else {
				return false;
			}
		}, next : function() {
			var n = _next._hx_index == 0 ? _next.v : null;
			precomputeNext();
			return n;
		}};
	}};
};
var stx_ext_Variable = {};
stx_ext_Variable._new = function(self) {
	return self;
};
stx_ext_Variable.map = function(this1,fn) {
	return stx_ext_Variable._new(stx_nano_Couple._.map(this1,function(x) {
		return stx_pico_OptionLift.map(x,fn);
	}));
};
stx_ext_Variable.make = function(k,v) {
	return stx_ext_Variable._new(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,k,v == null ? haxe_ds_Option.None : haxe_ds_Option.Some(v)));
};
var stx_ext_error_$code_term_FiveHundred = {};
stx_ext_error_$code_term_FiveHundred._new = function() {
	return stx_ext_ErrorCode._new(500);
};
var stx_ext_lift_LiftArrayToIter = function() { };
stx_ext_lift_LiftArrayToIter.__name__ = "stx.ext.lift.LiftArrayToIter";
stx_ext_lift_LiftArrayToIter.toIter = function(arr) {
	return arr;
};
var stx_ext_lift_LiftBoolToPrimitive = function() { };
stx_ext_lift_LiftBoolToPrimitive.__name__ = "stx.ext.lift.LiftBoolToPrimitive";
stx_ext_lift_LiftBoolToPrimitive.toPrimitive = function(b) {
	return stx_nano_PrimitiveDef.PBool(b);
};
var stx_ext_lift_LiftCoupleToField = function() { };
stx_ext_lift_LiftCoupleToField.__name__ = "stx.ext.lift.LiftCoupleToField";
stx_ext_lift_LiftCoupleToField.toField = function(tp) {
	return stx_ext_Field.fromTup(tp);
};
var stx_ext_lift_LiftDynamicAccessToArrayKV = function() { };
stx_ext_lift_LiftDynamicAccessToArrayKV.__name__ = "stx.ext.lift.LiftDynamicAccessToArrayKV";
stx_ext_lift_LiftDynamicAccessToArrayKV.toIter = function(obj) {
	var arr = [];
	var _g = $keyValueIterator(haxe_DynamicAccess)(obj);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		arr.push(stx_nano_KV.fromObj({ key : _g1.key, val : _g1.value}));
	}
	return arr;
};
var stx_ext_lift_LiftErrToChunk = function() { };
stx_ext_lift_LiftErrToChunk.__name__ = "stx.ext.lift.LiftErrToChunk";
stx_ext_lift_LiftErrToChunk.toChunk = function(err) {
	return stx_ext_Chunk.fromError(err);
};
var stx_ext_lift_LiftFunXRToGenerator = function() { };
stx_ext_lift_LiftFunXRToGenerator.__name__ = "stx.ext.lift.LiftFunXRToGenerator";
stx_ext_lift_LiftFunXRToGenerator.toGenerator = function(fn) {
	return stx_ext_Generator.yielding(fn);
};
var stx_ext_lift_LiftFuture = function() { };
stx_ext_lift_LiftFuture.__name__ = "stx.ext.lift.LiftFuture";
stx_ext_lift_LiftFuture.zip = function(self,that) {
	var left = haxe_ds_Option.None;
	var right = haxe_ds_Option.None;
	var trigger = tink_core_Future.trigger();
	var on_done = function() {
	};
	var r_handler = function(r) {
		right = haxe_ds_Option.Some(r);
		on_done();
	};
	tink_core_Future.handle(self,function(l) {
		left = haxe_ds_Option.Some(l);
		on_done();
	});
	tink_core_Future.handle(that,r_handler);
	return trigger.asFuture();
};
stx_ext_lift_LiftFuture.tryAndThenCancelIfNotAvailable = function(ft) {
	var output = haxe_ds_Option.None;
	var canceller = tink_core_Future.handle(ft,function(x) {
		output = haxe_ds_Option.Some(x);
	});
	if(!stx_pico_OptionLift.is_defined(output)) {
		tink_core_CallbackLink.cancel(canceller);
	}
	return output;
};
var stx_ext_lift_LiftIMapToArrayKV = function() { };
stx_ext_lift_LiftIMapToArrayKV.__name__ = "stx.ext.lift.LiftIMapToArrayKV";
stx_ext_lift_LiftIMapToArrayKV.toArrayKV = function(map) {
	var out = [];
	var _g = map.keyValueIterator();
	while(_g.hasNext()) {
		var _g1 = _g.next();
		out.push(stx_nano_KV.fromTup(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,_g1.key,_g1.value)));
	}
	return out;
};
var stx_ext_lift_LiftIntToPrimitive = function() { };
stx_ext_lift_LiftIntToPrimitive.__name__ = "stx.ext.lift.LiftIntToPrimitive";
stx_ext_lift_LiftIntToPrimitive.toPrimitive = function(i) {
	return stx_nano_PrimitiveDef.PInt(i);
};
var stx_ext_lift_LiftIterOfFieldToStringMap = function() { };
stx_ext_lift_LiftIterOfFieldToStringMap.__name__ = "stx.ext.lift.LiftIterOfFieldToStringMap";
stx_ext_lift_LiftIterOfFieldToStringMap.toMap = function(iter) {
	return stx_nano_Iter._.toMap(iter,function(f) {
		return stx_ext_Field.toCouple(f);
	},new haxe_ds_StringMap());
};
var stx_ext_lift_LiftIterableToIter = function() { };
stx_ext_lift_LiftIterableToIter.__name__ = "stx.ext.lift.LiftIterableToIter";
stx_ext_lift_LiftIterableToIter.toIter = function(it) {
	return it;
};
var stx_ext_lift_LiftIteratorToIter = function() { };
stx_ext_lift_LiftIteratorToIter.__name__ = "stx.ext.lift.LiftIteratorToIter";
stx_ext_lift_LiftIteratorToIter.toIter = function(it) {
	return { iterator : function() {
		return it;
	}};
};
var stx_ext_lift_LiftMapConstructors = function() { };
stx_ext_lift_LiftMapConstructors.__name__ = "stx.ext.lift.LiftMapConstructors";
stx_ext_lift_LiftMapConstructors.term = function(cls) {
	return new stx_ext_lift__$LiftMapConstructors_LiftedMapConstructors();
};
var stx_ext_lift__$LiftMapConstructors_LiftedMapConstructors = function() {
	stx_pico_Clazz.call(this);
};
stx_ext_lift__$LiftMapConstructors_LiftedMapConstructors.__name__ = "stx.ext.lift._LiftMapConstructors.LiftedMapConstructors";
stx_ext_lift__$LiftMapConstructors_LiftedMapConstructors.String = function() {
	return haxe_ds_Map.toStringMap(null);
};
stx_ext_lift__$LiftMapConstructors_LiftedMapConstructors.__super__ = stx_pico_Clazz;
stx_ext_lift__$LiftMapConstructors_LiftedMapConstructors.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_ext_lift__$LiftMapConstructors_LiftedMapConstructors
});
var stx_ext_lift_LiftMapMap = function() { };
stx_ext_lift_LiftMapMap.__name__ = "stx.ext.lift.LiftMapMap";
stx_ext_lift_LiftMapMap.map_arw = function(map,fn) {
	return function(next) {
		var _g = $keyValueIterator(haxe_ds_Map)(map);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			haxe_ds_Map.set(next,_g1.key,fn(_g1.value));
		}
		return next;
	};
};
var stx_ext_lift_LiftMapToIter = function() { };
stx_ext_lift_LiftMapToIter.__name__ = "stx.ext.lift.LiftMapToIter";
stx_ext_lift_LiftMapToIter.toIter = function(map) {
	return { iterator : function() {
		var source = $keyValueIterator(haxe_ds_Map)(map);
		return { next : function() {
			var out = source.next();
			return stx_nano_KV.fromObj({ key : out.key, val : out.value});
		}, hasNext : $bind(source,source.hasNext)};
	}};
};
var stx_ext_lift_LiftOptionToChunk = function() { };
stx_ext_lift_LiftOptionToChunk.__name__ = "stx.ext.lift.LiftOptionToChunk";
stx_ext_lift_LiftOptionToChunk.toChunk = function(opt) {
	switch(opt._hx_index) {
	case 0:
		return stx_ext_ChunkSum.Val(opt.v);
	case 1:
		return stx_ext_ChunkSum.Tap;
	}
};
var stx_ext_lift_LiftPath = function() { };
stx_ext_lift_LiftPath.__name__ = "stx.ext.lift.LiftPath";
stx_ext_lift_LiftPath.sep = function(path) {
	if(path.backslash) {
		return "\\";
	} else {
		return "/";
	}
};
stx_ext_lift_LiftPath.split = function(path) {
	return path.toString().split(stx_ext_lift_LiftPath.sep(path));
};
var stx_ext_lift_LiftResToChunk = function() { };
stx_ext_lift_LiftResToChunk.__name__ = "stx.ext.lift.LiftResToChunk";
stx_ext_lift_LiftResToChunk.toChunk = function(self) {
	return stx_nano_ResLift.fold(self,function(o) {
		return stx_ext_ChunkSum.Val(o);
	},function(e) {
		return stx_ext_ChunkSum.End(e);
	});
};
var stx_ext_lift_LiftStringMapToIter = function() { };
stx_ext_lift_LiftStringMapToIter.__name__ = "stx.ext.lift.LiftStringMapToIter";
stx_ext_lift_LiftStringMapToIter.toIter = function(map) {
	return stx_nano_IterLift.map(stx_ext_lift_LiftMapToIter.toIter(map),function(x) {
		return stx_ext_Field._new(x);
	});
};
var stx_ext_lift_LiftStringToIdent = function() { };
stx_ext_lift_LiftStringToIdent.__name__ = "stx.ext.lift.LiftStringToIdent";
stx_ext_lift_LiftStringToIdent.ident = function(__,str) {
	return stx_ext_Ident.fromDotPath(str);
};
var stx_ext_lift_LiftTinkOutcomeToChunk = function() { };
stx_ext_lift_LiftTinkOutcomeToChunk.__name__ = "stx.ext.lift.LiftTinkOutcomeToChunk";
stx_ext_lift_LiftTinkOutcomeToChunk.core = function(oc) {
	return stx_ext_Chunk.fromTinkOutcome(oc);
};
var stx_ext_lift_LiftTinkPromiseToPledge = function() { };
stx_ext_lift_LiftTinkPromiseToPledge.__name__ = "stx.ext.lift.LiftTinkPromiseToPledge";
stx_ext_lift_LiftTinkPromiseToPledge.toPledge = function(promise) {
	return stx_ext_Pledge.fromTinkPromise(promise);
};
var stx_fail_ArrowletFailure = $hxEnums["stx.fail.ArrowletFailure"] = { __ename__:"stx.fail.ArrowletFailure",__constructs__:null
	,E_Arw_IncorrectCallingConvention: {_hx_name:"E_Arw_IncorrectCallingConvention",_hx_index:0,__enum__:"stx.fail.ArrowletFailure",toString:$estr}
};
stx_fail_ArrowletFailure.__constructs__ = [stx_fail_ArrowletFailure.E_Arw_IncorrectCallingConvention];
var stx_fail_AssertFailure = $hxEnums["stx.fail.AssertFailure"] = { __ename__:"stx.fail.AssertFailure",__constructs__:null
	,PredicateFailed: ($_=function(type,valueN,value0) { return {_hx_index:0,type:type,valueN:valueN,value0:value0,__enum__:"stx.fail.AssertFailure",toString:$estr}; },$_._hx_name="PredicateFailed",$_.__params__ = ["type","valueN","value0"],$_)
};
stx_fail_AssertFailure.__constructs__ = [stx_fail_AssertFailure.PredicateFailed];
var stx_fail_LogFailure = $hxEnums["stx.fail.LogFailure"] = { __ename__:"stx.fail.LogFailure",__constructs__:null
	,E_Log_UnderLogLevel: {_hx_name:"E_Log_UnderLogLevel",_hx_index:0,__enum__:"stx.fail.LogFailure",toString:$estr}
	,E_Log_SourceNotInPackage: ($_=function(source,dir) { return {_hx_index:1,source:source,dir:dir,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_SourceNotInPackage",$_.__params__ = ["source","dir"],$_)
	,E_Log_NotLine: ($_=function(n) { return {_hx_index:2,n:n,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_NotLine",$_.__params__ = ["n"],$_)
	,E_Log_NotOfRange: ($_=function(l,r) { return {_hx_index:3,l:l,r:r,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_NotOfRange",$_.__params__ = ["l","r"],$_)
	,E_Log_NotInMethod: ($_=function(str) { return {_hx_index:4,str:str,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_NotInMethod",$_.__params__ = ["str"],$_)
	,E_Log_DoesNotContainTag: ($_=function(tag) { return {_hx_index:5,tag:tag,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_DoesNotContainTag",$_.__params__ = ["tag"],$_)
	,E_Log_Not: {_hx_name:"E_Log_Not",_hx_index:6,__enum__:"stx.fail.LogFailure",toString:$estr}
	,E_Log_LosesRace: {_hx_name:"E_Log_LosesRace",_hx_index:7,__enum__:"stx.fail.LogFailure",toString:$estr}
	,E_Log_Default: ($_=function(data) { return {_hx_index:8,data:data,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_Default",$_.__params__ = ["data"],$_)
	,E_Log_Zero: {_hx_name:"E_Log_Zero",_hx_index:9,__enum__:"stx.fail.LogFailure",toString:$estr}
};
stx_fail_LogFailure.__constructs__ = [stx_fail_LogFailure.E_Log_UnderLogLevel,stx_fail_LogFailure.E_Log_SourceNotInPackage,stx_fail_LogFailure.E_Log_NotLine,stx_fail_LogFailure.E_Log_NotOfRange,stx_fail_LogFailure.E_Log_NotInMethod,stx_fail_LogFailure.E_Log_DoesNotContainTag,stx_fail_LogFailure.E_Log_Not,stx_fail_LogFailure.E_Log_LosesRace,stx_fail_LogFailure.E_Log_Default,stx_fail_LogFailure.E_Log_Zero];
var stx_fn_BinaryLift = function() {
	stx_pico_Clazz.call(this);
};
stx_fn_BinaryLift.__name__ = "stx.fn.BinaryLift";
stx_fn_BinaryLift.then = function(self,that) {
	return function(pI,pII) {
		return that(self(pI,pII));
	};
};
stx_fn_BinaryLift.braid = function(self,pI,pII) {
	return self(pI,pII);
};
stx_fn_BinaryLift.rotate = function(self) {
	return function(pII,pI) {
		return self(pI,pII);
	};
};
stx_fn_BinaryLift.swap = function(self) {
	return function(pII,pI) {
		return self(pI,pII);
	};
};
stx_fn_BinaryLift.curry = function(self) {
	return function(pI) {
		return function(pII) {
			return self(pI,pII);
		};
	};
};
stx_fn_BinaryLift.equals = function(self,that) {
	return Reflect.compareMethods(self,that);
};
stx_fn_BinaryLift.bindPi = function(self,pI) {
	var _g = self;
	var a1 = pI;
	return function(a2) {
		return _g(a1,a2);
	};
};
stx_fn_BinaryLift.bindPii = function(pII,self) {
	var _g = self;
	var a2 = pII;
	return function(a1) {
		return _g(a1,a2);
	};
};
stx_fn_BinaryLift.cache = function(self,pI,pII) {
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self(pI,pII);
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_BinaryLift.pipe = function(self,tp) {
	return function() {
		return stx_nano_CoupleLift.decouple(tp(),self);
	};
};
stx_fn_BinaryLift.encouple = function(self) {
	return function(tp) {
		return stx_nano_CoupleLift.decouple(tp,self);
	};
};
stx_fn_BinaryLift.__super__ = stx_pico_Clazz;
stx_fn_BinaryLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_fn_BinaryLift
});
var stx_fn_Binary = {};
stx_fn_Binary._new = function(self) {
	return self;
};
stx_fn_Binary.prj = function(this1) {
	return this1;
};
var stx_fn_BlockLift = function() { };
stx_fn_BlockLift.__name__ = "stx.fn.BlockLift";
stx_fn_BlockLift.returning = function(self,r) {
	return function() {
		self();
		return r;
	};
};
stx_fn_BlockLift.equals = function(self,that) {
	return Reflect.compareMethods(self,that);
};
stx_fn_BlockLift.promote = function(f) {
	return function(p) {
		f();
	};
};
stx_fn_BlockLift.then = function(self,that) {
	return function() {
		self();
		that();
	};
};
stx_fn_BlockLift.enact = function(self) {
	self();
};
var stx_fn_Block = {};
stx_fn_Block._new = function(self) {
	return self;
};
stx_fn_Block.unit = function() {
	return function() {
	};
};
stx_fn_Block.pure = function(fn) {
	return fn;
};
stx_fn_Block.lift = function(fn) {
	return stx_fn_Block._new(fn);
};
var stx_fn_DualLift = function() { };
stx_fn_DualLift.__name__ = "stx.fn.DualLift";
stx_fn_DualLift.then = function(self,then) {
	return stx_fn_Unary._.then(stx_fn_Dual.toUnary(self),then);
};
stx_fn_DualLift.into = function(self,fn) {
	return stx_fn_DualLift.then(self,stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,fn));
};
stx_fn_DualLift.pass = function(self,fn) {
	return stx_fn_Dual.fromUnary(stx_fn_DualLift.then(self,stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,fn)));
};
stx_fn_DualLift.first = function(self,fn) {
	return stx_fn_Dual.fromUnary(stx_fn_DualLift.then(self,stx_fn_UnaryLift.first(stx_LiftUnary.fn(fn))));
};
stx_fn_DualLift.second = function(self,fn) {
	return stx_fn_Dual.fromUnary(stx_fn_DualLift.then(self,stx_fn_UnaryLift.second(stx_LiftUnary.fn(fn))));
};
var stx_fn_Dual = {};
stx_fn_Dual.unit = function() {
	return stx_fn_Dual._new(function(tp) {
		return tp;
	});
};
stx_fn_Dual._new = function(self) {
	return self;
};
stx_fn_Dual.fromUnary = function(self) {
	return stx_fn_Dual._new(self);
};
stx_fn_Dual.toUnary = function(this1) {
	return this1;
};
var stx_fn_Module = function() {
	stx_pico_Clazz.call(this);
};
stx_fn_Module.__name__ = "stx.fn.Module";
stx_fn_Module.__super__ = stx_pico_Clazz;
stx_fn_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_fn_Module
});
var stx_fn_Perhaps = {};
stx_fn_Perhaps._new = function(self) {
	return self;
};
var stx_fn_Pick = {};
stx_fn_Pick._new = function(self) {
	return self;
};
stx_fn_Pick.leftPickToSwitch = function(fn) {
	return function(e) {
		switch(e._hx_index) {
		case 0:
			return fn(e.v);
		case 1:
			return haxe_ds_Either.Right(e.v);
		}
	};
};
stx_fn_Pick.rightPickToSwitch = function(fn) {
	return function(e) {
		switch(e._hx_index) {
		case 0:
			return haxe_ds_Either.Left(e.v);
		case 1:
			return fn(e.v);
		}
	};
};
var stx_fn_SinkLift = function() { };
stx_fn_SinkLift.__name__ = "stx.fn.SinkLift";
stx_fn_SinkLift.then = function(self,that) {
	return stx_fn_Sink.lift(function(p) {
		self(p);
		that(p);
	});
};
stx_fn_SinkLift.bind = function(self,p) {
	return stx_fn_Block.lift(stx_fn_SinkLift.bind(self,p));
};
var stx_fn_Sink = {};
stx_fn_Sink._new = function(self) {
	return self;
};
stx_fn_Sink.unit = function() {
	return stx_fn_Sink.lift(function(p) {
	});
};
stx_fn_Sink.lift = function(fn) {
	return stx_fn_Sink._new(fn);
};
stx_fn_Sink.toTinkCallback = function(this1) {
	return this1;
};
stx_fn_Sink.stage = function(this1,before,after) {
	return function(p) {
		before(p);
		this1(p);
		after(p);
	};
};
var stx_fn_Switch = {};
stx_fn_Switch._new = function(self) {
	return self;
};
var stx_fn_TernaryLift = function() {
	stx_pico_Clazz.call(this);
};
stx_fn_TernaryLift.__name__ = "stx.fn.TernaryLift";
stx_fn_TernaryLift.rotate = function(f) {
	return function(pII,pIII,pI) {
		return f(pI,pII,pIII);
	};
};
stx_fn_TernaryLift.curry = function(f) {
	return function(pI) {
		return function(pII) {
			return function(pIII) {
				return f(pI,pII,pIII);
			};
		};
	};
};
stx_fn_TernaryLift.cache = function(self,pI,pII,pIII) {
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self(pI,pII,pIII);
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_TernaryLift.equals = function(self,that) {
	return Reflect.compareMethods(self,that);
};
stx_fn_TernaryLift.__super__ = stx_pico_Clazz;
stx_fn_TernaryLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_fn_TernaryLift
});
var stx_fn_Ternary = {};
stx_fn_Ternary._new = function(self) {
	return self;
};
var stx_fn_Thunk = {};
stx_fn_Thunk._ = function() {
	return stx_fn__$Thunk_Constructor.ZERO;
};
stx_fn_Thunk.lift = function(thk) {
	return stx_fn_Thunk._new(thk);
};
stx_fn_Thunk._new = function(self) {
	return self;
};
stx_fn_Thunk.then = function(this1,that) {
	return stx_fn_Thunk._()._.then(that,this1);
};
stx_fn_Thunk.cache = function(this1) {
	return stx_fn_Thunk._()._.cache(this1);
};
stx_fn_Thunk.prj = function(this1) {
	return this1;
};
var stx_fn__$Thunk_Constructor = function() {
	this._ = new stx_fn_Destructure();
	stx_pico_Clazz.call(this);
};
stx_fn__$Thunk_Constructor.__name__ = "stx.fn._Thunk.Constructor";
stx_fn__$Thunk_Constructor.__super__ = stx_pico_Clazz;
stx_fn__$Thunk_Constructor.prototype = $extend(stx_pico_Clazz.prototype,{
	_: null
	,__class__: stx_fn__$Thunk_Constructor
});
var stx_fn_Destructure = function() {
	stx_pico_Clazz.call(this);
};
stx_fn_Destructure.__name__ = "stx.fn.Destructure";
stx_fn_Destructure.promote = function(self) {
	return function(p) {
		return self();
	};
};
stx_fn_Destructure.stage = function(f,before,after) {
	var state = before();
	var result = f();
	after(state);
	return result;
};
stx_fn_Destructure.equals = function(that,self) {
	return Reflect.compareMethods(self,that);
};
stx_fn_Destructure.__super__ = stx_pico_Clazz;
stx_fn_Destructure.prototype = $extend(stx_pico_Clazz.prototype,{
	reply: function(self) {
		return self();
	}
	,cache: function(self) {
		var r = null;
		return function() {
			if(r == null) {
				r = false;
				r = self();
				return r;
			} else {
				return r;
			}
		};
	}
	,then: function(that,self) {
		return function() {
			return that(self());
		};
	}
	,__class__: stx_fn_Destructure
});
var stx_fn_UnaryLift = function() { };
stx_fn_UnaryLift.__name__ = "stx.fn.UnaryLift";
stx_fn_UnaryLift.apply = function(self,pI) {
	return self(pI);
};
stx_fn_UnaryLift.cache = function(self,pI) {
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self(pI);
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_UnaryLift.pipe = function(self,pI) {
	return function() {
		return self(pI());
	};
};
stx_fn_UnaryLift.equals = function(self,that) {
	return Reflect.compareMethods(self,that);
};
stx_fn_UnaryLift.then = function(self,that) {
	return function(a) {
		return that(self(a));
	};
};
stx_fn_UnaryLift.compose = function(that,self) {
	return function(a) {
		return that(self(a));
	};
};
stx_fn_UnaryLift.dual = function(self) {
	return function(t) {
		return stx_nano_CoupleLift.decouple(t,function(l,r) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self(l),self(r));
		});
	};
};
stx_fn_UnaryLift.perhaps = function(self) {
	return function(x) {
		switch(x._hx_index) {
		case 0:
			return haxe_ds_Option.Some(self(x.v));
		case 1:
			return haxe_ds_Option.None;
		}
	};
};
stx_fn_UnaryLift.first = function(fn1) {
	return function(t) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,fn1(stx_nano_CoupleLift.fst(t)),stx_nano_CoupleLift.snd(t));
	};
};
stx_fn_UnaryLift.second = function(fn1) {
	return function(t) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(t),fn1(stx_nano_CoupleLift.snd(t)));
	};
};
stx_fn_UnaryLift.bound = function(bindl,bindr) {
	return stx_fn_UnaryLift.then(stx_fn_UnaryLift.split(stx_fn_Unary.unit(),bindl),bindr);
};
stx_fn_UnaryLift.broach = function(bindl) {
	return stx_fn_UnaryLift.bound(bindl,function(x) {
		return x;
	});
};
stx_fn_UnaryLift.split = function(self,that) {
	return function(p) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self(p),that(p));
	};
};
stx_fn_UnaryLift.fan = function(a) {
	return stx_fn_UnaryLift.then(stx_LiftUnary.fn(a),function(x) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,x,x);
	});
};
stx_fn_UnaryLift.pair = function(fn1,fn2) {
	return function(t) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,fn1(stx_nano_CoupleLift.fst(t)),fn2(stx_nano_CoupleLift.snd(t)));
	};
};
stx_fn_UnaryLift.bindI = function(fn,p) {
	var _g = stx_fn_Unary.prj(fn);
	var a1 = p;
	return function() {
		return _g(a1);
	};
};
stx_fn_UnaryLift.sink = function(fn,handler) {
	return stx_fn_Sink.lift(function(p) {
		var val = fn(p);
		handler(val);
	});
};
var stx_fn_Unary = {};
stx_fn_Unary._new = function(self) {
	return self;
};
stx_fn_Unary.lift = function(fn) {
	return stx_fn_Unary._new(fn);
};
stx_fn_Unary.unit = function() {
	return stx_fn_Unary.lift(function(x) {
		return x;
	});
};
stx_fn_Unary.pure = function(r) {
	return function(v) {
		return r;
	};
};
stx_fn_Unary.prj = function(this1) {
	return this1;
};
var stx_fn_lift_LiftBroker = function() { };
stx_fn_lift_LiftBroker.__name__ = "stx.fn.lift.LiftBroker";
stx_fn_lift_LiftBroker.broker = function(v,fn) {
	return (fn(function(x) {
		return x;
	}))(v);
};
var stx_fp_ContinuationLift = function() { };
stx_fp_ContinuationLift.__name__ = "stx.fp.ContinuationLift";
stx_fp_ContinuationLift.apply = function(self,fn) {
	return self(fn);
};
stx_fp_ContinuationLift.map = function(self,fn) {
	return function(cont) {
		return self(function(p) {
			return cont(fn(p));
		});
	};
};
stx_fp_ContinuationLift.flat_map = function(self,fn) {
	return function(cont) {
		return self(function(p) {
			return (fn(p))(cont);
		});
	};
};
stx_fp_ContinuationLift.zip_with = function(self,that,fn) {
	return function(cont) {
		return self(function(p) {
			return that(function(pI) {
				return cont(fn(p,pI));
			});
		});
	};
};
stx_fp_ContinuationLift.mod = function(self,g) {
	return function(f) {
		return g(self(f));
	};
};
var stx_fp_Continuation = {};
stx_fp_Continuation.unit = function() {
	return function(fn) {
		return fn(null);
	};
};
stx_fp_Continuation.pure = function(p) {
	return function(fn) {
		return fn(p);
	};
};
stx_fp_Continuation.lift = function(fn) {
	return stx_fp_Continuation._new(fn);
};
stx_fp_Continuation._new = function(self) {
	return self;
};
stx_fp_Continuation.callcc = function(f) {
	return function(k) {
		return (f(function(p) {
			return stx_fp_Continuation.lift(function(_) {
				return k(p);
			});
		}))(k);
	};
};
stx_fp_Continuation.asFunction = function(this1) {
	return this1;
};
var stx_fp_Fix = $hxEnums["stx.fp.Fix"] = { __ename__:"stx.fp.Fix",__constructs__:null
	,FixOf: ($_=function(unfix) { return {_hx_index:0,unfix:unfix,__enum__:"stx.fp.Fix",toString:$estr}; },$_._hx_name="FixOf",$_.__params__ = ["unfix"],$_)
};
stx_fp_Fix.__constructs__ = [stx_fp_Fix.FixOf];
var stx_fp_FreeFSum = $hxEnums["stx.fp.FreeFSum"] = { __ename__:"stx.fp.FreeFSum",__constructs__:null
	,Pure: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.fp.FreeFSum",toString:$estr}; },$_._hx_name="Pure",$_.__params__ = ["v"],$_)
	,Impure: ($_=function(kind) { return {_hx_index:1,kind:kind,__enum__:"stx.fp.FreeFSum",toString:$estr}; },$_._hx_name="Impure",$_.__params__ = ["kind"],$_)
};
stx_fp_FreeFSum.__constructs__ = [stx_fp_FreeFSum.Pure,stx_fp_FreeFSum.Impure];
var stx_fp_FreeF = {};
stx_fp_FreeF.__properties__ = {get_self:"get_self"};
stx_fp_FreeF._new = function(self) {
	return self;
};
stx_fp_FreeF.lift = function(self) {
	return stx_fp_FreeF._new(self);
};
stx_fp_FreeF.prj = function(this1) {
	return this1;
};
stx_fp_FreeF.get_self = function(this1) {
	return stx_fp_FreeF.lift(this1);
};
var stx_fp_Handler = {};
stx_fp_Handler.lift = function(self) {
	return stx_fp_Handler._new(self);
};
stx_fp_Handler._new = function(self) {
	return self;
};
stx_fp_Handler.handle = function(this1,cb) {
	this1(cb);
};
stx_fp_Handler.callcc = function(f) {
	return function(k) {
		(f(function(p) {
			return stx_fp_Handler.lift(function(_) {
				k(p);
			});
		}))(k);
	};
};
var stx_fp_HandlerLift = function() { };
stx_fp_HandlerLift.__name__ = "stx.fp.HandlerLift";
stx_fp_HandlerLift.lift = function(self) {
	return stx_fp_Handler._new(self);
};
stx_fp_HandlerLift.apply = function(self,fn) {
	stx_fp_ContinuationLift.apply(self,fn);
};
stx_fp_HandlerLift.map = function(self,fn) {
	return stx_fp_HandlerLift.lift(stx_fp_ContinuationLift.map(self,fn));
};
stx_fp_HandlerLift.flat_map = function(self,fn) {
	return stx_fp_HandlerLift.lift(stx_fp_ContinuationLift.flat_map(self,fn));
};
stx_fp_HandlerLift.zip_with = function(self,that,fn) {
	return stx_fp_HandlerLift.lift(stx_fp_ContinuationLift.zip_with(self,that,fn));
};
var stx_fp_KindApi = function() { };
stx_fp_KindApi.__name__ = "stx.fp.KindApi";
stx_fp_KindApi.__isInterface__ = true;
stx_fp_KindApi.prototype = {
	fix: null
	,__class__: stx_fp_KindApi
};
var stx_fp_Kind = {};
stx_fp_Kind.__properties__ = {get_self:"get_self"};
stx_fp_Kind._new = function(self) {
	return self;
};
stx_fp_Kind.lift = function(self) {
	return stx_fp_Kind._new(self);
};
stx_fp_Kind.prj = function(this1) {
	return this1;
};
stx_fp_Kind.get_self = function(this1) {
	return stx_fp_Kind.lift(this1);
};
var stx_fp_LazyStreamTrigger = {};
stx_fp_LazyStreamTrigger.__properties__ = {get_self:"get_self"};
stx_fp_LazyStreamTrigger._new = function(self) {
	return self;
};
stx_fp_LazyStreamTrigger.lift = function(self) {
	return stx_fp_LazyStreamTrigger._new(self);
};
stx_fp_LazyStreamTrigger.fromFn = function(fn) {
	return { next : fn};
};
stx_fp_LazyStreamTrigger.prj = function(this1) {
	return this1;
};
stx_fp_LazyStreamTrigger.get_self = function(this1) {
	return stx_fp_LazyStreamTrigger.lift(this1);
};
var stx_fp_LazyStreamSum = $hxEnums["stx.fp.LazyStreamSum"] = { __ename__:"stx.fp.LazyStreamSum",__constructs__:null
	,LazyVal: ($_=function(val,next) { return {_hx_index:0,val:val,next:next,__enum__:"stx.fp.LazyStreamSum",toString:$estr}; },$_._hx_name="LazyVal",$_.__params__ = ["val","next"],$_)
};
stx_fp_LazyStreamSum.__constructs__ = [stx_fp_LazyStreamSum.LazyVal];
var stx_fp_LazyStream = {};
stx_fp_LazyStream._new = function(self) {
	return self;
};
stx_fp_LazyStream.lift = function(self) {
	return self;
};
stx_fp_LazyStream.zero = function() {
	return stx_fp_LazyStream.ZERO;
};
stx_fp_LazyStream.fromRec = function(v) {
	var v1 = v;
	return stx_fp_LazyStream.lift(stx_fp_LazyStreamSum.LazyVal(stx_pico_Option.fromNullT(v()),stx_fp_LazyStreamTrigger.fromFn(function() {
		return stx_fp_LazyStream.fromRec(v1);
	})));
};
stx_fp_LazyStream.fromTuple = function(tp) {
	return stx_fp_LazyStream.lift(stx_fp_LazyStreamSum.LazyVal(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp)));
};
stx_fp_LazyStream.make = function(xs,x) {
	return stx_fp_LazyStream.fromTuple(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,x,xs));
};
stx_fp_LazyStream.unit = function() {
	return stx_fp_LazyStreamSum.LazyVal(null,stx_fp_LazyStreamTrigger.fromFn(stx_fp_LazyStream.unit));
};
stx_fp_LazyStream.pure = function(x) {
	return stx_fp_LazyStream.make(stx_fp_LazyStreamTrigger.fromFn(stx_fp_LazyStream.unit),x);
};
stx_fp_LazyStream.reply = function(this1) {
	return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this1.val,this1.next);
};
var stx_fp_Monoid = {};
stx_fp_Monoid._new = function(self) {
	return self;
};
stx_fp_Monoid.put = function(this1,v) {
	return { unit : function() {
		return this1.plus(this1.unit(),v);
	}, plus : function(l,r) {
		return this1.plus(l,r);
	}};
};
stx_fp_Monoid.into = function(this1,next,fn) {
	return stx_fp_Monoid.put(this1,fn(this1,next));
};
var stx_fp_SemiGroup = {};
stx_fp_SemiGroup._new = function(self) {
	return self;
};
var stx_fp_State = {};
stx_fp_State._new = function(self) {
	return self;
};
stx_fp_State.unit = function() {
	return function(p) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,null,p);
	};
};
stx_fp_State.pure = function(r) {
	return function(p) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,r,p);
	};
};
var stx_fp_StateLift = function() { };
stx_fp_StateLift.__name__ = "stx.fp.StateLift";
stx_fp_StateLift.exec = function(self,p) {
	return stx_nano_CoupleLift.snd(self(p));
};
stx_fp_StateLift.eval = function(self,p) {
	return stx_nano_CoupleLift.fst(self(p));
};
stx_fp_StateLift.map = function(self,fn) {
	return function(p) {
		return stx_nano_CoupleLift.decouple(self(p),function(r,p) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,fn(r),p);
		});
	};
};
stx_fp_StateLift.mod = function(self,fn) {
	return function(p) {
		return stx_nano_CoupleLift.decouple(self(p),function(r,p) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,r,fn(p));
		});
	};
};
stx_fp_StateLift.flat_map = function(self,fn) {
	return function(p) {
		return stx_nano_CoupleLift.decouple(self(p),function(r,p) {
			return (fn(r))(p);
		});
	};
};
var stx_lift_ArrayLift = function() { };
stx_lift_ArrayLift.__name__ = "stx.lift.ArrayLift";
stx_lift_ArrayLift.flatten = function(arrs) {
	var res = [];
	var _g = 0;
	while(_g < arrs.length) {
		var arr = arrs[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < arr.length) res.push(arr[_g1++]);
	}
	return res;
};
stx_lift_ArrayLift.interleave = function(alls) {
	var res = [];
	if(alls.length > 0) {
		var minLength = alls[0].length;
		var _g = 0;
		while(_g < alls.length) minLength = Std.int(Math.min(minLength,alls[_g++].length));
		var length = minLength;
		var i = 0;
		while(i < length) {
			var _g = 0;
			while(_g < alls.length) res.push(alls[_g++][i]);
			++i;
		}
	}
	return res;
};
stx_lift_ArrayLift.is_defined = function(self) {
	return self.length > 0;
};
stx_lift_ArrayLift.cons = function(self,t) {
	var copy = stx_lift_ArrayLift.copy(self);
	copy.unshift(t);
	return copy;
};
stx_lift_ArrayLift.snoc = function(self,t) {
	var copy = stx_lift_ArrayLift.copy(self);
	copy.push(t);
	return copy;
};
stx_lift_ArrayLift.set = function(self,i,v) {
	var arr0 = self.slice();
	arr0[i] = v;
	return arr0;
};
stx_lift_ArrayLift.get = function(self,i) {
	return self[i];
};
stx_lift_ArrayLift.head = function(self) {
	if(self.length == 0) {
		return haxe_ds_Option.None;
	} else if(self[0] == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(self[0]);
	}
};
stx_lift_ArrayLift.tail = function(self) {
	return self.slice(1);
};
stx_lift_ArrayLift.last = function(self) {
	var v = self[self.length > 0 ? self.length - 1 : 0];
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_lift_ArrayLift.copy = function(self) {
	return [].concat(self);
};
stx_lift_ArrayLift.concat = function(self,that) {
	var acc = stx_lift_ArrayLift.copy(self);
	var _g = 0;
	while(_g < self.length) acc.push(self[_g++]);
	return acc;
};
stx_lift_ArrayLift.bind_fold = function(self,pure,init,bind,fold) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		return bind(memo,function(b) {
			return pure(fold(next,b));
		});
	},pure(init));
};
stx_lift_ArrayLift.reduce = function(self,unit,pure,plus) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		return plus(memo,pure(next));
	},unit());
};
stx_lift_ArrayLift.map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) n.push(fn(self[_g++]));
	return n;
};
stx_lift_ArrayLift.mapi = function(self,fn) {
	var n = [];
	var e = null;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		e = self[i];
		n.push(fn(i,e));
	}
	return n;
};
stx_lift_ArrayLift.flat_map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e2 = $getIterator(fn(self[_g++]));
		while(e2.hasNext()) n.push(e2.next());
	}
	return n;
};
stx_lift_ArrayLift.lfold = function(self,fn,memo) {
	var r = memo;
	var _g = 0;
	while(_g < self.length) r = fn(self[_g++],r);
	return r;
};
stx_lift_ArrayLift.lfold1 = function(self,fn) {
	var folded = stx_lift_ArrayLift.head(self);
	var tail = stx_lift_ArrayLift.tail(self);
	return stx_pico_OptionLift.map(folded,function(memo) {
		var _g = 0;
		while(_g < tail.length) memo = fn(memo,tail[_g++]);
		return memo;
	});
};
stx_lift_ArrayLift.rfold = function(self,fn,z) {
	var r = z;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) r = fn(self[self.length - 1 - _g++],r);
	return r;
};
stx_lift_ArrayLift.rfold1 = function(self,fn) {
	return stx_lift_ArrayLift.lfold1(stx_lift_ArrayLift.reversed(self),fn);
};
stx_lift_ArrayLift.lscan = function(self,f,init) {
	var result = [init];
	var _g = 0;
	while(_g < self.length) result.push(f(self[_g++],init));
	return result;
};
stx_lift_ArrayLift.lscan1 = function(self,f) {
	var result = [];
	if(0 == self.length) {
		return result;
	}
	var accum = self[0];
	result.push(accum);
	var _g = 1;
	var _g1 = self.length;
	while(_g < _g1) result.push(f(self[_g++],accum));
	return result;
};
stx_lift_ArrayLift.rscan = function(self,init,f) {
	var a = self.slice();
	a.reverse();
	return stx_lift_ArrayLift.lscan(a,f,init);
};
stx_lift_ArrayLift.rscan1 = function(self,f) {
	var a = self.slice();
	a.reverse();
	return stx_lift_ArrayLift.lscan1(a,f);
};
stx_lift_ArrayLift.filter = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			n.push(e);
		}
	}
	return n;
};
stx_lift_ArrayLift.map_filter = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		var _g = fn(next);
		if(_g._hx_index == 0) {
			return stx_lift_ArrayLift.snoc(memo,_g.v);
		} else {
			return memo;
		}
	},[]);
};
stx_lift_ArrayLift.whilst = function(self,fn) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			r.push(e);
		} else {
			break;
		}
	}
	return r;
};
stx_lift_ArrayLift.ltaken = function(self,n) {
	return self.slice(0,Std.int(Math.min(n,self.length)));
};
stx_lift_ArrayLift.ldropn = function(self,n) {
	if(n >= self.length) {
		return [];
	} else {
		return self.slice(n);
	}
};
stx_lift_ArrayLift.rdropn = function(self,n) {
	if(self != null && n >= self.length) {
		return [];
	} else {
		return self.splice(0,self.length - n);
	}
};
stx_lift_ArrayLift.ldrop = function(self,p) {
	var r = [].concat(self);
	var _g = 0;
	while(_g < self.length) if(p(self[_g++])) {
		r.shift();
	} else {
		break;
	}
	return r;
};
stx_lift_ArrayLift.search = function(self,fn) {
	var out = haxe_ds_Option.None;
	var _g = 0;
	while(_g < self.length) {
		var el = self[_g];
		++_g;
		if(fn(el)) {
			out = haxe_ds_Option.Some(el);
			break;
		}
	}
	return out;
};
stx_lift_ArrayLift.all = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return fn(b);
		} else {
			return false;
		}
	},true);
};
stx_lift_ArrayLift.any = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return true;
		} else {
			return fn(b);
		}
	},false);
};
stx_lift_ArrayLift.zip_with = function(self,that,fn) {
	var next = [];
	var lower = Std.int(Math.min(self.length,that.length));
	var _g = 0;
	while(_g < lower) {
		var i = _g++;
		next.push(fn(self[i],that[i]));
	}
	return next;
};
stx_lift_ArrayLift.cross_with = function(self,that,fn) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var va = self[_g++];
		var _g1 = 0;
		while(_g1 < that.length) r.push(fn(va,that[_g1++]));
	}
	return r;
};
stx_lift_ArrayLift.difference_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	while(_g < self.length) {
		var e = [self[_g]];
		++_g;
		if(!stx_lift_ArrayLift.any(that,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_lift_ArrayLift.union_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	while(_g < self.length) res.push(self[_g++]);
	var _g = 0;
	while(_g < that.length) {
		var e = [that[_g]];
		++_g;
		if(!stx_lift_ArrayLift.any(res,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_lift_ArrayLift.unique_with = function(self,eq) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		var exists = stx_lift_ArrayLift.any(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		stx_lift_ArrayLift.search(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		if(!exists) {
			r.push(e);
		}
	}
	return r;
};
stx_lift_ArrayLift.nub_with = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		var _g = f;
		var a1 = b;
		if(stx_lift_ArrayLift.any(a,function(a2) {
			return _g(a1,a2);
		})) {
			return a;
		} else {
			return stx_lift_ArrayLift.snoc(a,b);
		}
	},[]);
};
stx_lift_ArrayLift.intersect_with = function(self,that,f) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		var _g = f;
		var a1 = next;
		var _g1 = function(a2) {
			return _g(a1,a2);
		};
		if(stx_lift_ArrayLift.any(that,_g1) == true) {
			return stx_lift_ArrayLift.snoc(memo,next);
		} else {
			return memo;
		}
	},[]);
};
stx_lift_ArrayLift.reversed = function(self) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		a.unshift(b);
		return a;
	},[]);
};
stx_lift_ArrayLift.count = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		return a + (f(b) ? 1 : 0);
	},0);
};
stx_lift_ArrayLift.size = function(self) {
	return self.length;
};
stx_lift_ArrayLift.index_of = function(self,t) {
	var index = 0;
	var ok = false;
	var _g = 0;
	while(_g < self.length) {
		if(t(self[_g++])) {
			ok = true;
			break;
		}
		++index;
	}
	if(ok) {
		return index;
	} else {
		return -1;
	}
};
stx_lift_ArrayLift.has = function(self,obj) {
	var index = self.indexOf(obj);
	if(index == -1) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(index);
	}
};
stx_lift_ArrayLift.partition = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		if(f(next)) {
			memo.a.push(next);
		} else {
			memo.b.push(next);
		}
		return memo;
	},{ a : [], b : []});
};
stx_lift_ArrayLift.chunk = function(self,size) {
	var slices = [];
	var rest = 0;
	var _g = 0;
	while(_g < size.length) {
		var next = rest + size[_g++];
		slices.push(self.slice(rest,next));
		rest = next;
	}
	return slices;
};
stx_lift_ArrayLift.pad = function(self,len,val) {
	var len0 = len - self.length;
	var arr0 = [];
	var _g = 0;
	while(_g < len0) {
		++_g;
		arr0.push(val);
	}
	return self.concat(arr0);
};
stx_lift_ArrayLift.fill = function(self,def) {
	var result = new Array(self.length);
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		var x = self[i];
		result[i] = x == null ? def : x;
	}
	return result;
};
stx_lift_ArrayLift.toIterable = function(self) {
	return self;
};
stx_lift_ArrayLift.toMap = function(self) {
	var mp = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < self.length) {
		var val = self[_g++]();
		mp.set(val.a,val.b);
	}
	return mp;
};
stx_lift_ArrayLift.random = function(self) {
	var len = self.length;
	return self[Math.round(Math.random() * (len - 1))];
};
stx_lift_ArrayLift.shuffle = function(self) {
	var res = [];
	var cp = self.slice();
	while(cp.length > 0) res.push(cp.splice(Math.floor(Math.random() * cp.length),1)[0]);
	return res;
};
stx_lift_ArrayLift.and_with = function(self,that,eq) {
	return stx_lift_ArrayLift.lfold(stx_lift_ArrayLift.zip_with(self,that,function(l,r) {
		return { a : l, b : r};
	}),function(next,memo) {
		if(memo) {
			if(eq(next.a,next.b)) {
				return eq(next.a,next.b);
			} else {
				return false;
			}
		} else {
			return memo;
		}
	},true);
};
stx_lift_ArrayLift.rotate = function(self,num) {
	num %= self.length;
	var l = stx_lift_ArrayLift.ltaken(self,num);
	var r = stx_lift_ArrayLift.ldropn(self,num);
	if(num < 0) {
		return stx_lift_ArrayLift.concat(l,r);
	} else if(num > 1) {
		return stx_lift_ArrayLift.concat(l,r);
	} else {
		return self;
	}
};
stx_lift_ArrayLift.iterator = function(self) {
	return new haxe_iterators_ArrayIterator(self);
};
stx_lift_ArrayLift.elide = function(self) {
	return stx_lift_ArrayLift.map(self,function(v) {
		return v;
	});
};
stx_lift_ArrayLift.prj = function(self) {
	return self;
};
var stx_log_Includes = {};
stx_log_Includes.clear = function(this1) {
	while(this1.length > 0) this1.pop();
};
var stx_log_Level = {};
stx_log_Level._new = function(self) {
	return self;
};
stx_log_Level.asInt = function(this1) {
	return this1;
};
stx_log_Level.toString = function(this1) {
	switch(this1) {
	case 0:
		return "CRAZY";
	case 1:
		return "TRACE";
	case 2:
		return "DEBUG";
	case 3:
		return "INFO";
	case 4:
		return "WARN";
	case 5:
		return "ERROR";
	case 6:
		return "FATAL";
	}
};
var stx_log_LogCustomParameters = {};
stx_log_LogCustomParameters.__properties__ = {get_stamp:"get_stamp"};
stx_log_LogCustomParameters._new = function(self) {
	return stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,self),[]);
};
stx_log_LogCustomParameters.get_stamp = function(this1) {
	var obj = null;
	var _g = 0;
	while(_g < this1.length) {
		var x = this1[_g];
		++_g;
		if(Type.getClass(x) == stx_log_Stamp) {
			obj = x;
			break;
		}
	}
	if(obj == null) {
		obj = new stx_log_Stamp();
		this1.push(obj);
	}
	return obj;
};
stx_log_LogCustomParameters.restamp = function(this1,fn) {
	var indexed = stx_pico_OptionLift.def(stx_lift_ArrayLift.search(stx_lift_ArrayLift.mapi(this1,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	}),function(tp) {
		return stx_log_LogCustomParameters.is_stamp(stx_nano_CoupleLift.snd(tp));
	}),function() {
		var stamp = new stx_log_Stamp();
		var index = this1.length;
		this1[index] = stamp;
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,index,stamp);
	});
	var next_stamp = fn(stx_nano_CoupleLift.snd(indexed));
	var copy = this1.slice();
	copy[stx_nano_CoupleLift.fst(indexed)] = next_stamp;
	return copy;
};
stx_log_LogCustomParameters.is_stamp = function(v) {
	return Type.getClass(v) == stx_log_Stamp;
};
var stx_log_LogFileName = {};
stx_log_LogFileName.__properties__ = {get_self:"get_self"};
stx_log_LogFileName._new = function(self) {
	return self;
};
stx_log_LogFileName.lift = function(self) {
	return stx_log_LogFileName._new(self);
};
stx_log_LogFileName.get_pack = function(this1) {
	var parts = this1.split(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__));
	parts.pop();
	return parts;
};
stx_log_LogFileName.get_canonical = function(this1) {
	return this1.split(".")[0].split(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__)).join(".");
};
stx_log_LogFileName.prj = function(this1) {
	return this1;
};
stx_log_LogFileName.get_self = function(this1) {
	return stx_log_LogFileName.lift(this1);
};
var stx_log_ScopeSum = $hxEnums["stx.log.ScopeSum"] = { __ename__:"stx.log.ScopeSum",__constructs__:null
	,ScopeMethod: {_hx_name:"ScopeMethod",_hx_index:0,__enum__:"stx.log.ScopeSum",toString:$estr}
	,ScopeClass: {_hx_name:"ScopeClass",_hx_index:1,__enum__:"stx.log.ScopeSum",toString:$estr}
	,ScopeModule: {_hx_name:"ScopeModule",_hx_index:2,__enum__:"stx.log.ScopeSum",toString:$estr}
};
stx_log_ScopeSum.__constructs__ = [stx_log_ScopeSum.ScopeMethod,stx_log_ScopeSum.ScopeClass,stx_log_ScopeSum.ScopeModule];
var stx_log_Scoping = function(method,type,module) {
	this.method = method;
	this.type = type;
	this.module = module;
};
stx_log_Scoping.__name__ = "stx.log.Scoping";
stx_log_Scoping.prototype = {
	method: null
	,type: null
	,module: null
	,copy: function(method,type,module) {
		return new stx_log_Scoping(stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,method),this.method),stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,type),this.type),stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,module),this.module));
	}
	,with_method: function(name) {
		return this.copy(name);
	}
	,toString: function() {
		return "(" + this.module + "::" + this.type + "::" + this.method + ")";
	}
	,__class__: stx_log_Scoping
};
var stx_log_DebugLogger = function(logic,format) {
	stx_log_Logger.call(this,logic,format);
};
stx_log_DebugLogger.__name__ = "stx.log.DebugLogger";
stx_log_DebugLogger.__super__ = stx_log_Logger;
stx_log_DebugLogger.prototype = $extend(stx_log_Logger.prototype,{
	__class__: stx_log_DebugLogger
});
var stx_log_Stamp = function(id,level,timestamp,tags,hidden) {
	if(hidden == null) {
		hidden = false;
	}
	var _g = function(value) {
		return stx_nano_lift_LiftNano.uuid(stx_nano_Wildcard.__,value);
	};
	var value = "xxxxx";
	var tmp = function() {
		return _g(value);
	};
	this.id = stx_pico_OptionLift.def(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,id),tmp);
	this.level = stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,level),0);
	this.timestamp = stx_pico_OptionLift.def(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,timestamp),Date.now);
	this.tags = stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,tags),[]);
	this.hidden = hidden;
};
stx_log_Stamp.__name__ = "stx.log.Stamp";
stx_log_Stamp.prototype = {
	id: null
	,level: null
	,timestamp: null
	,tags: null
	,hidden: null
	,copy: function(id,level,timestamp,tags,hidden) {
		return new stx_log_Stamp(stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,id),this.id),stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,level),this.level),stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,timestamp),this.timestamp),stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,tags),this.tags),stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,hidden),this.hidden));
	}
	,relevel: function(level) {
		return this.copy(null,level);
	}
	,tag: function(tag) {
		return this.copy(null,null,null,stx_lift_ArrayLift.snoc(this.tags,tag));
	}
	,hide: function() {
		return this.copy(this.id,this.level,this.timestamp,this.tags,true);
	}
	,is_zero: function() {
		return this == stx_log_Stamp.ZERO;
	}
	,__class__: stx_log_Stamp
};
var stx_log_filter_term_PosPredicate = function(delegate) {
	stx_log_Filter.call(this);
	this.delegate = delegate;
};
stx_log_filter_term_PosPredicate.__name__ = "stx.log.filter.term.PosPredicate";
stx_log_filter_term_PosPredicate.__super__ = stx_log_Filter;
stx_log_filter_term_PosPredicate.prototype = $extend(stx_log_Filter.prototype,{
	delegate: null
	,applyI: function(value) {
		return this.delegate.applyI(value.source);
	}
	,__class__: stx_log_filter_term_PosPredicate
});
var stx_log_filter_term_Race = function() {
	stx_log_Filter.call(this);
	this.races = [];
};
stx_log_filter_term_Race.__name__ = "stx.log.filter.term.Race";
stx_log_filter_term_Race.__super__ = stx_log_Filter;
stx_log_filter_term_Race.prototype = $extend(stx_log_Filter.prototype,{
	races: null
	,applyI: function(value) {
		var race = Lambda.fold(this.races,function(next,memo) {
			return stx_pico_OptionLift.fold(memo,function(v) {
				return stx_nano_lift_LiftNano.if_else(next.timestamp > v.timestamp,function() {
					return haxe_ds_Option.Some(next);
				},function() {
					return haxe_ds_Option.Some(v);
				});
			},function() {
				return haxe_ds_Option.Some(next);
			});
		},haxe_ds_Option.None);
		if(race._hx_index == 0) {
			haxe_Log.trace("wins race",{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 24, className : "stx.log.filter.term.Race", methodName : "applyI"});
			var out = stx_log_LogPosition.match(value.source,race.v);
			if(out) {
				haxe_Log.trace("wins race",{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 27, className : "stx.log.filter.term.Race", methodName : "applyI"});
			}
			return stx_nano_lift_LiftNano.if_else(out,function() {
				return stx_nano_Report.unit();
			},function() {
				return stx_nano_Report.pure(stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 29, className : "stx.log.filter.term.Race", methodName : "applyI"}),stx_fail_LogFailure.E_Log_LosesRace));
			});
		} else {
			return stx_nano_Report.pure(stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 30, className : "stx.log.filter.term.Race", methodName : "applyI"}),stx_fail_LogFailure.E_Log_LosesRace));
		}
	}
	,__class__: stx_log_filter_term_Race
});
var stx_log_filter_term_race_Stamp = {};
stx_log_filter_term_race_Stamp.__properties__ = {get_self:"get_self"};
stx_log_filter_term_race_Stamp._new = function(self) {
	return self;
};
stx_log_filter_term_race_Stamp.lift = function(self) {
	return stx_log_filter_term_race_Stamp._new(self);
};
stx_log_filter_term_race_Stamp.make = function(scoping,timestamp,scope) {
	return { scoping : scoping, timestamp : timestamp, scope : stx_pico_OptionLift.defv(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,scope),stx_log_ScopeSum.ScopeMethod)};
};
stx_log_filter_term_race_Stamp.prj = function(this1) {
	return this1;
};
stx_log_filter_term_race_Stamp.get_self = function(this1) {
	return stx_log_filter_term_race_Stamp.lift(this1);
};
var stx_log_output_term_Js = function() {
	stx_pico_Clazz.call(this);
};
stx_log_output_term_Js.__name__ = "stx.log.output.term.Js";
stx_log_output_term_Js.__interfaces__ = [stx_log_OutputApi];
stx_log_output_term_Js.__super__ = stx_pico_Clazz;
stx_log_output_term_Js.prototype = $extend(stx_pico_Clazz.prototype,{
	render: function(v,si) {
		var msg = "";
		msg += js_Boot.__string_rec(v,"");
		var d;
		var tmp;
		if(typeof(document) != "undefined") {
			d = document.getElementById("haxe:trace");
			tmp = d != null;
		} else {
			tmp = false;
		}
		if(tmp) {
			d.innerHTML += __unhtml(msg) + "<br/>";
		} else if(typeof console != "undefined" && console.log != null) {
			console.log(msg);
		}
	}
	,__class__: stx_log_output_term_Js
});
var stx_nano_CoupleLift = function() { };
stx_nano_CoupleLift.__name__ = "stx.nano.CoupleLift";
stx_nano_CoupleLift.map = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			tp(ti,fn(tii));
		});
	};
};
stx_nano_CoupleLift.mapl = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			tp(fn(ti),tii);
		});
	};
};
stx_nano_CoupleLift.mapr = function(self,fn) {
	return stx_nano_CoupleLift.map(self,fn);
};
stx_nano_CoupleLift.fst = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(tI,_) {
		return tI;
	});
};
stx_nano_CoupleLift.snd = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(_,tII) {
		return tII;
	});
};
stx_nano_CoupleLift.swap = function(self) {
	return function(tp) {
		self(function(ti,tii) {
			tp(tii,ti);
		});
	};
};
stx_nano_CoupleLift.equals = function(lhs,rhs) {
	return stx_nano_CoupleLift.decouple(lhs,function(t0l,t0r) {
		return stx_nano_CoupleLift.decouple(rhs,function(t1l,t1r) {
			if(t0l == t1l) {
				return t0r == t1r;
			} else {
				return false;
			}
		});
	});
};
stx_nano_CoupleLift.reduce = function(self,flhs,frhs,plus) {
	return stx_nano_CoupleLift.decouple(self,function(tI,tII) {
		return plus(flhs(tI),frhs(tII));
	});
};
stx_nano_CoupleLift.decouple = function(self,fn) {
	var out = null;
	self(function(ti,tii) {
		out = fn(ti,tii);
	});
	return out;
};
stx_nano_CoupleLift.cat = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(l,r) {
		return [haxe_ds_Either.Left(l),haxe_ds_Either.Right(r)];
	});
};
stx_nano_CoupleLift.tup = function(self) {
	return stx_nano_CoupleLift.decouple(self,stx_Tup2.tuple2);
};
stx_nano_CoupleLift.toString = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(l,r) {
		return "(" + Std.string(l) + " " + Std.string(r) + ")";
	});
};
var stx_nano_Couple = {};
stx_nano_Couple.toString = function(this1) {
	return stx_nano_CoupleLift.toString(this1);
};
var stx_nano_Defect = {};
stx_nano_Defect.unit = function() {
	return [];
};
stx_nano_Defect.pure = function(e) {
	return [e];
};
stx_nano_Defect.toErr = function(this1) {
	return stx_nano_Err.grow(this1,{ fileName : "stx/nano/Defect.hx", lineNumber : 11, className : "stx.nano._Defect.Defect_Impl_", methodName : "toErr"});
};
stx_nano_Defect.elide = function(this1) {
	return this1;
};
stx_nano_Defect.entype = function(this1) {
	return this1;
};
stx_nano_Defect.concat = function(this1,that) {
	return this1.concat(that);
};
var stx_nano_FailCode = {};
stx_nano_FailCode._new = function(self) {
	return self;
};
stx_nano_FailCode.fromString = function(str) {
	return stx_nano_FailCode._new(str);
};
stx_nano_FailCode.toString = function(this1) {
	return this1;
};
var stx_nano_FailureSum = $hxEnums["stx.nano.FailureSum"] = { __ename__:"stx.nano.FailureSum",__constructs__:null
	,ERR_OF: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.nano.FailureSum",toString:$estr}; },$_._hx_name="ERR_OF",$_.__params__ = ["v"],$_)
	,ERR: ($_=function(spec) { return {_hx_index:1,spec:spec,__enum__:"stx.nano.FailureSum",toString:$estr}; },$_._hx_name="ERR",$_.__params__ = ["spec"],$_)
};
stx_nano_FailureSum.__constructs__ = [stx_nano_FailureSum.ERR_OF,stx_nano_FailureSum.ERR];
var stx_nano_FailureLift = function() { };
stx_nano_FailureLift.__name__ = "stx.nano.FailureLift";
stx_nano_FailureLift.fold = function(self,val,def) {
	switch(self._hx_index) {
	case 0:
		return val(self.v);
	case 1:
		return def(self.spec);
	}
};
stx_nano_FailureLift.value = function(self) {
	return stx_nano_FailureLift.fold(self,haxe_ds_Option.Some,function(_) {
		return haxe_ds_Option.None;
	});
};
stx_nano_FailureLift.toString = function(self) {
	return stx_nano_FailureLift.fold(self,function(v) {
		return Std.string(v);
	},function(n) {
		return stx_nano_FailCode.toString(n);
	});
};
var stx_nano_Failure = {};
stx_nano_Failure.__properties__ = {get_self:"get_self"};
stx_nano_Failure._new = function(self) {
	return self;
};
stx_nano_Failure.lift = function(self) {
	return stx_nano_Failure._new(self);
};
stx_nano_Failure.prj = function(this1) {
	return this1;
};
stx_nano_Failure.get_self = function(this1) {
	return stx_nano_Failure.lift(this1);
};
var stx_nano_Fault = {};
stx_nano_Fault._new = function(self) {
	return self;
};
stx_nano_Fault.of = function(this1,data,code) {
	return new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF(data)),haxe_ds_Option.None,this1);
};
stx_nano_Fault.empty = function(this1) {
	return new stx_nano_Err(haxe_ds_Option.None,haxe_ds_Option.None,this1);
};
stx_nano_Fault.any = function(this1,msg) {
	return new stx_nano_Err(stx_pico_Option.fromNullT(stx_nano_FailureSum.ERR(stx_nano_FailCode.fromString(msg))),null,this1);
};
stx_nano_Fault.failure = function(this1,failure) {
	return new stx_nano_Err(haxe_ds_Option.Some(failure),null,this1);
};
stx_nano_Fault.err = function(this1,code) {
	return new stx_nano_Err(haxe_ds_Option.Some(stx_nano_FailureSum.ERR(code)),null,this1);
};
var stx_nano_IterLift = function() { };
stx_nano_IterLift.__name__ = "stx.nano.IterLift";
stx_nano_IterLift.cross = function(self,that) {
	return { iterator : function() {
		var l_it = $getIterator(self);
		var r_it = $getIterator(that);
		var l_val = null;
		var rec = null;
		rec = function() {
			if(l_val != null && l_it.hasNext()) {
				l_val = l_it.next();
			}
			if(r_it.hasNext()) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l_val,r_it.next());
			} else {
				if(l_it.hasNext()) {
					r_it = $getIterator(that);
				}
				l_val = null;
				return rec();
			}
		};
		return { next : rec, hasNext : function() {
			if(!l_it.hasNext()) {
				return r_it.hasNext();
			} else {
				return false;
			}
		}};
	}};
};
stx_nano_IterLift.zip = function(l,r) {
	return { iterator : function() {
		var lit = $getIterator(l);
		var rit = $getIterator(r);
		return { next : function() {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lit.next(),rit.next());
		}, hasNext : function() {
			if(lit.hasNext()) {
				return rit.hasNext();
			} else {
				return false;
			}
		}};
	}};
};
stx_nano_IterLift.ldrop = function(it,n) {
	return { iterator : function() {
		var iter = $getIterator(it);
		while(n > 0) {
			iter.next();
			n -= 1;
		}
		return iter;
	}};
};
stx_nano_IterLift.toMap = function(iter,fn,map) {
	var i = $getIterator(iter);
	while(i.hasNext()) stx_nano_CoupleLift.decouple(fn(i.next()),$bind(map,map.set));
	return map;
};
stx_nano_IterLift.map = function(iter,fn) {
	return { iterator : function() {
		var i = $getIterator(iter);
		return { next : function() {
			return fn(i.next());
		}, hasNext : function() {
			return i.hasNext();
		}};
	}};
};
stx_nano_IterLift.head = function(iter) {
	var it = $getIterator(iter);
	if(it.hasNext()) {
		return haxe_ds_Option.Some(it.next());
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_IterLift.tail = function(iter) {
	return { iterator : function() {
		var it = $getIterator(iter);
		it.next();
		return { next : $bind(it,it.next), hasNext : $bind(it,it.hasNext)};
	}};
};
stx_nano_IterLift.lfold = function(iter,mapper,seed) {
	var folded = seed;
	var e = $getIterator(iter);
	while(e.hasNext()) folded = mapper(e.next(),folded);
	return folded;
};
stx_nano_IterLift.lfold1 = function(iter,mapper) {
	return stx_pico_OptionLift.map(stx_nano_IterLift.head(iter),function(seed) {
		return stx_nano_IterLift.lfold(stx_nano_IterLift.tail(iter),mapper,seed);
	});
};
stx_nano_IterLift.toGenerator = function(self) {
	var iter = haxe_ds_Option.None;
	return function() {
		if(iter == haxe_ds_Option.None) {
			iter = haxe_ds_Option.Some($getIterator(self));
		}
		return stx_pico_OptionLift.flat_map(iter,function(x) {
			if(x.hasNext()) {
				return haxe_ds_Option.Some(x.next());
			} else {
				return haxe_ds_Option.None;
			}
		});
	};
};
stx_nano_IterLift.toArray = function(self) {
	var arr = [];
	var v = $getIterator(self);
	while(v.hasNext()) arr.push(v.next());
	return arr;
};
stx_nano_IterLift.foldr = function(iter,fn,init) {
	var data = init;
	var iterator = $getIterator(iter);
	var eff = null;
	eff = function() {
		if(iterator.hasNext()) {
			var next = iterator.next();
			eff();
			data = fn(next,data);
		}
	};
	eff();
	return data;
};
stx_nano_IterLift.foldl = function(iter,fn,init) {
	var data = init;
	var iterator = $getIterator(iter);
	var eff = null;
	eff = function() {
		while(true) {
			if(iterator.hasNext()) {
				var next = iterator.next();
				data = fn(next,data);
				continue;
			}
			return;
		}
	};
	eff();
	return data;
};
var stx_nano_Iter = {};
stx_nano_Iter._new = function(self) {
	return self;
};
stx_nano_Iter.prj = function(this1) {
	return this1;
};
var stx_nano_KV = {};
stx_nano_KV._new = function(self) {
	return self;
};
stx_nano_KV.map = function(this1,fn) {
	return stx_nano_KV.fromObj({ key : this1.key, val : fn(this1.val)});
};
stx_nano_KV.fromObj = function(v) {
	return stx_nano_KV._new(v);
};
stx_nano_KV.fromTup = function(tp) {
	return stx_nano_KV._new({ key : stx_nano_CoupleLift.fst(tp), val : stx_nano_CoupleLift.snd(tp)});
};
stx_nano_KV.fst = function(this1) {
	return this1.key;
};
stx_nano_KV.snd = function(this1) {
	return this1.val;
};
stx_nano_KV.into = function(this1,fn) {
	return fn(this1.key,this1.val);
};
stx_nano_KV.decouple = function(this1,fn) {
	return fn(this1.key,this1.val);
};
var stx_nano_PositionLift = function() { };
stx_nano_PositionLift.__name__ = "stx.nano.PositionLift";
stx_nano_PositionLift.toString = function(pos) {
	if(pos == null) {
		return ":pos ()";
	}
	var fn = pos.methodName;
	return ":pos (object :file_name " + fn + " :class_name " + pos.className + " :method_name " + fn + "  :line_number " + pos.lineNumber + ")";
};
stx_nano_PositionLift.clone = function(p) {
	return stx_nano_Position.make(p.fileName,p.className,p.methodName,p.lineNumber,p.customParams);
};
stx_nano_PositionLift.withFragmentName = function(pos) {
	return "" + pos.className + "." + pos.methodName;
};
stx_nano_PositionLift.toStringClassMethodLine = function(pos) {
	return "(" + stx_nano_PositionLift.withFragmentName(pos) + "@" + pos.lineNumber + ")";
};
stx_nano_PositionLift.to_vscode_clickable_link = function(pos) {
	return "" + pos.fileName + ":" + pos.lineNumber;
};
stx_nano_PositionLift.toString_name_method_line = function(pos) {
	return "" + stx_pico_Identifier.get_name(stx_nano_PositionLift.identifier(stx_LiftPos.lift(pos))) + "." + pos.methodName + "@" + pos.lineNumber;
};
stx_nano_PositionLift.withCustomParams = function(p,v) {
	p = stx_nano_PositionLift.clone(p);
	if(p.customParams == null) {
		p.customParams = [];
	}
	p.customParams.push(v);
	return p;
};
stx_nano_PositionLift.identifier = function(self) {
	return stx_pico_Identifier._new(stx_lift_ArrayLift.get(stx_nano_Position.get_fileName(stx_nano_lift_LiftNano.toPosition(self)).split("."),0).split(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__)).join("."));
};
var stx_nano_Position = {};
stx_nano_Position.__properties__ = {get_customParams:"get_customParams",get_lineNummber:"get_lineNummber",get_methodName:"get_methodName",get_className:"get_className",get_fileName:"get_fileName"};
stx_nano_Position._new = function(self) {
	return self;
};
stx_nano_Position.lift = function(pos) {
	return stx_nano_Position.fromPos(pos);
};
stx_nano_Position.make = function(fileName,className,methodName,lineNumber,customParams) {
	return { fileName : fileName, className : className, methodName : methodName, lineNumber : lineNumber, customParams : customParams};
};
stx_nano_Position.fromPos = function(pos) {
	return stx_nano_Position._new(pos);
};
stx_nano_Position.toString = function(this1) {
	return stx_nano_Position._.toStringClassMethodLine(this1);
};
stx_nano_Position.here = function(pos) {
	return pos;
};
stx_nano_Position.get_fileName = function(this1) {
	return this1.fileName;
};
stx_nano_Position.get_className = function(this1) {
	return this1.className;
};
stx_nano_Position.get_methodName = function(this1) {
	return this1.methodName;
};
stx_nano_Position.get_lineNummber = function(this1) {
	return this1.lineNumber;
};
stx_nano_Position.get_customParams = function(this1) {
	return this1.customParams;
};
var stx_nano_PrimitiveDef = $hxEnums["stx.nano.PrimitiveDef"] = { __ename__:"stx.nano.PrimitiveDef",__constructs__:null
	,PNull: {_hx_name:"PNull",_hx_index:0,__enum__:"stx.nano.PrimitiveDef",toString:$estr}
	,PBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PBool",$_.__params__ = ["b"],$_)
	,PInt: ($_=function(int) { return {_hx_index:2,int:int,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PInt",$_.__params__ = ["int"],$_)
	,PFloat: ($_=function(fl) { return {_hx_index:3,fl:fl,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PFloat",$_.__params__ = ["fl"],$_)
	,PString: ($_=function(str) { return {_hx_index:4,str:str,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PString",$_.__params__ = ["str"],$_)
};
stx_nano_PrimitiveDef.__constructs__ = [stx_nano_PrimitiveDef.PNull,stx_nano_PrimitiveDef.PBool,stx_nano_PrimitiveDef.PInt,stx_nano_PrimitiveDef.PFloat,stx_nano_PrimitiveDef.PString];
var stx_nano_Primitive = {};
stx_nano_Primitive.fromInt = function(i) {
	return stx_nano_PrimitiveDef.PInt(i);
};
stx_nano_Primitive.fromFloat = function(i) {
	return stx_nano_PrimitiveDef.PFloat(i);
};
stx_nano_Primitive.fromBool = function(i) {
	return stx_nano_PrimitiveDef.PBool(i);
};
stx_nano_Primitive.fromString = function(i) {
	return stx_nano_PrimitiveDef.PString(i);
};
stx_nano_Primitive.toAny = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return null;
	case 1:
		return this1.b;
	case 2:
		return this1.int;
	case 3:
		return this1.fl;
	case 4:
		return this1.str;
	}
};
stx_nano_Primitive.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return "null";
	case 1:
		var _g = this1.b;
		return "" + (_g == null ? "null" : "" + _g);
	case 2:
		return "" + this1.int;
	case 3:
		return "" + this1.fl;
	case 4:
		return this1.str;
	}
};
stx_nano_Primitive.prj = function(this1) {
	return this1;
};
stx_nano_Primitive.lt = function(l,r) {
	switch(l._hx_index) {
	case 1:
		if(l.b == false) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				return Type.enumIndex(l) < Type.enumIndex(r);
			}
		} else if(r._hx_index == 1) {
			return false;
		} else {
			return Type.enumIndex(l) < Type.enumIndex(r);
		}
		break;
	case 2:
		if(r._hx_index == 2) {
			return l.int < r.int;
		} else {
			return Type.enumIndex(l) < Type.enumIndex(r);
		}
		break;
	case 3:
		if(r._hx_index == 3) {
			return l.fl < r.fl;
		} else {
			return Type.enumIndex(l) < Type.enumIndex(r);
		}
		break;
	case 4:
		if(r._hx_index == 4) {
			return l.str < r.str;
		} else {
			return Type.enumIndex(l) < Type.enumIndex(r);
		}
		break;
	default:
		return Type.enumIndex(l) < Type.enumIndex(r);
	}
};
stx_nano_Primitive.eq = function(l,r) {
	switch(l._hx_index) {
	case 0:
		if(r._hx_index == 0) {
			return true;
		} else {
			return false;
		}
		break;
	case 1:
		if(l.b) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else if(r._hx_index == 1) {
			if(r.b == false) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
		break;
	case 2:
		if(r._hx_index == 2) {
			return l.int == r.int;
		} else {
			return false;
		}
		break;
	case 3:
		if(r._hx_index == 3) {
			return l.fl == r.fl;
		} else {
			return false;
		}
		break;
	case 4:
		if(r._hx_index == 4) {
			return l.str == r.str;
		} else {
			return false;
		}
		break;
	}
};
var stx_nano_Report = {};
stx_nano_Report._new = function(self) {
	return self;
};
stx_nano_Report.lift = function(self) {
	return stx_nano_Report._new(self);
};
stx_nano_Report.make = function(data,pos) {
	return stx_nano_Report.pure(stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos),data));
};
stx_nano_Report.unit = function() {
	return stx_nano_Report._new(haxe_ds_Option.None);
};
stx_nano_Report.conf = function(e) {
	return stx_nano_Report._new(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e));
};
stx_nano_Report.pure = function(e) {
	return stx_nano_Report._new(haxe_ds_Option.Some(e));
};
stx_nano_Report.effects = function(this1,success,failure) {
	return stx_pico_OptionLift.fold(this1,function(e) {
		failure();
		return stx_nano_Report.pure(e);
	},function() {
		success();
		return stx_nano_Report.unit();
	});
};
stx_nano_Report.crunch = function(this1) {
	if(this1._hx_index == 0) {
		throw haxe_Exception.thrown(this1.v);
	}
};
stx_nano_Report.fromStdOption = function(opt) {
	return stx_nano_Report._new(opt);
};
stx_nano_Report.prj = function(this1) {
	return this1;
};
stx_nano_Report.value = function(this1) {
	return stx_pico_OptionLift.fold(this1,function(err) {
		return err.value();
	},function() {
		return haxe_ds_Option.None;
	});
};
stx_nano_Report.defv = function(this1,error) {
	return stx_pico_OptionLift.defv(this1,error);
};
stx_nano_Report.merge = function(this1,that) {
	return stx_nano_Report.fromStdOption(stx_pico_OptionLift.merge(this1,stx_nano_Report.prj(that),function(lhs,rhs) {
		return lhs.next(rhs);
	}));
};
stx_nano_Report.or = function(this1,that) {
	return stx_pico_OptionLift.fold(this1,function(x) {
		return stx_nano_Report.pure(x);
	},that);
};
stx_nano_Report.errata = function(this1,fn) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		tmp = stx_pico_Option.fromNullT(fn(this1.v));
		break;
	case 1:
		tmp = haxe_ds_Option.None;
		break;
	}
	return stx_nano_Report._new(tmp);
};
stx_nano_Report.ok = function(this1) {
	if(this1._hx_index == 1) {
		return true;
	} else {
		return false;
	}
};
stx_nano_Report.populate = function(this1,fn) {
	return stx_pico_OptionLift.fold(this1,function(e) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
	},function() {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
	});
};
var stx_nano_ResSum = $hxEnums["stx.nano.ResSum"] = { __ename__:"stx.nano.ResSum",__constructs__:null
	,Accept: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"stx.nano.ResSum",toString:$estr}; },$_._hx_name="Accept",$_.__params__ = ["t"],$_)
	,Reject: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"stx.nano.ResSum",toString:$estr}; },$_._hx_name="Reject",$_.__params__ = ["e"],$_)
};
stx_nano_ResSum.__constructs__ = [stx_nano_ResSum.Accept,stx_nano_ResSum.Reject];
var stx_nano_ResSumLift = function() { };
stx_nano_ResSumLift.__name__ = "stx.nano.ResSumLift";
stx_nano_ResSumLift.toString = function(self) {
	return stx_nano_Res._.toString(self);
};
var stx_nano_ResLift = function() { };
stx_nano_ResLift.__name__ = "stx.nano.ResLift";
stx_nano_ResLift.toString = function(self) {
	return stx_nano_ResLift.fold(self,function(x) {
		return "Accept(" + Std.string(x) + ")";
	},function(e) {
		return "Reject(" + e.toString() + ")";
	});
};
stx_nano_ResLift.errata = function(self,fn) {
	return stx_nano_Res.lift(stx_nano_ResLift.fold(self,function(t) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
	},function(e) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,fn(e));
	}));
};
stx_nano_ResLift.errate = function(self,fn) {
	return stx_nano_ResLift.errata(self,function(e) {
		return e.map(fn);
	});
};
stx_nano_ResLift.zip = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var _g = self.t;
		switch(that._hx_index) {
		case 0:
			return stx_nano_ResSum.Accept(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,_g,that.t));
		case 1:
			return stx_nano_ResSum.Reject(that.e);
		}
		break;
	case 1:
		var _g = self.e;
		if(that._hx_index == 1) {
			return stx_nano_ResSum.Reject(_g.next(that.e));
		} else {
			return stx_nano_ResSum.Reject(_g);
		}
		break;
	}
};
stx_nano_ResLift.map = function(self,fn) {
	return stx_nano_ResLift.flat_map(self,function(x) {
		return stx_nano_ResSum.Accept(fn(x));
	});
};
stx_nano_ResLift.flat_map = function(self,fn) {
	return stx_nano_Res.lift(stx_nano_ResLift.fold(self,function(t) {
		return fn(t);
	},function(e) {
		return stx_nano_ResSum.Reject(e);
	}));
};
stx_nano_ResLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		return fn(self.t);
	case 1:
		return er(self.e);
	}
};
stx_nano_ResLift.fudge = function(self) {
	return stx_nano_ResLift.fold(self,function(t) {
		return t;
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
stx_nano_ResLift.elide = function(self) {
	return stx_nano_ResLift.fold(self,function(t) {
		return stx_nano_ResSum.Reject(t);
	},function(e) {
		return stx_nano_ResSum.Accept(e);
	});
};
stx_nano_ResLift.value = function(self) {
	return stx_nano_ResLift.fold(self,haxe_ds_Option.Some,function(_) {
		return haxe_ds_Option.None;
	});
};
stx_nano_ResLift.report = function(self) {
	return stx_nano_ResLift.fold(self,function(_) {
		return stx_nano_Report.unit();
	},stx_nano_Report.pure);
};
stx_nano_ResLift.rectify = function(self,fn) {
	return stx_nano_ResLift.fold(self,function(ok) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok);
	},function(no) {
		return fn(no);
	});
};
stx_nano_ResLift.effects = function(self,success,failure) {
	return stx_nano_ResLift.fold(self,function(ok) {
		success(ok);
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok);
	},function(e) {
		failure(e);
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
	});
};
stx_nano_ResLift.ok = function(self) {
	return stx_nano_ResLift.fold(self,function(_) {
		return true;
	},function(_) {
		return false;
	});
};
var stx_nano_Res = {};
stx_nano_Res.__properties__ = {get_self:"get_self"};
stx_nano_Res._new = function(self) {
	return self;
};
stx_nano_Res.get_self = function(this1) {
	return stx_nano_Res.lift(this1);
};
stx_nano_Res.lift = function(self) {
	return stx_nano_Res._new(self);
};
stx_nano_Res.accept = function(t) {
	return stx_nano_Res.lift(stx_nano_ResSum.Accept(t));
};
stx_nano_Res.reject = function(e) {
	return stx_nano_Res.lift(stx_nano_ResSum.Reject(e));
};
stx_nano_Res.fromReport = function(self) {
	return stx_nano_Res.lift(stx_pico_OptionLift.fold(self,function(ok) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,ok);
	},function() {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,null);
	}));
};
stx_nano_Res.prj = function(this1) {
	return this1;
};
stx_nano_Res.fromOutcome = function(self) {
	var ocd;
	switch(self._hx_index) {
	case 0:
		ocd = stx_nano_ResSum.Accept(self.t);
		break;
	case 1:
		ocd = stx_nano_ResSum.Reject(self.e);
		break;
	}
	return stx_nano_Res.lift(ocd);
};
stx_nano_Res.toOutcome = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return stx_pico_OutcomeSum.Success(this1.t);
	case 1:
		return stx_pico_OutcomeSum.Failure(this1.e);
	}
};
stx_nano_Res.bind_fold = function(arr,fn,init) {
	return stx_lift_ArrayLift.lfold(arr,function(next,memo) {
		return stx_nano_ResLift.fold(memo,function(ok) {
			return fn(next,ok);
		},function(no) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no);
		});
	},stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,init));
};
stx_nano_Res.toStringable = function(this1) {
	var self = this1;
	return { toString : function() {
		return stx_nano_Res._.toString(self);
	}};
};
var stx_nano_Resource = {};
stx_nano_Resource.exists = function(str) {
	return stx_lift_ArrayLift.any(haxe_Resource.listNames(),function(x) {
		return x == str;
	});
};
stx_nano_Resource._new = function(str,pos) {
	if(!stx_nano_Resource.exists(str)) {
		stx_nano_lift_LiftNano.crack(stx_nano_Wildcard.__,stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos),"E_ResourceNotFound",str));
	}
	return str;
};
stx_nano_Resource.string = function(this1) {
	return haxe_Resource.getString(this1);
};
stx_nano_Resource.bytes = function(this1) {
	return haxe_Resource.getBytes(this1);
};
stx_nano_Resource.json = function(this1) {
	return JSON.parse(stx_nano_Resource.string(this1));
};
var stx_nano_SlotCls = function(data,guard,pos) {
	this.data = data;
	this.ready = true;
	this.pos = pos;
	if(guard != null) {
		this.ready = false;
		this.guard = guard;
		tink_core_Future.handle(guard,$bind(this,this.handler));
	}
};
stx_nano_SlotCls.__name__ = "stx.nano.SlotCls";
stx_nano_SlotCls.prototype = {
	handler: function(data) {
		this.ready = true;
		this.data = data;
	}
	,data: null
	,guard: null
	,ready: null
	,pos: null
	,toString: function() {
		return "Slot(" + Std.string(this.ready) + " " + stx_nano_PositionLift.to_vscode_clickable_link(stx_nano_Position.lift(this.pos)) + ")";
	}
	,step: function() {
		return -1;
	}
	,__class__: stx_nano_SlotCls
};
var stx_nano_SlotLift = function() { };
stx_nano_SlotLift.__name__ = "stx.nano.SlotLift";
stx_nano_SlotLift.map = function(self,fn) {
	if(self.ready) {
		return stx_nano_Slot.Ready(fn(self.data),self.pos);
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.map(self.guard,function(t) {
			return fn(t);
		}),self.pos);
	}
};
stx_nano_SlotLift.flat_map = function(self,fn) {
	if(self.ready) {
		return fn(self.data);
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.flatMap(self.guard,function(t) {
			var val = fn(t);
			if(val.ready) {
				return tink_core_Future.lazy(tink_core_Lazy.ofFunc(function() {
					return val.data;
				}));
			} else {
				return val.guard;
			}
		}),{ fileName : "stx/nano/Slot.hx", lineNumber : 80, className : "stx.nano.SlotLift", methodName : "flat_map"});
	}
};
stx_nano_SlotLift.value = function(self) {
	if(self.ready == true) {
		return haxe_ds_Option.Some(self.data);
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_SlotLift.handle = function(self,fn) {
	if(self.ready) {
		fn(self.data);
	} else {
		tink_core_Future.handle(self.guard,fn);
	}
};
stx_nano_SlotLift.toFuture = function(self) {
	if(self.ready) {
		return tink_core_Future.lazy(tink_core_Lazy.ofFunc(function() {
			return self.data;
		}));
	} else {
		return self.guard;
	}
};
stx_nano_SlotLift.zip = function(self,that) {
	var _g = that.ready;
	if(self.ready) {
		if(_g) {
			return stx_nano_Slot.Ready(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self.data,that.data),{ fileName : "stx/nano/Slot.hx", lineNumber : 113, className : "stx.nano.SlotLift", methodName : "zip"});
		} else {
			return stx_nano_SlotLift.map(that,function(rhs) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self.data,rhs);
			});
		}
	} else if(_g) {
		return stx_nano_SlotLift.map(self,function(lhs) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,that.data);
		});
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.merge(self.guard,that.guard,function(tI,tII) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
		}),{ fileName : "stx/nano/Slot.hx", lineNumber : 116, className : "stx.nano.SlotLift", methodName : "zip"});
	}
};
var stx_nano_Slot = {};
stx_nano_Slot.__properties__ = {get_self:"get_self"};
stx_nano_Slot._new = function(self) {
	return self;
};
stx_nano_Slot.lift = function(self) {
	return stx_nano_Slot._new(self);
};
stx_nano_Slot.prj = function(this1) {
	return this1;
};
stx_nano_Slot.get_self = function(this1) {
	return stx_nano_Slot.lift(this1);
};
stx_nano_Slot.Ready = function(v,pos) {
	return new stx_nano_SlotCls(v,null,pos);
};
stx_nano_Slot.Guard = function(v,pos) {
	return new stx_nano_SlotCls(null,v,pos);
};
stx_nano_Slot.toSlot = function(ft) {
	return new stx_nano_SlotCls(null,ft,{ fileName : "stx/nano/Slot.hx", lineNumber : 53, className : "stx.nano._Slot.Slot_Impl_", methodName : "toSlot"});
};
stx_nano_Slot.fromFunSinkVoid = function(fn) {
	var v = haxe_ds_Option.None;
	fn(function(h) {
		v = haxe_ds_Option.Some(h);
	});
	switch(v._hx_index) {
	case 0:
		return stx_nano_Slot.Ready(v.v,{ fileName : "stx/nano/Slot.hx", lineNumber : 62, className : "stx.nano._Slot.Slot_Impl_", methodName : "fromFunSinkVoid"});
	case 1:
		return stx_nano_Slot.Guard(tink_core_Future.irreversible(fn),{ fileName : "stx/nano/Slot.hx", lineNumber : 63, className : "stx.nano._Slot.Slot_Impl_", methodName : "fromFunSinkVoid"});
	}
};
var stx_nano_Stringable = {};
stx_nano_Stringable.lift = function(self) {
	return stx_nano_Stringable._new(self);
};
stx_nano_Stringable._new = function(self) {
	return self;
};
var stx_nano_TripleLift = function() { };
stx_nano_TripleLift.__name__ = "stx.nano.TripleLift";
stx_nano_TripleLift.map = function(self,fn) {
	return function(tp) {
		self(function(tI,tII,tIII) {
			tp(tI,tII,fn(tIII));
		});
	};
};
stx_nano_TripleLift.fst = function(self) {
	return stx_nano_TripleLift.detriple(self,function(tI,_,_1) {
		return tI;
	});
};
stx_nano_TripleLift.snd = function(self) {
	return stx_nano_TripleLift.detriple(self,function(_,tII,_1) {
		return tII;
	});
};
stx_nano_TripleLift.thd = function(self) {
	return stx_nano_TripleLift.detriple(self,function(_,_1,tIII) {
		return tIII;
	});
};
stx_nano_TripleLift.equals = function(lhs,rhs) {
	return stx_nano_TripleLift.detriple(lhs,function(t0I,t0II,t0III) {
		return stx_nano_TripleLift.detriple(rhs,function(t1I,t1II,t1III) {
			if(t0I == t1I && t0II == t1II) {
				return t0III == t1III;
			} else {
				return false;
			}
		});
	});
};
stx_nano_TripleLift.reduce = function(self,f_a,f_b,f_c,plus) {
	return stx_nano_TripleLift.detriple(self,function(tI,tII,tIII) {
		return plus(plus(f_a(tI),f_b(tII)),f_c(tIII));
	});
};
stx_nano_TripleLift.detriple = function(self,fn) {
	var out = null;
	self(function(tI,tII,tIII) {
		out = fn(tI,tII,tIII);
	});
	return out;
};
stx_nano_TripleLift.tup = function(self) {
	return stx_nano_TripleLift.detriple(self,stx_Tup3.tuple3);
};
stx_nano_TripleLift.toString = function(self) {
	return stx_nano_TripleLift.detriple(self,function(a,b,c) {
		return "(" + Std.string(a) + " " + Std.string(b) + " " + Std.string(c) + ")";
	});
};
var stx_nano_Triple = {};
stx_nano_Triple.toString = function(this1) {
	return stx_nano_TripleLift.toString(this1);
};
var stx_nano_Unique = {};
stx_nano_Unique.__properties__ = {get_self:"get_self"};
stx_nano_Unique._new = function(self) {
	return self;
};
stx_nano_Unique.lift = function(self) {
	return stx_nano_Unique._new(self);
};
stx_nano_Unique.pure = function(data) {
	return stx_nano_Unique.make(data,function() {
	});
};
stx_nano_Unique.make = function(data,rtid) {
	return stx_nano_Unique.lift({ data : data, rtid : rtid});
};
stx_nano_Unique.prj = function(this1) {
	return this1;
};
stx_nano_Unique.get_self = function(this1) {
	return stx_nano_Unique.lift(this1);
};
stx_nano_Unique.equals = function(this1,that) {
	return this1.rtid == that.rtid;
};
stx_nano_Unique.toT = function(this1) {
	return this1.data;
};
var stx_nano_VBlock = {};
stx_nano_VBlock.unit = function() {
	return function() {
	};
};
stx_nano_VBlock._new = function(self) {
	return self;
};
var stx_nano_lift_LiftArrayNano = function() { };
stx_nano_lift_LiftArrayNano.__name__ = "stx.nano.lift.LiftArrayNano";
stx_nano_lift_LiftArrayNano.cross = function(self,that) {
	return stx_lift_ArrayLift.cross_with(self,that,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	});
};
stx_nano_lift_LiftArrayNano.zip = function(self,that) {
	return stx_lift_ArrayLift.zip_with(self,that,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	});
};
var stx_nano_lift_LiftOptionNano = function() { };
stx_nano_lift_LiftOptionNano.__name__ = "stx.nano.lift.LiftOptionNano";
stx_nano_lift_LiftOptionNano.zip = function(self,that) {
	if(self._hx_index == 0) {
		if(that._hx_index == 0) {
			return haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self.v,that.v));
		} else {
			return haxe_ds_Option.None;
		}
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_lift_LiftOptionNano.fudge = function(self,err) {
	err = stx_pico_OptionLift.defv(stx_pico_Option.make(err),stx_nano_Fault.err(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/lift/LiftOptionNano.hx", lineNumber : 11, className : "stx.nano.lift.LiftOptionNano", methodName : "fudge"}),"E_OptionForcedError"));
	if(self == null) {
		throw haxe_Exception.thrown(err);
	} else {
		switch(self._hx_index) {
		case 0:
			return self.v;
		case 1:
			throw haxe_Exception.thrown(err);
		}
	}
};
stx_nano_lift_LiftOptionNano.resolve = function(self,err,pos) {
	return stx_pico_OptionLift.fold(self,function(t) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
	},function() {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Fault.of(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos),err));
	});
};
var stx_nano_lift_LiftStringToResource = function() { };
stx_nano_lift_LiftStringToResource.__name__ = "stx.nano.lift.LiftStringToResource";
stx_nano_lift_LiftStringToResource.resource = function(stx,str,pos) {
	return stx_nano_Resource._new(str,pos);
};
var stx_pico_EitherLift = function() { };
stx_pico_EitherLift.__name__ = "stx.pico.EitherLift";
stx_pico_EitherLift.fold = function(self,lhs,rhs) {
	switch(self._hx_index) {
	case 0:
		return lhs(self.v);
	case 1:
		return rhs(self.v);
	}
};
stx_pico_EitherLift.map = function(self,fn) {
	return stx_pico_EitherLift.flat_map(self,function(x) {
		return haxe_ds_Either.Right(fn(x));
	});
};
stx_pico_EitherLift.flat_map = function(self,fn) {
	return stx_pico_EitherLift.fold(self,haxe_ds_Either.Left,function(r) {
		return fn(r);
	});
};
stx_pico_EitherLift.flip = function(self) {
	return stx_pico_EitherLift.fold(self,function(l) {
		return haxe_ds_Either.Right(l);
	},function(r) {
		return haxe_ds_Either.Left(r);
	});
};
stx_pico_EitherLift.get_data = function(self) {
	return stx_pico_EitherLift.fold(self,function(x) {
		return x;
	},function(x) {
		return x;
	});
};
stx_pico_EitherLift.is_left = function(self) {
	return stx_pico_EitherLift.fold(self,function(_) {
		return true;
	},function(_) {
		return false;
	});
};
stx_pico_EitherLift.is_right = function(self) {
	return stx_pico_EitherLift.fold(self,function(_) {
		return false;
	},function(_) {
		return true;
	});
};
var stx_pico_Either = {};
stx_pico_Either._new = function(self) {
	return self;
};
stx_pico_Either.lift = function(self) {
	return stx_pico_Either._new(self);
};
stx_pico_Either.left = function(tI) {
	return haxe_ds_Either.Left(tI);
};
stx_pico_Either.right = function(tII) {
	return haxe_ds_Either.Right(tII);
};
stx_pico_Either.prj = function(this1) {
	return this1;
};
var stx_pico_Identifier = {};
stx_pico_Identifier.__properties__ = {get_pack:"get_pack",get_name:"get_name"};
stx_pico_Identifier._new = function(self) {
	return self;
};
stx_pico_Identifier.get_name = function(this1) {
	return stx_pico_OptionLift.defv(stx_lift_ArrayLift.last(this1.split(".")),"?");
};
stx_pico_Identifier.get_pack = function(this1) {
	return stx_lift_ArrayLift.rdropn(this1.split("."),1);
};
var stx_pico_Option = {};
stx_pico_Option._new = function(self) {
	return self;
};
stx_pico_Option.fromNullT = function(v) {
	return stx_pico_Option.make(v);
};
stx_pico_Option.unit = function() {
	return haxe_ds_Option.None;
};
stx_pico_Option.pure = function(t) {
	return haxe_ds_Option.Some(t);
};
stx_pico_Option.make = function(t) {
	if(t == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(t);
	}
};
stx_pico_Option.flatten = function(self) {
	var _g = stx_pico_OptionLift.prj(self);
	switch(_g._hx_index) {
	case 0:
		return _g.v;
	case 1:
		return haxe_ds_Option.None;
	}
};
stx_pico_Option.toString = function(this1) {
	return stx_pico_Option._.toString(this1);
};
var stx_pico_OutcomeSum = $hxEnums["stx.pico.OutcomeSum"] = { __ename__:"stx.pico.OutcomeSum",__constructs__:null
	,Success: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"stx.pico.OutcomeSum",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["t"],$_)
	,Failure: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"stx.pico.OutcomeSum",toString:$estr}; },$_._hx_name="Failure",$_.__params__ = ["e"],$_)
};
stx_pico_OutcomeSum.__constructs__ = [stx_pico_OutcomeSum.Success,stx_pico_OutcomeSum.Failure];
var stx_pico_OutcomeLift = function() { };
stx_pico_OutcomeLift.__name__ = "stx.pico.OutcomeLift";
stx_pico_OutcomeLift.map = function(self,fn) {
	return stx_pico_OutcomeLift.flat_map(self,function(x) {
		return stx_pico_OutcomeSum.Success(fn(x));
	});
};
stx_pico_OutcomeLift.flat_map = function(self,fn) {
	return stx_pico_Outcome.lift(stx_pico_OutcomeLift.fold(self,function(t) {
		return fn(t);
	},function(e) {
		return stx_pico_OutcomeSum.Failure(e);
	}));
};
stx_pico_OutcomeLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		return fn(self.t);
	case 1:
		return er(self.e);
	}
};
stx_pico_OutcomeLift.fudge = function(self) {
	return stx_pico_OutcomeLift.fold(self,function(t) {
		return t;
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
stx_pico_OutcomeLift.elide = function(self) {
	return stx_pico_OutcomeLift.fold(self,function(t) {
		return stx_pico_OutcomeSum.Failure(t);
	},function(e) {
		return stx_pico_OutcomeSum.Success(e);
	});
};
var stx_pico_Outcome = {};
stx_pico_Outcome.__properties__ = {get_self:"get_self"};
stx_pico_Outcome._new = function(self) {
	return self;
};
stx_pico_Outcome.lift = function(self) {
	return stx_pico_Outcome._new(self);
};
stx_pico_Outcome.success = function(t) {
	return stx_pico_Outcome.lift(stx_pico_OutcomeSum.Success(t));
};
stx_pico_Outcome.failure = function(e) {
	return stx_pico_Outcome.lift(stx_pico_OutcomeSum.Failure(e));
};
stx_pico_Outcome.prj = function(this1) {
	return this1;
};
stx_pico_Outcome.get_self = function(this1) {
	return stx_pico_Outcome.lift(this1);
};
var stx_test_Log = function() { };
stx_test_Log.__name__ = "stx.test.Log";
stx_test_Log.log = function(wildcard) {
	return stx_Log.tag(stx_Log.unit(),"stx.test");
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = "tink.core.Annex";
tink_core_Annex.prototype = {
	target: null
	,registry: null
	,__class__: tink_core_Annex
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	return f;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		tink_core_Callback.defer(function() {
			this1(data);
		});
	}
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) tink_core_Callback.invoke(callbacks[_g++],v);
	};
};
tink_core_Callback.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var tink_core_LinkObject = function() { };
tink_core_LinkObject.__name__ = "tink.core.LinkObject";
tink_core_LinkObject.__isInterface__ = true;
tink_core_LinkObject.prototype = {
	cancel: null
	,__class__: tink_core_LinkObject
};
var tink_core_CallbackLinkRef = function() {
};
tink_core_CallbackLinkRef.__name__ = "tink.core.CallbackLinkRef";
tink_core_CallbackLinkRef.__interfaces__ = [tink_core_LinkObject];
tink_core_CallbackLinkRef.prototype = {
	link: null
	,cancel: function() {
		tink_core_CallbackLink.cancel(this.link);
	}
	,__class__: tink_core_CallbackLinkRef
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	return new tink_core_SimpleLink(link);
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	tink_core_CallbackLink.cancel(this1);
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	if(this1 == null) {
		return tink_core_Callback.fromNiladic(tink_core_CallbackLink.noop);
	} else {
		return tink_core_Callback.fromNiladic($bind(this1,this1.cancel));
	}
};
tink_core_CallbackLink.fromFunction = function(f) {
	return tink_core_CallbackLink._new(f);
};
tink_core_CallbackLink.join = function(this1,b) {
	return new tink_core__$Callback_LinkPair(this1,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	return tink_core_CallbackLink.fromFunction(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) tink_core_CallbackLink.cancel(callbacks[_g++]);
		} else {
			callbacks = null;
		}
	});
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
tink_core_SimpleLink.__name__ = "tink.core.SimpleLink";
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	f: null
	,cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = "tink.core._Callback.LinkPair";
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	a: null
	,b: null
	,dissolved: null
	,cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			tink_core_CallbackLink.cancel(this.a);
			tink_core_CallbackLink.cancel(this.b);
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = "tink.core._Callback.ListCell";
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	cb: null
	,list: null
	,invoke: function(data) {
		if(this.list != null) {
			this.cb(data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.clear();
			list.release();
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_Disposable = function() { };
tink_core_Disposable.__name__ = "tink.core.Disposable";
tink_core_Disposable.__isInterface__ = true;
tink_core_Disposable.prototype = {
	get_disposed: null
	,ondispose: null
	,__class__: tink_core_Disposable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_OwnedDisposable = function() { };
tink_core_OwnedDisposable.__name__ = "tink.core.OwnedDisposable";
tink_core_OwnedDisposable.__isInterface__ = true;
tink_core_OwnedDisposable.__interfaces__ = [tink_core_Disposable];
tink_core_OwnedDisposable.prototype = {
	dispose: null
	,__class__: tink_core_OwnedDisposable
};
var tink_core_SimpleDisposable = function(dispose) {
	this.disposeHandlers = [];
	this.f = dispose;
};
tink_core_SimpleDisposable.__name__ = "tink.core.SimpleDisposable";
tink_core_SimpleDisposable.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_SimpleDisposable.noop = function() {
};
tink_core_SimpleDisposable.prototype = {
	f: null
	,disposeHandlers: null
	,get_disposed: function() {
		return this.disposeHandlers == null;
	}
	,ondispose: function(d) {
		var _g = this.disposeHandlers;
		if(_g == null) {
			d();
		} else {
			_g.push(d);
		}
	}
	,dispose: function() {
		var _g = this.disposeHandlers;
		if(_g != null) {
			this.disposeHandlers = null;
			var f = this.f;
			this.f = tink_core_SimpleDisposable.noop;
			f();
			var _g1 = 0;
			while(_g1 < _g.length) _g[_g1++]();
		}
	}
	,__class__: tink_core_SimpleDisposable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_CallbackList = function(destructive) {
	if(destructive == null) {
		destructive = false;
	}
	this.onfill = function() {
	};
	this.ondrain = function() {
	};
	this.busy = false;
	this.queue = [];
	this.used = 0;
	var _gthis = this;
	tink_core_SimpleDisposable.call(this,function() {
		if(!_gthis.busy) {
			_gthis.destroy();
		}
	});
	this.destructive = destructive;
	this.cells = [];
};
tink_core_CallbackList.__name__ = "tink.core.CallbackList";
tink_core_CallbackList.__super__ = tink_core_SimpleDisposable;
tink_core_CallbackList.prototype = $extend(tink_core_SimpleDisposable.prototype,{
	destructive: null
	,cells: null
	,get_length: function() {
		return this.used;
	}
	,used: null
	,queue: null
	,busy: null
	,ondrain: null
	,onfill: null
	,release: function() {
		if(--this.used <= this.cells.length >> 1) {
			this.compact();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) _g1[_g++].clear();
		this.queue = null;
		this.cells = null;
		if(this.used > 0) {
			this.used = 0;
			this.drain();
		}
	}
	,drain: function() {
		var fn = this.ondrain;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			fn();
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(fn);
		}
	}
	,add: function(cb) {
		if(this.get_disposed()) {
			return null;
		}
		var node = new tink_core__$Callback_ListCell(tink_core_Callback.toFunction(cb),this);
		this.cells.push(node);
		if(this.used++ == 0) {
			var fn = this.onfill;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		}
		return node;
	}
	,invoke: function(data) {
		var _gthis = this;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			if(!_gthis.get_disposed()) {
				if(_gthis.busy) {
					if(_gthis.destructive != true) {
						var _g = $bind(_gthis,_gthis.invoke);
						var data1 = data;
						var tmp = function() {
							_g(data1);
						};
						_gthis.queue.push(tmp);
					}
				} else {
					_gthis.busy = true;
					if(_gthis.destructive) {
						_gthis.dispose();
					}
					var length = _gthis.cells.length;
					var _g1 = 0;
					while(_g1 < length) _gthis.cells[_g1++].invoke(data);
					_gthis.busy = false;
					if(_gthis.get_disposed()) {
						_gthis.destroy();
					} else {
						if(_gthis.used < _gthis.cells.length) {
							_gthis.compact();
						}
						if(_gthis.queue.length > 0) {
							(_gthis.queue.shift())();
						}
					}
				}
			}
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(function() {
				if(!_gthis.get_disposed()) {
					if(_gthis.busy) {
						if(_gthis.destructive != true) {
							var _g = $bind(_gthis,_gthis.invoke);
							var data1 = data;
							var tmp = function() {
								_g(data1);
							};
							_gthis.queue.push(tmp);
						}
					} else {
						_gthis.busy = true;
						if(_gthis.destructive) {
							_gthis.dispose();
						}
						var length = _gthis.cells.length;
						var _g1 = 0;
						while(_g1 < length) _gthis.cells[_g1++].invoke(data);
						_gthis.busy = false;
						if(_gthis.get_disposed()) {
							_gthis.destroy();
						} else {
							if(_gthis.used < _gthis.cells.length) {
								_gthis.compact();
							}
							if(_gthis.queue.length > 0) {
								(_gthis.queue.shift())();
							}
						}
					}
				}
			});
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.drain();
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				if(_g2.cb != null) {
					if(compacted != i) {
						this.cells[compacted] = _g2;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) _g1[_g++].clear();
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
	,__properties__: $extend(tink_core_SimpleDisposable.prototype.__properties__,{get_length:"get_length"})
});
var tink_core_AlreadyDisposed = function() {
};
tink_core_AlreadyDisposed.__name__ = "tink.core.AlreadyDisposed";
tink_core_AlreadyDisposed.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_AlreadyDisposed.prototype = {
	get_disposed: function() {
		return true;
	}
	,ondispose: function(d) {
		d();
	}
	,dispose: function() {
	}
	,__class__: tink_core_AlreadyDisposed
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = "tink.core.TypedError";
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.saveStack(_g);
		var e = tink_core_TypedError.asError(haxe_Exception.caught(_g).unwrap());
		return tink_core_Outcome.Failure(e == null ? report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e,pos) : report(e) : e);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,isTinkError: null
	,printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,toPromise: function() {
		return tink_core_Promise.lift(tink_core_Promise.ofError(this));
	}
	,throwSelf: function() {
		return tink_core_TypedError.rethrow(this);
	}
	,toJsError: function() {
		var _g = Std.downcast(this.data,Error);
		if(_g == null) {
			return new tink_core__$Error_TinkError(this);
		} else {
			return _g;
		}
	}
	,__class__: tink_core_TypedError
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Error_TinkError = function(e) {
	Error.call(this);
	this.message = e.message;
	this.data = e;
};
tink_core__$Error_TinkError.__name__ = "tink.core._Error.TinkError";
tink_core__$Error_TinkError.__super__ = Error;
tink_core__$Error_TinkError.prototype = $extend(Error.prototype,{
	data: null
	,__class__: tink_core__$Error_TinkError
});
var tink_core__$Future_FutureObject = function() { };
tink_core__$Future_FutureObject.__name__ = "tink.core._Future.FutureObject";
tink_core__$Future_FutureObject.__isInterface__ = true;
tink_core__$Future_FutureObject.prototype = {
	getStatus: null
	,handle: null
	,eager: null
	,__class__: tink_core__$Future_FutureObject
};
var tink_core__$Future_NeverFuture = function() {
};
tink_core__$Future_NeverFuture.__name__ = "tink.core._Future.NeverFuture";
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	getStatus: function() {
		return tink_core_FutureStatus.NeverEver;
	}
	,handle: function(callback) {
		return null;
	}
	,eager: function() {
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = "tink.core._Future.SyncFuture";
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	value: null
	,getStatus: function() {
		return tink_core_FutureStatus.Ready(this.value);
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,tink_core_Lazy.get(this.value));
		return null;
	}
	,eager: function() {
		if(!tink_core_Lazy.get_computed(this.value)) {
			tink_core_Lazy.get(this.value);
		}
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core__$Lazy_Computable = function() { };
tink_core__$Lazy_Computable.__name__ = "tink.core._Lazy.Computable";
tink_core__$Lazy_Computable.__isInterface__ = true;
tink_core__$Lazy_Computable.prototype = {
	isComputed: null
	,compute: null
	,underlying: null
	,__class__: tink_core__$Lazy_Computable
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = "tink.core._Lazy.LazyObject";
tink_core__$Lazy_LazyObject.__isInterface__ = true;
tink_core__$Lazy_LazyObject.__interfaces__ = [tink_core__$Lazy_Computable];
tink_core__$Lazy_LazyObject.prototype = {
	isComputed: null
	,get: null
	,__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = "tink.core._Lazy.LazyConst";
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	value: null
	,isComputed: function() {
		return true;
	}
	,get: function() {
		return this.value;
	}
	,compute: function() {
	}
	,underlying: function() {
		return null;
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core_Lazy = {};
tink_core_Lazy.__properties__ = {get_computed:"get_computed"};
tink_core_Lazy.get_computed = function(this1) {
	return this1.isComputed();
};
tink_core_Lazy.get = function(this1) {
	this1.compute();
	return this1.get();
};
tink_core_Lazy.fromNoise = function(l) {
	return l;
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return f(this1.get());
	},this1);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return tink_core_Lazy.get(f(this1.get()));
	},this1);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core_Future = {};
tink_core_Future.__properties__ = {get_status:"get_status"};
tink_core_Future.get_status = function(this1) {
	return this1.getStatus();
};
tink_core_Future._new = function(f) {
	return new tink_core__$Future_SuspendableFuture(f);
};
tink_core_Future.handle = function(this1,callback) {
	return this1.handle(callback);
};
tink_core_Future.eager = function(this1) {
	this1.eager();
	return this1;
};
tink_core_Future.first = function(this1,that) {
	var _g = this1;
	switch(tink_core_Future.get_status(_g)._hx_index) {
	case 3:
		switch(tink_core_Future.get_status(that)._hx_index) {
		case 3:
			return _g;
		case 4:
			return _g;
		default:
			return _g;
		}
		break;
	case 4:
		return that;
	default:
		switch(tink_core_Future.get_status(that)._hx_index) {
		case 3:
			return that;
		case 4:
			return _g;
		default:
			return new tink_core__$Future_SuspendableFuture(function(fire) {
				return tink_core_CallbackLink.join(this1.handle(fire),tink_core_Future.handle(that,fire));
			});
		}
	}
};
tink_core_Future.map = function(this1,f,gather) {
	var _g = tink_core_Future.get_status(this1);
	switch(_g._hx_index) {
	case 3:
		return new tink_core__$Future_SyncFuture(tink_core_Lazy.map(_g.result,f));
	case 4:
		return tink_core_Future.NEVER;
	default:
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return this1.handle(function(v) {
				fire(f(v));
			});
		});
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	var _g = tink_core_Future.get_status(this1);
	switch(_g._hx_index) {
	case 3:
		var l = _g.result;
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return tink_core_Future.handle(next(tink_core_Lazy.get(l)),function(v) {
				fire(v);
			});
		});
	case 4:
		return tink_core_Future.NEVER;
	default:
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var inner = new tink_core_CallbackLinkRef();
			return tink_core_CallbackLink.join(this1.handle(function(v) {
				var outer = next(v);
				inner.link = tink_core_Future.handle(outer,$yield);
			}),inner);
		});
	}
};
tink_core_Future.next = function(this1,n) {
	return tink_core_Future.flatMap(this1,n);
};
tink_core_Future.gather = function(this1) {
	return this1;
};
tink_core_Future.merge = function(this1,that,combine) {
	var _g = tink_core_Future.get_status(this1);
	var _g1 = tink_core_Future.get_status(that);
	if(_g._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else if(_g1._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var check = function(v) {
				var _g = tink_core_Future.get_status(this1);
				var _g1 = tink_core_Future.get_status(that);
				if(_g._hx_index == 3) {
					if(_g1._hx_index == 3) {
						$yield(combine(tink_core_Lazy.get(_g.result),tink_core_Lazy.get(_g1.result)));
					}
				}
			};
			return tink_core_CallbackLink.join(this1.handle(check),tink_core_Future.handle(that,check));
		});
	}
};
tink_core_Future.flatten = function(f) {
	return tink_core_Future.flatMap(f,function(v) {
		return v;
	});
};
tink_core_Future.ofJsPromise = function(promise) {
	return tink_core_Future.irreversible(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		}).catch(function(e) {
			cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 137, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"})));
		});
	});
};
tink_core_Future.fromNever = function(l) {
	return l;
};
tink_core_Future.ofAny = function(v) {
	return tink_core_Future.sync(v);
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	return tink_core_Future.inSequence(futures);
};
tink_core_Future.inParallel = function(futures,concurrency) {
	return tink_core_Future.many(futures,concurrency);
};
tink_core_Future.inSequence = function(futures) {
	return tink_core_Future.many(futures,1);
};
tink_core_Future.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,tink_core_Outcome.Success,function(o) {
		return tink_core_OutcomeTools.orNull(o);
	});
};
tink_core_Future.processMany = function(a,concurrency,fn,lift) {
	if(a.length == 0) {
		return tink_core_Future.sync(lift(tink_core_Outcome.Success([])));
	} else {
		return tink_core_Future._new(function($yield) {
			var links = [];
			var _g = [];
			var _g1 = 0;
			while(_g1 < a.length) {
				++_g1;
				_g.push(null);
			}
			var ret = _g;
			var index = 0;
			var pending = 0;
			var done = false;
			var concurrency1;
			if(concurrency == null) {
				concurrency1 = a.length;
			} else {
				var v = concurrency;
				concurrency1 = v < 1 ? 1 : v > a.length ? a.length : v;
			}
			var fireWhenReady = function() {
				if(index == ret.length) {
					if(pending == 0) {
						var v = lift(tink_core_Outcome.Success(ret));
						done = true;
						$yield(v);
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			};
			var step = null;
			step = function() {
				if(!done && !fireWhenReady()) {
					while(index < ret.length) {
						index += 1;
						var index1 = [index - 1];
						var p = a[index1[0]];
						var check = [(function(index) {
							return function(o) {
								var _g = fn(o);
								switch(_g._hx_index) {
								case 0:
									ret[index[0]] = _g.data;
									fireWhenReady();
									break;
								case 1:
									var _g1 = _g.failure;
									var _g = 0;
									while(_g < links.length) tink_core_CallbackLink.cancel(links[_g++]);
									var v = lift(tink_core_Outcome.Failure(_g1));
									done = true;
									$yield(v);
									break;
								}
							};
						})(index1)];
						var _g = tink_core_Future.get_status(p);
						if(_g._hx_index == 3) {
							var _hx_tmp;
							_hx_tmp = tink_core_Lazy.get(_g.result);
							check[0](_hx_tmp);
							if(!done) {
								continue;
							}
						} else {
							pending += 1;
							links.push(tink_core_Future.handle(p,(function(check) {
								return function(o) {
									pending -= 1;
									check[0](o);
									if(!done) {
										step();
									}
								};
							})(check)));
						}
						break;
					}
				}
			};
			var _g = 0;
			var _g1 = concurrency1;
			while(_g < _g1) {
				++_g;
				step();
			}
			return tink_core_CallbackLink.fromMany(links);
		});
	}
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return tink_core_Future.lazy(tink_core_Lazy.ofConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return js_Boot.__implements(maybeFuture,tink_core__$Future_FutureObject);
};
tink_core_Future.async = function(init,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var ret = tink_core_Future.irreversible(init);
	if(lazy) {
		return ret;
	} else {
		return tink_core_Future.eager(ret);
	}
};
tink_core_Future.irreversible = function(init) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		init($yield);
		return null;
	});
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	return tink_core_Future.first(tink_core_Future.map(a,haxe_ds_Either.Left),tink_core_Future.map(b,haxe_ds_Either.Right));
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		return tink_core_Pair._new(a,b);
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			return map(o.data);
		case 1:
			return tink_core_Future.sync(tink_core_Outcome.Failure(o.failure));
		}
	});
};
tink_core_Future._tryFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			return tink_core_Future.map(map(o.data),tink_core_Outcome.Success);
		case 1:
			return tink_core_Future.sync(tink_core_Outcome.Failure(o.failure));
		}
	});
};
tink_core_Future._tryFailingMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
};
tink_core_Future._tryMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
};
tink_core_Future._flatMap = function(f,map) {
	return tink_core_Future.flatMap(f,map);
};
tink_core_Future._map = function(f,map) {
	return tink_core_Future.map(f,map);
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	return tink_core_Future.eager(tink_core_Future.irreversible(function(cb) {
		haxe_Timer.delay(function() {
			cb(tink_core_Lazy.get(value));
		},ms);
	}));
};
var tink_core_FutureStatus = $hxEnums["tink.core.FutureStatus"] = { __ename__:"tink.core.FutureStatus",__constructs__:null
	,Suspended: {_hx_name:"Suspended",_hx_index:0,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Awaited: {_hx_name:"Awaited",_hx_index:1,__enum__:"tink.core.FutureStatus",toString:$estr}
	,EagerlyAwaited: {_hx_name:"EagerlyAwaited",_hx_index:2,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Ready: ($_=function(result) { return {_hx_index:3,result:result,__enum__:"tink.core.FutureStatus",toString:$estr}; },$_._hx_name="Ready",$_.__params__ = ["result"],$_)
	,NeverEver: {_hx_name:"NeverEver",_hx_index:4,__enum__:"tink.core.FutureStatus",toString:$estr}
};
tink_core_FutureStatus.__constructs__ = [tink_core_FutureStatus.Suspended,tink_core_FutureStatus.Awaited,tink_core_FutureStatus.EagerlyAwaited,tink_core_FutureStatus.Ready,tink_core_FutureStatus.NeverEver];
var tink_core_FutureTrigger = function() {
	this.status = tink_core_FutureStatus.Awaited;
	this.list = new tink_core_CallbackList(true);
};
tink_core_FutureTrigger.__name__ = "tink.core.FutureTrigger";
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.prototype = {
	status: null
	,list: null
	,getStatus: function() {
		return this.status;
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(_g.result));
			return null;
		} else {
			return this.list.add(callback);
		}
	}
	,eager: function() {
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.status._hx_index == 3) {
			return false;
		} else {
			this.status = tink_core_FutureStatus.Ready(tink_core_Lazy.ofConst(result));
			this.list.invoke(result);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = "tink.core.JsPromiseTools";
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.status = tink_core_FutureStatus.Suspended;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList(true);
	this.callbacks.ondrain = function() {
		if(_gthis.status == tink_core_FutureStatus.Awaited) {
			_gthis.status = tink_core_FutureStatus.Suspended;
			tink_core_CallbackLink.cancel(_gthis.link);
			_gthis.link = null;
		}
	};
	this.callbacks.onfill = function() {
		if(_gthis.status == tink_core_FutureStatus.Suspended) {
			_gthis.status = tink_core_FutureStatus.Awaited;
			_gthis.arm();
		}
	};
};
tink_core__$Future_SuspendableFuture.__name__ = "tink.core._Future.SuspendableFuture";
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SuspendableFuture.prototype = {
	callbacks: null
	,status: null
	,link: null
	,wakeup: null
	,getStatus: function() {
		return this.status;
	}
	,trigger: function(value) {
		if(this.status._hx_index != 3) {
			this.status = tink_core_FutureStatus.Ready(tink_core_Lazy.ofConst(value));
			var link = this.link;
			this.link = null;
			this.wakeup = null;
			this.callbacks.invoke(value);
			tink_core_CallbackLink.cancel(link);
		}
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(_g.result));
			return null;
		} else {
			return this.callbacks.add(callback);
		}
	}
	,arm: function() {
		var _gthis = this;
		this.link = this.wakeup(function(x) {
			_gthis.trigger(x);
		});
	}
	,eager: function() {
		switch(this.status._hx_index) {
		case 0:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			this.arm();
			break;
		case 1:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			break;
		default:
		}
	}
	,__class__: tink_core__$Future_SuspendableFuture
};
var tink_core__$Lazy_LazyFunc = function(f,from) {
	this.f = f;
	this.from = from;
};
tink_core__$Lazy_LazyFunc.__name__ = "tink.core._Lazy.LazyFunc";
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	f: null
	,from: null
	,result: null
	,underlying: function() {
		return this.from;
	}
	,isComputed: function() {
		return this.f == null;
	}
	,get: function() {
		return this.result;
	}
	,compute: function() {
		var _g = this.f;
		if(_g != null) {
			this.f = null;
			var _g1 = this.from;
			if(_g1 != null) {
				var cur = _g1;
				this.from = null;
				var stack = [];
				while(cur != null && !cur.isComputed()) {
					stack.push(cur);
					cur = cur.underlying();
				}
				stack.reverse();
				var _g1 = 0;
				while(_g1 < stack.length) stack[_g1++].compute();
			}
			this.result = _g();
		}
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = "tink.core.NamedWith";
tink_core_NamedWith.prototype = {
	name: null
	,value: null
	,__class__: tink_core_NamedWith
};
var tink_core_Noise = {};
tink_core_Noise.ofAny = function(t) {
	return null;
};
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = "tink.core.OptionTools";
tink_core_OptionTools.force = function(o,pos) {
	return tink_core_OptionTools.sure(o,pos);
};
tink_core_OptionTools.sure = function(o,pos) {
	if(o._hx_index == 0) {
		return o.v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.toOutcome = function(o,pos) {
	switch(o._hx_index) {
	case 0:
		return tink_core_Outcome.Success(o.v);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Option.hx", lineNumber : 31, className : "tink.core.OptionTools", methodName : "toOutcome"}));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		return o.v;
	} else {
		return tink_core_Lazy.get(l);
	}
};
tink_core_OptionTools.orTry = function(o,fallback) {
	if(o._hx_index == 0) {
		return o;
	} else {
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		return o.v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		return f(o.v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	return tink_core_OptionTools.satisfies(o,function(found) {
		return found == v;
	});
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		return haxe_ds_Option.Some(f(o.v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		return f(o.v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		return [o.v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		this.value = o.v;
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = "tink.core.OptionIter";
tink_core_OptionIter.prototype = {
	value: null
	,alive: null
	,hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__:"tink.core.Outcome",__constructs__:null
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_._hx_name="Failure",$_.__params__ = ["failure"],$_)
};
tink_core_Outcome.__constructs__ = [tink_core_Outcome.Success,tink_core_Outcome.Failure];
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = "tink.core.OutcomeTools";
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data;
	case 1:
		var _g = outcome.failure;
		var _g1 = tink_core_TypedError.asError(_g);
		if(_g1 == null) {
			throw haxe_Exception.thrown(_g);
		} else {
			return _g1.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		return haxe_ds_Option.Some(outcome.data);
	case 1:
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data;
	case 1:
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	return tink_core_OutcomeTools.or(outcome,fallback);
};
tink_core_OutcomeTools.or = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data;
	case 1:
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		return outcome;
	case 1:
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data == to;
	case 1:
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		return tink_core_Outcome.Success(transform(outcome.data));
	case 1:
		return tink_core_Outcome.Failure(outcome.failure);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		return tink_core_Outcome.Success(v);
	case 1:
		return tink_core_Outcome.Failure(outcome.failure);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		return f(outcome.data);
	case 1:
		return tink_core_Promise.ofError(outcome.failure);
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.saveStack(_g);
		return tink_core_Outcome.Failure(report(haxe_Exception.caught(_g).unwrap()));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			return tink_core_Outcome.Success(_g.data);
		case 1:
			return tink_core_Outcome.Failure(_g.failure);
		}
		break;
	case 1:
		return tink_core_Outcome.Failure(o.failure);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	return { f : f};
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			return f(o.data);
		case 1:
			return tink_core_Outcome.Failure(o.failure);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = f(o.data);
			switch(_g._hx_index) {
			case 0:
				return tink_core_Outcome.Success(_g.data);
			case 1:
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(_g.failure));
			}
			break;
		case 1:
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(o.failure));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair.__properties__ = {get_b:"get_b",get_a:"get_a"};
tink_core_Pair._new = function(a,b) {
	return new tink_core_MPair(a,b);
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = "tink.core.MPair";
tink_core_MPair.prototype = {
	a: null
	,b: null
	,__class__: tink_core_MPair
};
var tink_core_ProgressValue = {};
tink_core_ProgressValue.__properties__ = {get_total:"get_total",get_value:"get_value"};
tink_core_ProgressValue._new = function(value,total) {
	return tink_core_Pair._new(value,total);
};
tink_core_ProgressValue.normalize = function(this1) {
	return tink_core_OptionTools.map(tink_core_ProgressValue.get_total(this1),function(v) {
		return tink_core_ProgressValue.get_value(this1) / v;
	});
};
tink_core_ProgressValue.get_value = function(this1) {
	return tink_core_Pair.get_a(this1);
};
tink_core_ProgressValue.get_total = function(this1) {
	return tink_core_Pair.get_b(this1);
};
var tink_core_Progress = {};
tink_core_Progress.listen = function(this1,cb) {
	return tink_core_Signal.handle(this1.progressed,cb);
};
tink_core_Progress.handle = function(this1,cb) {
	return tink_core_Future.handle(this1.result,cb);
};
tink_core_Progress.trigger = function() {
	return new tink_core_ProgressTrigger();
};
tink_core_Progress.make = function(f) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		return f(function(value,total) {
			fire(tink_core_ProgressStatus.InProgress(tink_core_ProgressValue._new(value,total)));
		},function(result) {
			fire(tink_core_ProgressStatus.Finished(result));
		});
	});
};
tink_core_Progress.map = function(this1,f) {
	return new tink_core__$Progress_ProgressObject(tink_core_Signal.map(this1.changed,function(s) {
		return tink_core_ProgressStatusTools.map(s,f);
	}),function() {
		return tink_core_ProgressStatusTools.map(this1.get_status(),f);
	});
};
tink_core_Progress.asFuture = function(this1) {
	return this1.result;
};
tink_core_Progress.promise = function(v) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		var inner = new tink_core_CallbackLinkRef();
		return tink_core_CallbackLink.join(tink_core_Promise.handle(v,function(o) {
			switch(o._hx_index) {
			case 0:
				inner.link = tink_core_Signal.handle(o.data.changed,function(s) {
					fire(tink_core_ProgressStatusTools.map(s,tink_core_Outcome.Success));
				});
				break;
			case 1:
				fire(tink_core_ProgressStatus.Finished(tink_core_Outcome.Failure(o.failure)));
				break;
			}
		}),inner);
	});
};
tink_core_Progress.flatten = function(v) {
	return tink_core_Progress.map(tink_core_Progress.promise(v),function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			switch(_g._hx_index) {
			case 0:
				return tink_core_Outcome.Success(_g.data);
			case 1:
				return tink_core_Outcome.Failure(_g.failure);
			}
			break;
		case 1:
			return tink_core_Outcome.Failure(o.failure);
		}
	});
};
tink_core_Progress.future = function(v) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		var inner = new tink_core_CallbackLinkRef();
		return tink_core_CallbackLink.join(tink_core_Future.handle(v,function(p) {
			inner.link = tink_core_Signal.handle(p.changed,fire);
		}),inner);
	});
};
tink_core_Progress.next = function(this1,f) {
	return tink_core_Future.next(tink_core_Progress.asFuture(this1),f);
};
var tink_core__$Progress_ProgressObject = function(changed,getStatus) {
	this.changed = changed;
	this.progressed = tink_core_Signal._new(function(fire) {
		return tink_core_Signal.handle(changed,function(s) {
			if(s._hx_index == 0) {
				fire(s.v);
			}
		});
	});
	this.getStatus = getStatus;
	this.result = tink_core_Future._new(function(fire) {
		var _g = getStatus();
		if(_g._hx_index == 1) {
			fire(_g.v);
			return null;
		} else {
			return tink_core_Signal.handle(changed,function(s) {
				if(s._hx_index == 1) {
					fire(s.v);
				}
			});
		}
	});
};
tink_core__$Progress_ProgressObject.__name__ = "tink.core._Progress.ProgressObject";
tink_core__$Progress_ProgressObject.prototype = {
	get_status: function() {
		return this.getStatus();
	}
	,getStatus: null
	,changed: null
	,progressed: null
	,result: null
	,__class__: tink_core__$Progress_ProgressObject
	,__properties__: {get_status:"get_status"}
};
var tink_core__$Progress_SuspendableProgress = function(wakeup,status) {
	if(status == null) {
		status = tink_core_ProgressStatus.InProgress(tink_core_ProgressValue.ZERO);
	}
	var disposable = tink_core_AlreadyDisposed.INST;
	var changed;
	switch(status._hx_index) {
	case 0:
		changed = tink_core_Signal._new(function(fire) {
			return wakeup(function(s) {
				status = s;
				fire(status);
			});
		},function(d) {
			disposable = d;
		});
		break;
	case 1:
		changed = tink_core_Signal.dead();
		break;
	}
	tink_core__$Progress_ProgressObject.call(this,changed,function() {
		return status;
	});
};
tink_core__$Progress_SuspendableProgress.__name__ = "tink.core._Progress.SuspendableProgress";
tink_core__$Progress_SuspendableProgress.__super__ = tink_core__$Progress_ProgressObject;
tink_core__$Progress_SuspendableProgress.prototype = $extend(tink_core__$Progress_ProgressObject.prototype,{
	noop: function(_,_1) {
		return null;
	}
	,__class__: tink_core__$Progress_SuspendableProgress
});
var tink_core_ProgressTrigger = function(status) {
	this._changed = null;
	var _gthis = this;
	if(status == null) {
		status = tink_core_ProgressStatus.InProgress(tink_core_ProgressValue.ZERO);
		this._status = status;
	}
	tink_core__$Progress_ProgressObject.call(this,(status == null ? false : status._hx_index == 1) ? tink_core_Signal.dead() : this._changed = tink_core_Signal.trigger(),function() {
		return _gthis._status;
	});
};
tink_core_ProgressTrigger.__name__ = "tink.core.ProgressTrigger";
tink_core_ProgressTrigger.__super__ = tink_core__$Progress_ProgressObject;
tink_core_ProgressTrigger.prototype = $extend(tink_core__$Progress_ProgressObject.prototype,{
	_status: null
	,_changed: null
	,asProgress: function() {
		return this;
	}
	,progress: function(v,total) {
		if(this._status._hx_index != 1) {
			this._changed.trigger(this._status = tink_core_ProgressStatus.InProgress(tink_core_ProgressValue._new(v,total)));
		}
	}
	,finish: function(v) {
		if(this._status._hx_index != 1) {
			this._changed.trigger(this._status = tink_core_ProgressStatus.Finished(v));
		}
	}
	,__class__: tink_core_ProgressTrigger
});
var tink_core_UnitInterval = {};
tink_core_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else if(s.length - _g > dp) {
		return HxOverrides.substr(s,0,dp + _g + 1) + "%";
	} else {
		return StringTools.rpad(s,"0",_g + dp + 1) + "%";
	}
};
var tink_core_ProgressStatus = $hxEnums["tink.core.ProgressStatus"] = { __ename__:"tink.core.ProgressStatus",__constructs__:null
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressStatus",toString:$estr}; },$_._hx_name="InProgress",$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressStatus",toString:$estr}; },$_._hx_name="Finished",$_.__params__ = ["v"],$_)
};
tink_core_ProgressStatus.__constructs__ = [tink_core_ProgressStatus.InProgress,tink_core_ProgressStatus.Finished];
var tink_core_ProgressStatusTools = function() { };
tink_core_ProgressStatusTools.__name__ = "tink.core.ProgressStatusTools";
tink_core_ProgressStatusTools.map = function(p,f) {
	switch(p._hx_index) {
	case 0:
		return tink_core_ProgressStatus.InProgress(p.v);
	case 1:
		return tink_core_ProgressStatus.Finished(f(p.v));
	}
};
var tink_core_TotalTools = function() { };
tink_core_TotalTools.__name__ = "tink.core.TotalTools";
tink_core_TotalTools.eq = function(a,b) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			return a.v == b.v;
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
var tink_core_ProgressTools = function() { };
tink_core_ProgressTools.__name__ = "tink.core.ProgressTools";
tink_core_ProgressTools.asPromise = function(p) {
	return p.result;
};
var tink_core_Promise = {};
tink_core_Promise._new = function(f) {
	return tink_core_Future._new(function(cb) {
		return f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	});
};
tink_core_Promise.eager = function(this1) {
	return tink_core_Future.eager(this1);
};
tink_core_Promise.map = function(this1,f) {
	return tink_core_Future.map(this1,f);
};
tink_core_Promise.flatMap = function(this1,f) {
	return tink_core_Future.flatMap(this1,f);
};
tink_core_Promise.tryRecover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			return tink_core_Future.sync(o);
		case 1:
			return f(o.failure);
		}
	});
};
tink_core_Promise.recover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			return tink_core_Future.sync(o.data);
		case 1:
			return f(o.failure);
		}
	});
};
tink_core_Promise.mapError = function(this1,f) {
	return tink_core_Future.map(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			return o;
		case 1:
			return tink_core_Outcome.Failure(f(o.failure));
		}
	});
};
tink_core_Promise.handle = function(this1,cb) {
	return tink_core_Future.handle(this1,cb);
};
tink_core_Promise.noise = function(this1) {
	return tink_core_Promise.next(this1,function(v) {
		return tink_core_Promise.ofData(null);
	});
};
tink_core_Promise.isSuccess = function(this1) {
	return tink_core_Future.map(this1,function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
};
tink_core_Promise.next = function(this1,f,gather) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			return f(o.data);
		case 1:
			return tink_core_Future.sync(tink_core_Outcome.Failure(o.failure));
		}
	});
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Promise.next(this1,function(_) {
		return tink_core_Promise.ofData(v);
	});
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	return tink_core_Future.flatMap(tink_core_Future.merge(this1,other,function(a,b) {
		switch(a._hx_index) {
		case 0:
			var _g = a.data;
			switch(b._hx_index) {
			case 0:
				return merger(_g,b.data);
			case 1:
				return tink_core_Promise.lift(tink_core_Promise.ofError(b.failure));
			}
			break;
		case 1:
			return tink_core_Promise.lift(tink_core_Promise.ofError(a.failure));
		}
	}),function(o) {
		return o;
	});
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,function(a,b) {
		return tink_core_Promise.ofData(tink_core_Pair._new(a,b));
	});
};
tink_core_Promise.iterate = function(promises,$yield,fallback) {
	return tink_core_Future.irreversible(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				tink_core_Promise.handle(iter.next(),function(o) {
					switch(o._hx_index) {
					case 0:
						tink_core_Promise.handle($yield(o.data),function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									cb(tink_core_Outcome.Success(_g.v));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								cb(tink_core_Outcome.Failure(o.failure));
								break;
							}
						});
						break;
					case 1:
						cb(tink_core_Outcome.Failure(o.failure));
						break;
					}
				});
			} else {
				tink_core_Promise.handle(fallback,cb);
			}
		};
		next();
	});
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		return haxe_Timer.stamp() * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		return tink_core_Promise.tryRecover(gen(),function(error) {
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
				return attempt(count + 1);
			});
		});
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		tink_core_Future.handle(this1,function(o) {
			switch(o._hx_index) {
			case 0:
				resolve(o.data);
				break;
			case 1:
				reject(o.failure.toJsError());
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.fromNever = function(l) {
	return l;
};
tink_core_Promise.ofTrigger = function(f) {
	return f.asFuture();
};
tink_core_Promise.ofHappyTrigger = function(f) {
	return tink_core_Promise.ofFuture(f.asFuture());
};
tink_core_Promise.ofFuture = function(f) {
	return tink_core_Future.map(f,tink_core_Outcome.Success);
};
tink_core_Promise.ofOutcome = function(o) {
	return tink_core_Future.sync(o);
};
tink_core_Promise.ofError = function(e) {
	return tink_core_Promise.ofOutcome(tink_core_Outcome.Failure(e));
};
tink_core_Promise.ofData = function(d) {
	return tink_core_Promise.ofOutcome(tink_core_Outcome.Success(d));
};
tink_core_Promise.lazy = function(p) {
	return tink_core_Future._new(function(cb) {
		return tink_core_Promise.handle(tink_core_Lazy.get(p),cb);
	});
};
tink_core_Promise.inParallel = function(a,concurrency) {
	return tink_core_Promise.many(a,concurrency);
};
tink_core_Promise.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,function(o) {
		return o;
	},function(o) {
		return o;
	});
};
tink_core_Promise.inSequence = function(a) {
	return tink_core_Promise.many(a,1);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),function(o) {
				tink_core_Future.handle(tink_core_Pair.get_b(o),function(_) {
					sync = true;
					p = null;
				});
				return tink_core_Promise.ofData(tink_core_Pair.get_a(o));
			});
			if(!sync) {
				p = ret;
			}
		}
		return tink_core_Promise.map(ret,function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	return tink_core_PromiseTrigger._new();
};
tink_core_Promise.resolve = function(v) {
	return tink_core_Future.sync(tink_core_Outcome.Success(v));
};
tink_core_Promise.reject = function(e) {
	return tink_core_Future.sync(tink_core_Outcome.Failure(e));
};
var tink_core_Next = {};
tink_core_Next.ofSafe = function(f) {
	return function(x) {
		return tink_core_Promise.ofOutcome(f(x));
	};
};
tink_core_Next.ofSync = function(f) {
	return function(x) {
		return tink_core_Promise.ofFuture(f(x));
	};
};
tink_core_Next.ofSafeSync = function(f) {
	return function(x) {
		return tink_core_Promise.ofData(f(x));
	};
};
tink_core_Next._chain = function(a,b) {
	return function(v) {
		return tink_core_Promise.next(a(v),b);
	};
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return tink_core_Future.sync(f(e));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner.ofSync = function(f) {
	return function(x1,x2) {
		return tink_core_Promise.ofOutcome(f(x1,x2));
	};
};
tink_core_Combiner.ofSafe = function(f) {
	return function(x1,x2) {
		return tink_core_Promise.ofFuture(f(x1,x2));
	};
};
tink_core_Combiner.ofSafeSync = function(f) {
	return function(x1,x2) {
		return tink_core_Promise.ofData(f(x1,x2));
	};
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	return tink_core_Future.trigger();
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1.asFuture();
};
var tink_core_Ref = {};
tink_core_Ref.__properties__ = {set_value:"set_value",get_value:"get_value"};
tink_core_Ref._new = function() {
	return haxe_ds_Vector._new(1);
};
tink_core_Ref.get_value = function(this1) {
	return haxe_ds_Vector.get(this1,0);
};
tink_core_Ref.set_value = function(this1,param) {
	return haxe_ds_Vector.set(this1,0,param);
};
tink_core_Ref.toString = function(this1) {
	return "@[" + Std.string(tink_core_Ref.get_value(this1)) + "]";
};
tink_core_Ref.to = function(v) {
	var ret = tink_core_Ref._new();
	tink_core_Ref.set_value(ret,v);
	return ret;
};
var tink_core_Gather = {};
tink_core_Gather._new = function(v) {
	return v;
};
tink_core_Gather.ofBool = function(b) {
	return tink_core_Gather._new(b);
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f,init) {
	return new tink_core__$Signal_Suspendable(f,init);
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return tink_core_Signal.handle(this1,function(v) {
			fire(f(v));
		});
	});
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return tink_core_Signal.handle(this1,function(v) {
			tink_core_Future.handle(f(v),fire);
		});
	});
};
tink_core_Signal.filter = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return tink_core_Signal.handle(this1,function(v) {
			if(f(v)) {
				fire(v);
			}
		});
	});
};
tink_core_Signal.select = function(this1,selector,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return tink_core_Signal.handle(this1,function(v) {
			var _g = selector(v);
			if(_g._hx_index == 0) {
				fire(_g.v);
			}
		});
	});
};
tink_core_Signal.join = function(this1,that,gather) {
	if(this1.get_disposed()) {
		return that;
	} else if(that.get_disposed()) {
		return this1;
	} else {
		return new tink_core__$Signal_Suspendable(function(fire) {
			var cb = fire;
			return tink_core_CallbackLink.join(tink_core_Signal.handle(this1,cb),tink_core_Signal.handle(that,cb));
		},function(self) {
			var release = function() {
				if(this1.get_disposed() && that.get_disposed()) {
					self.dispose();
				}
			};
			this1.ondispose(release);
			that.ondispose(release);
		});
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	return tink_core_Signal.pickNext(this1,function(v) {
		if(condition == null || condition(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
tink_core_Signal.pickNext = function(this1,selector) {
	var ret = tink_core_Future.trigger();
	var link = null;
	link = this1.listen(function(v) {
		var _g = selector(v);
		switch(_g._hx_index) {
		case 0:
			ret.trigger(_g.v);
			break;
		case 1:
			break;
		}
	});
	ret.handle(tink_core_CallbackLink.toCallback(link));
	return ret.asFuture();
};
tink_core_Signal.until = function(this1,end) {
	return new tink_core__$Signal_Suspendable(function($yield) {
		return this1.listen($yield);
	},function(self) {
		tink_core_Future.handle(end,tink_core_Callback.fromNiladic($bind(self,self.dispose)));
	});
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return null;
	});
};
tink_core_Signal.gather = function(this1) {
	return this1;
};
tink_core_Signal.create = function(f) {
	return tink_core_Signal._new(f);
};
tink_core_Signal.generate = function(generator,init) {
	return tink_core_Signal._new(function(fire) {
		generator(fire);
		return null;
	},init);
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	return new tink_core__$Signal_Suspendable(function(fire) {
		add(fire);
		var _g = remove;
		var a1 = fire;
		return tink_core_CallbackLink.fromFunction(function() {
			_g(a1);
		});
	});
};
tink_core_Signal.dead = function() {
	return tink_core__$Signal_Disposed.INST;
};
var tink_core__$Signal_SignalObject = function() { };
tink_core__$Signal_SignalObject.__name__ = "tink.core._Signal.SignalObject";
tink_core__$Signal_SignalObject.__isInterface__ = true;
tink_core__$Signal_SignalObject.__interfaces__ = [tink_core_Disposable];
tink_core__$Signal_SignalObject.prototype = {
	listen: null
	,__class__: tink_core__$Signal_SignalObject
};
var tink_core__$Signal_Disposed = function() {
	tink_core_AlreadyDisposed.call(this);
};
tink_core__$Signal_Disposed.__name__ = "tink.core._Signal.Disposed";
tink_core__$Signal_Disposed.__interfaces__ = [tink_core__$Signal_SignalObject];
tink_core__$Signal_Disposed.__super__ = tink_core_AlreadyDisposed;
tink_core__$Signal_Disposed.prototype = $extend(tink_core_AlreadyDisposed.prototype,{
	listen: function(cb) {
		return null;
	}
	,__class__: tink_core__$Signal_Disposed
});
var tink_core__$Signal_Suspendable = function(activate,init) {
	this.handlers = new tink_core_CallbackList();
	var _gthis = this;
	this.activate = activate;
	this.init = init;
	this.handlers.ondrain = function() {
		tink_core_CallbackLink.cancel(_gthis.subscription);
	};
	this.handlers.onfill = function() {
		if(init != null) {
			var f = init;
			init = null;
			f(_gthis);
		}
		_gthis.subscription = activate(($_=_gthis.handlers,$bind($_,$_.invoke)));
	};
};
tink_core__$Signal_Suspendable.__name__ = "tink.core._Signal.Suspendable";
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core__$Signal_Suspendable.over = function(s,activate) {
	if(s.get_disposed()) {
		return tink_core_Signal.dead();
	} else {
		var ret = new tink_core__$Signal_Suspendable(activate);
		s.ondispose($bind(ret,ret.dispose));
		return ret;
	}
};
tink_core__$Signal_Suspendable.prototype = {
	handlers: null
	,activate: null
	,init: null
	,subscription: null
	,get_disposed: function() {
		return this.handlers.get_disposed();
	}
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(handler) {
		this.handlers.ondispose(handler);
	}
	,listen: function(cb) {
		return this.handlers.add(cb);
	}
	,__class__: tink_core__$Signal_Suspendable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
tink_core_SignalTrigger.__name__ = "tink.core.SignalTrigger";
tink_core_SignalTrigger.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core_SignalTrigger.prototype = {
	get_disposed: function() {
		return this.handlers.get_disposed();
	}
	,handlers: null
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(d) {
		this.handlers.ondispose(d);
	}
	,trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.get_length();
	}
	,listen: function(cb) {
		return this.handlers.add(cb);
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
	,__properties__: {get_disposed:"get_disposed"}
};
var utest_Assert = function() { };
utest_Assert.__name__ = "utest.Assert";
utest_Assert.processResult = function(cond,getMessage,pos) {
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(getMessage(),pos));
	}
	return cond;
};
utest_Assert.isTrue = function(cond,msg,pos) {
	return utest_Assert.processResult(cond,function() {
		if(msg != null) {
			return msg;
		} else {
			return "expected true";
		}
	},pos);
};
utest_Assert.isFalse = function(value,msg,pos) {
	return utest_Assert.processResult(value == false,function() {
		if(msg != null) {
			return msg;
		} else {
			return "expected false";
		}
	},pos);
};
utest_Assert.isNull = function(value,msg,pos) {
	return utest_Assert.processResult(value == null,function() {
		if(msg != null) {
			return msg;
		} else {
			return "expected null but it is " + utest_Assert.q(value);
		}
	},pos);
};
utest_Assert.notNull = function(value,msg,pos) {
	return utest_Assert.processResult(value != null,function() {
		if(msg != null) {
			return msg;
		} else {
			return "expected not null";
		}
	},pos);
};
utest_Assert.is = function(value,type,msg,pos) {
	return utest_Assert.isOfType(value,type,msg,pos);
};
utest_Assert.isOfType = function(value,type,msg,pos) {
	return utest_Assert.processResult(utest_utils_Misc.isOfType(value,type),function() {
		if(msg != null) {
			return msg;
		} else {
			return "expected type " + utest_Assert.typeToString(type) + " but it is " + utest_Assert.typeToString(value);
		}
	},pos);
};
utest_Assert.notEquals = function(expected,value,msg,pos) {
	return utest_Assert.processResult(expected != value,function() {
		if(msg != null) {
			return msg;
		} else {
			return "expected " + utest_Assert.q(expected) + " and test value " + utest_Assert.q(value) + " should be different";
		}
	},pos);
};
utest_Assert.equals = function(expected,value,msg,pos) {
	return utest_Assert.processResult(expected == value,function() {
		if(msg != null) {
			return msg;
		} else {
			return "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value);
		}
	},pos);
};
utest_Assert.match = function(pattern,value,msg,pos) {
	return utest_Assert.processResult(pattern.match(value),function() {
		if(msg != null) {
			return msg;
		} else {
			return "the value " + utest_Assert.q(value) + " does not match the provided pattern";
		}
	},pos);
};
utest_Assert.floatEquals = function(expected,value,approx,msg,pos) {
	return utest_Assert.processResult(utest_Assert._floatEquals(expected,value,approx),function() {
		if(msg != null) {
			return msg;
		} else {
			return "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value);
		}
	},pos);
};
utest_Assert._floatEquals = function(expected,value,approx) {
	if(isNaN(expected)) {
		return isNaN(value);
	} else if(isNaN(value)) {
		return false;
	} else if(!isFinite(expected) && !isFinite(value)) {
		return expected > 0 == value > 0;
	}
	if(null == approx) {
		approx = 1e-5;
	}
	return Math.abs(value - expected) <= approx;
};
utest_Assert.getTypeName = function(v) {
	var _g = Type.typeof(v);
	switch(_g._hx_index) {
	case 0:
		return "`null`";
	case 1:
		return "Int";
	case 2:
		return "Float";
	case 3:
		return "Bool";
	case 4:
		return "Object";
	case 5:
		return "function";
	case 6:
		return Type.getClassName(_g.c);
	case 7:
		return Type.getEnumName(_g.e);
	case 8:
		return "`Unknown`";
	}
};
utest_Assert.isIterable = function(v,isAnonym) {
	if(!Lambda.has(isAnonym ? Reflect.fields(v) : Type.getInstanceFields(Type.getClass(v)),"iterator")) {
		return false;
	}
	return Reflect.isFunction(Reflect.field(v,"iterator"));
};
utest_Assert.isIterator = function(v,isAnonym) {
	var fields = isAnonym ? Reflect.fields(v) : Type.getInstanceFields(Type.getClass(v));
	if(!Lambda.has(fields,"next") || !Lambda.has(fields,"hasNext")) {
		return false;
	}
	if(Reflect.isFunction(Reflect.field(v,"next"))) {
		return Reflect.isFunction(Reflect.field(v,"hasNext"));
	} else {
		return false;
	}
};
utest_Assert.sameAs = function(expected,value,status,approx) {
	var texpected = utest_Assert.getTypeName(expected);
	var tvalue = utest_Assert.getTypeName(value);
	status.expectedValue = expected;
	status.actualValue = value;
	if(texpected != tvalue && !(texpected == "Int" && tvalue == "Float" || texpected == "Float" && tvalue == "Int")) {
		status.error = "expected type " + texpected + " but it is " + tvalue + (status.path == "" ? "" : " for field " + status.path);
		return false;
	}
	var _g = Type.typeof(expected);
	switch(_g._hx_index) {
	case 1:case 2:
		if(!utest_Assert._floatEquals(expected,value,approx)) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 0:case 3:
		if(expected != value) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 4:
		if(status.recursive || status.path == "") {
			var tfields = Reflect.fields(value);
			var fields = Reflect.fields(expected);
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				HxOverrides.remove(tfields,field);
				status.path = path == "" ? field : path + "." + field;
				if(!Reflect.hasField(value,field)) {
					status.error = "expected field " + status.path + " does not exist in " + utest_Assert.q(value);
					return false;
				}
				var e = Reflect.field(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				if(!utest_Assert.sameAs(e,Reflect.field(value,field),status,approx)) {
					return false;
				}
			}
			if(tfields.length > 0) {
				status.error = "the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones";
				return false;
			}
		}
		if(utest_Assert.isIterator(expected,true)) {
			if(!utest_Assert.isIterator(value,true)) {
				status.error = "expected Iterable but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterator[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,true)) {
			if(!utest_Assert.isIterable(value,true)) {
				status.error = "expected Iterator but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array(expected);
				var vvalues = Lambda.array(value);
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterable but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterable[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		return true;
	case 5:
		if(!Reflect.compareMethods(expected,value)) {
			status.error = "expected same function reference" + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 6:
		var cexpected = Type.getClassName(_g.c);
		var cvalue = Type.getClassName(Type.getClass(value));
		if(cexpected != cvalue) {
			status.error = "expected instance of " + utest_Assert.q(cexpected) + " but it is " + utest_Assert.q(cvalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(utest_utils_Misc.isOfType(expected,String)) {
			if(expected == value) {
				return true;
			} else {
				status.error = "expected string '" + Std.string(expected) + "' but it is '" + Std.string(value) + "'";
				return false;
			}
		}
		if(utest_utils_Misc.isOfType(expected,Array)) {
			if(status.recursive || status.path == "") {
				if(expected.length != value.length) {
					status.error = "expected " + Std.string(expected.length) + " elements but they are " + Std.string(value.length) + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = expected.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "array[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(expected[i],value[i],status,approx)) {
						status.error = "expected array element at [" + i + "] to have " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_utils_Misc.isOfType(expected,Date)) {
			if(expected.getTime() != value.getTime()) {
				status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			return true;
		}
		if(utest_utils_Misc.isOfType(expected,haxe_io_Bytes)) {
			if(status.recursive || status.path == "") {
				var ebytes = expected;
				var vbytes = value;
				if(ebytes.length != vbytes.length) {
					status.error = "expected " + ebytes.length + " bytes length but it is " + vbytes.length;
					return false;
				}
				var _g1 = 0;
				var _g2 = ebytes.length;
				while(_g1 < _g2) {
					var i = _g1++;
					if(ebytes.get(i) != vbytes.get(i)) {
						status.error = "expected byte #" + i + " to be " + ebytes.get(i) + " but it is " + vbytes.get(i) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_utils_Misc.isOfType(expected,haxe_IMap)) {
			if(status.recursive || status.path == "") {
				var map = js_Boot.__cast(expected , haxe_IMap);
				var vmap = js_Boot.__cast(value , haxe_IMap);
				var _g1 = [];
				var k = map.keys();
				while(k.hasNext()) _g1.push(k.next());
				var _g2 = [];
				var k = vmap.keys();
				while(k.hasNext()) _g2.push(k.next());
				if(_g1.length != _g2.length) {
					status.error = "expected " + _g1.length + " keys but they are " + _g2.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g2 = 0;
				while(_g2 < _g1.length) {
					var key = _g1[_g2];
					++_g2;
					status.path = path == "" ? "hash[" + Std.string(key) + "]" : path + "[" + Std.string(key) + "]";
					if(!utest_Assert.sameAs(map.get(key),vmap.get(key),status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterator(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterator[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array(expected);
				var vvalues = Lambda.array(value);
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterable but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterable[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		if(status.recursive || status.path == "") {
			var fields = Type.getInstanceFields(Type.getClass(expected));
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				status.path = path == "" ? field : path + "." + field;
				var e = Reflect.field(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				if(!utest_Assert.sameAs(e,Reflect.field(value,field),status,approx)) {
					return false;
				}
			}
		}
		return true;
	case 7:
		var eexpected = Type.getEnumName(_g.e);
		var evalue = Type.getEnumName(Type.getEnum(value));
		if(eexpected != evalue) {
			status.error = "expected enumeration of " + utest_Assert.q(eexpected) + " but it is " + utest_Assert.q(evalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(status.recursive || status.path == "") {
			if(Type.enumIndex(expected) != Type.enumIndex(value)) {
				status.error = "expected enum constructor " + utest_Assert.q(Type.enumConstructor(expected)) + " but it is " + utest_Assert.q(Type.enumConstructor(value)) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			var eparams = Type.enumParameters(expected);
			var vparams = Type.enumParameters(value);
			var path = status.path;
			var _g = 0;
			var _g1 = eparams.length;
			while(_g < _g1) {
				var i = _g++;
				status.path = path == "" ? "enum[" + i + "]" : path + "[" + i + "]";
				if(!utest_Assert.sameAs(eparams[i],vparams[i],status,approx)) {
					status.error = "expected enum param " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path) + " with " + status.error;
					return false;
				}
			}
		}
		return true;
	case 8:
		throw haxe_Exception.thrown("Unable to compare two unknown types");
	}
};
utest_Assert.q = function(v) {
	if(utest_utils_Misc.isOfType(v,String)) {
		return "\"" + StringTools.replace(v,"\"","\\\"") + "\"";
	} else {
		return Std.string(v);
	}
};
utest_Assert.same = function(expected,value,recursive,msg,approx,pos) {
	if(null == approx) {
		approx = 1e-5;
	}
	var status = { recursive : null == recursive ? true : recursive, path : "", error : null, expectedValue : expected, actualValue : value};
	if(utest_Assert.sameAs(expected,value,status,approx)) {
		return utest_Assert.pass(msg,pos);
	} else {
		return utest_Assert.fail(msg == null ? status.error : msg,pos);
	}
};
utest_Assert.raises = function(method,type,msgNotThrown,msgWrongType,pos) {
	var name = type != null ? Type.getClassName(type) : "Dynamic";
	try {
		method();
	} catch( _g ) {
		haxe_NativeStackTrace.saveStack(_g);
		var _g1 = haxe_Exception.caught(_g).unwrap();
		if(null == type) {
			return utest_Assert.pass(null,pos);
		} else {
			if(null == msgWrongType) {
				msgWrongType = "expected throw of type " + name + " but it is " + Std.string(_g1);
			}
			return utest_Assert.isTrue(utest_utils_Misc.isOfType(_g1,type),msgWrongType,pos);
		}
	}
	if(null == msgNotThrown) {
		msgNotThrown = "exception of type " + name + " not raised";
	}
	return utest_Assert.fail(msgNotThrown,pos);
};
utest_Assert.allows = function(possibilities,value,msg,pos) {
	if(Lambda.has(possibilities,value)) {
		return utest_Assert.isTrue(true,msg,pos);
	} else {
		return utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " not found in the expected possibilities " + Std.string(possibilities) : msg,pos);
	}
};
utest_Assert.contains = function(match,values,msg,pos) {
	if(Lambda.has(values,match)) {
		return utest_Assert.isTrue(true,msg,pos);
	} else {
		return utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do not contain " + Std.string(match) : msg,pos);
	}
};
utest_Assert.notContains = function(match,values,msg,pos) {
	if(!Lambda.has(values,match)) {
		return utest_Assert.isTrue(true,msg,pos);
	} else {
		return utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do contain " + Std.string(match) : msg,pos);
	}
};
utest_Assert.stringContains = function(match,value,msg,pos) {
	if(value != null && value.indexOf(match) >= 0) {
		return utest_Assert.isTrue(true,msg,pos);
	} else {
		return utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " does not contain " + utest_Assert.q(match) : msg,pos);
	}
};
utest_Assert.stringSequence = function(sequence,value,msg,pos) {
	if(null == value) {
		return utest_Assert.fail(msg == null ? "null argument value" : msg,pos);
	}
	var p = 0;
	var _g = 0;
	while(_g < sequence.length) {
		var s = sequence[_g];
		++_g;
		var p2 = value.indexOf(s,p);
		if(p2 < 0) {
			if(msg == null) {
				msg = "expected '" + s + "' after ";
				if(p > 0) {
					var cut = HxOverrides.substr(value,0,p);
					if(cut.length > 30) {
						cut = "..." + HxOverrides.substr(cut,-27,null);
					}
					msg += " '" + cut + "'";
				} else {
					msg += " begin";
				}
			}
			return utest_Assert.fail(msg,pos);
		}
		p = p2 + s.length;
	}
	return utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.pass = function(msg,pos) {
	if(msg == null) {
		msg = "pass expected";
	}
	return utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.fail = function(msg,pos) {
	if(msg == null) {
		msg = "failure expected";
	}
	return utest_Assert.isTrue(false,msg,pos);
};
utest_Assert.warn = function(msg) {
	utest_Assert.results.add(utest_Assertation.Warning(msg));
};
utest_Assert.createAsync = function(f,timeout) {
	return function() {
	};
};
utest_Assert.createEvent = function(f,timeout) {
	return function(e) {
	};
};
utest_Assert.typeToString = function(t) {
	try {
		var _t = Type.getClass(t);
		if(_t != null) {
			t = _t;
		}
	} catch( _g ) {
		haxe_NativeStackTrace.saveStack(_g);
	}
	try {
		return Type.getClassName(t);
	} catch( _g ) {
		haxe_NativeStackTrace.saveStack(_g);
	}
	try {
		var _t = Type.getEnum(t);
		if(_t != null) {
			t = _t;
		}
	} catch( _g ) {
		haxe_NativeStackTrace.saveStack(_g);
	}
	try {
		return Type.getEnumName(t);
	} catch( _g ) {
		haxe_NativeStackTrace.saveStack(_g);
	}
	try {
		return Std.string(Type.typeof(t));
	} catch( _g ) {
		haxe_NativeStackTrace.saveStack(_g);
	}
	try {
		return Std.string(t);
	} catch( _g ) {
		haxe_NativeStackTrace.saveStack(_g);
	}
	return "<unable to retrieve type name>";
};
var utest_Assertation = $hxEnums["utest.Assertation"] = { __ename__:"utest.Assertation",__constructs__:null
	,Success: ($_=function(pos) { return {_hx_index:0,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["pos"],$_)
	,Failure: ($_=function(msg,pos) { return {_hx_index:1,msg:msg,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_._hx_name="Failure",$_.__params__ = ["msg","pos"],$_)
	,Error: ($_=function(e,stack) { return {_hx_index:2,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_._hx_name="Error",$_.__params__ = ["e","stack"],$_)
	,SetupError: ($_=function(e,stack) { return {_hx_index:3,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_._hx_name="SetupError",$_.__params__ = ["e","stack"],$_)
	,TeardownError: ($_=function(e,stack) { return {_hx_index:4,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_._hx_name="TeardownError",$_.__params__ = ["e","stack"],$_)
	,TimeoutError: ($_=function(missedAsyncs,stack) { return {_hx_index:5,missedAsyncs:missedAsyncs,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_._hx_name="TimeoutError",$_.__params__ = ["missedAsyncs","stack"],$_)
	,AsyncError: ($_=function(e,stack) { return {_hx_index:6,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_._hx_name="AsyncError",$_.__params__ = ["e","stack"],$_)
	,Warning: ($_=function(msg) { return {_hx_index:7,msg:msg,__enum__:"utest.Assertation",toString:$estr}; },$_._hx_name="Warning",$_.__params__ = ["msg"],$_)
	,Ignore: ($_=function(reason) { return {_hx_index:8,reason:reason,__enum__:"utest.Assertation",toString:$estr}; },$_._hx_name="Ignore",$_.__params__ = ["reason"],$_)
};
utest_Assertation.__constructs__ = [utest_Assertation.Success,utest_Assertation.Failure,utest_Assertation.Error,utest_Assertation.SetupError,utest_Assertation.TeardownError,utest_Assertation.TimeoutError,utest_Assertation.AsyncError,utest_Assertation.Warning,utest_Assertation.Ignore];
var utest_Async = function(timeoutMs) {
	if(timeoutMs == null) {
		timeoutMs = 250;
	}
	this.branches = [];
	this.callbacks = [];
	this.timedOut = false;
	this.resolved = false;
	this.timeoutMs = timeoutMs;
	this.startTime = haxe_Timer.stamp();
	this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),timeoutMs);
};
utest_Async.__name__ = "utest.Async";
utest_Async.getResolved = function() {
	if(utest_Async.resolvedInstance == null) {
		utest_Async.resolvedInstance = new utest_Async();
		utest_Async.resolvedInstance.done({ fileName : "utest/Async.hx", lineNumber : 30, className : "utest.Async", methodName : "getResolved"});
	}
	return utest_Async.resolvedInstance;
};
utest_Async.prototype = {
	resolved: null
	,timedOut: null
	,callbacks: null
	,timeoutMs: null
	,startTime: null
	,timer: null
	,branches: null
	,done: function(pos) {
		if(this.resolved) {
			if(this.timedOut) {
				throw haxe_Exception.thrown("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
			} else {
				throw haxe_Exception.thrown("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is done already.");
			}
		}
		this.resolved = true;
		this.timer.stop();
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) _g1[_g++]();
	}
	,setTimeout: function(timeoutMs,pos) {
		if(this.resolved) {
			throw haxe_Exception.thrown("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is done.");
		}
		if(this.timedOut) {
			throw haxe_Exception.thrown("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
		}
		this.timer.stop();
		this.timeoutMs = timeoutMs;
		this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),timeoutMs - Math.round(1000 * (haxe_Timer.stamp() - this.startTime)));
	}
	,branch: function(fn,pos) {
		var branch = new utest_Async(this.timeoutMs);
		this.branches.push(branch);
		var _g = $bind(this,this.checkBranches);
		var pos1 = pos;
		branch.then(function() {
			_g(pos1);
		});
		if(fn != null) {
			fn(branch);
		}
		return branch;
	}
	,checkBranches: function(pos) {
		var _gthis = this;
		if(this.resolved) {
			return;
		}
		var _g = 0;
		var _g1 = this.branches;
		while(_g < _g1.length) {
			var branch = _g1[_g];
			++_g;
			if(!branch.resolved) {
				return;
			}
			if(branch.timedOut) {
				this.setTimedOutState();
				return;
			}
		}
		var branchCount = this.branches.length;
		haxe_Timer.delay(function() {
			if(branchCount == _gthis.branches.length) {
				_gthis.done(pos);
			}
		},5);
	}
	,then: function(cb) {
		if(this.resolved) {
			cb();
		} else {
			this.callbacks.push(cb);
		}
	}
	,setTimedOutState: function() {
		if(this.resolved) {
			return;
		}
		this.timedOut = true;
		this.done({ fileName : "utest/Async.hx", lineNumber : 115, className : "utest.Async", methodName : "setTimedOutState"});
	}
	,__class__: utest_Async
};
var utest__$Dispatcher_EventException = $hxEnums["utest._Dispatcher.EventException"] = { __ename__:"utest._Dispatcher.EventException",__constructs__:null
	,StopPropagation: {_hx_name:"StopPropagation",_hx_index:0,__enum__:"utest._Dispatcher.EventException",toString:$estr}
};
utest__$Dispatcher_EventException.__constructs__ = [utest__$Dispatcher_EventException.StopPropagation];
var utest_Dispatcher = function() {
	this.handlers = [];
};
utest_Dispatcher.__name__ = "utest.Dispatcher";
utest_Dispatcher.stop = function() {
	throw haxe_Exception.thrown(utest__$Dispatcher_EventException.StopPropagation);
};
utest_Dispatcher.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function(e) {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) list[_g++](e);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			if(Std.isOfType(haxe_Exception.caught(_g).unwrap(),utest__$Dispatcher_EventException)) {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Dispatcher
};
var utest_Notifier = function() {
	this.handlers = [];
};
utest_Notifier.__name__ = "utest.Notifier";
utest_Notifier.stop = function() {
	throw haxe_Exception.thrown(utest__$Dispatcher_EventException.StopPropagation);
};
utest_Notifier.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function() {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) list[_g++]();
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			if(Std.isOfType(haxe_Exception.caught(_g).unwrap(),utest__$Dispatcher_EventException)) {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Notifier
};
var utest_TestHandler = function(fixture) {
	this.wasBound = false;
	this.finished = false;
	if(fixture == null) {
		throw haxe_Exception.thrown("fixture argument is null");
	}
	this.fixture = fixture;
	this.results = new haxe_ds_List();
	this.asyncStack = new haxe_ds_List();
	this.onTested = new utest_Dispatcher();
	this.onTimeout = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
	if(utest_IgnoredFixture.get_isIgnored(fixture.ignoringInfo)) {
		this.results.add(utest_Assertation.Ignore(utest_IgnoredFixture.get_ignoreReason(fixture.ignoringInfo)));
	}
};
utest_TestHandler.__name__ = "utest.TestHandler";
utest_TestHandler.exceptionStack = function(pops) {
	if(pops == null) {
		pops = 2;
	}
	var stack = haxe_CallStack.exceptionStack();
	while(pops-- > 0) stack.pop();
	return stack;
};
utest_TestHandler.prototype = {
	results: null
	,fixture: null
	,finished: null
	,asyncStack: null
	,onTested: null
	,onTimeout: null
	,onComplete: null
	,onPrecheck: null
	,precheck: null
	,wasBound: null
	,execute: function() {
		var _gthis = this;
		if(utest_IgnoredFixture.get_isIgnored(this.fixture.ignoringInfo)) {
			this.executeFinally();
			return;
		}
		var isSync = true;
		var expectingAsync = true;
		var run = function() {
			if(isSync) {
				expectingAsync = false;
				return;
			}
			_gthis.executeFixtureMethod();
			_gthis.executeFinally();
		};
		try {
			this.executeMethod(this.fixture.setup);
			this.executeAsyncMethod(this.fixture.setupAsync,run);
			if(!expectingAsync) {
				this.executeFixtureMethod();
			}
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			var _g1 = haxe_Exception.caught(_g).unwrap();
			this.results.add(utest_Assertation.SetupError(_g1,utest_TestHandler.exceptionStack()));
		}
		isSync = false;
		if(!expectingAsync) {
			this.executeFinally();
		}
	}
	,executeFixtureMethod: function() {
		try {
			this.executeMethod(this.fixture.method);
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			var _g1 = haxe_Exception.caught(_g).unwrap();
			this.results.add(utest_Assertation.Error(_g1,utest_TestHandler.exceptionStack()));
		}
	}
	,executeFinally: function() {
		this.onPrecheck.dispatch(this);
		this.checkTested();
	}
	,checkTested: function() {
		if(this.expiration == null || this.asyncStack.length == 0) {
			this.tested();
		} else if(haxe_Timer.stamp() > this.expiration) {
			this.timeout();
		} else {
			haxe_Timer.delay($bind(this,this.checkTested),10);
		}
	}
	,expiration: null
	,setTimeout: function(timeout) {
		var newExpire = haxe_Timer.stamp() + timeout / 1000;
		this.expiration = this.expiration == null ? newExpire : newExpire > this.expiration ? newExpire : this.expiration;
	}
	,bindHandler: function() {
		if(this.wasBound) {
			return;
		}
		utest_Assert.results = this.results;
		utest_Assert.createAsync = $bind(this,this.addAsync);
		utest_Assert.createEvent = $bind(this,this.addEvent);
		this.wasBound = true;
	}
	,unbindHandler: function() {
		if(!this.wasBound) {
			return;
		}
		utest_Assert.results = null;
		utest_Assert.createAsync = function(f,t) {
			return function() {
			};
		};
		utest_Assert.createEvent = function(f,t) {
			return function(e) {
			};
		};
		this.wasBound = false;
	}
	,addAsync: function(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		if(null == f) {
			f = function() {
			};
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function() {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("async function already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f();
			} catch( _g ) {
				haxe_NativeStackTrace.saveStack(_g);
				var _g1 = haxe_Exception.caught(_g).unwrap();
				handler.results.add(utest_Assertation.AsyncError(_g1,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	,addEvent: function(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function(e) {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("event already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f(e);
			} catch( _g ) {
				haxe_NativeStackTrace.saveStack(_g);
				var _g1 = haxe_Exception.caught(_g).unwrap();
				handler.results.add(utest_Assertation.AsyncError(_g1,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	,executeMethod: function(name) {
		if(name == null) {
			return;
		}
		this.bindHandler();
		Reflect.callMethod(this.fixture.target,Reflect.field(this.fixture.target,name),[]);
	}
	,executeAsyncMethod: function(name,done) {
		if(name == null) {
			done();
			return;
		}
		this.bindHandler();
		Reflect.callMethod(this.fixture.target,Reflect.field(this.fixture.target,name),[done]);
	}
	,tested: function() {
		if(this.results.length == 0) {
			this.results.add(utest_Assertation.Warning("no assertions"));
		}
		this.onTested.dispatch(this);
		this.completed();
	}
	,timeout: function() {
		this.results.add(utest_Assertation.TimeoutError(this.asyncStack.length,[]));
		this.onTimeout.dispatch(this);
		this.completed();
	}
	,completed: function() {
		var _gthis = this;
		if(utest_IgnoredFixture.get_isIgnored(this.fixture.ignoringInfo)) {
			this.completedFinally();
			return;
		}
		var isSync = true;
		var expectingAsync = true;
		var complete = function() {
			if(isSync) {
				expectingAsync = false;
				return;
			}
			_gthis.completedFinally();
		};
		try {
			this.executeMethod(this.fixture.teardown);
			this.executeAsyncMethod(this.fixture.teardownAsync,complete);
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			var _g1 = haxe_Exception.caught(_g).unwrap();
			this.results.add(utest_Assertation.TeardownError(_g1,utest_TestHandler.exceptionStack(2)));
		}
		isSync = false;
		if(!expectingAsync) {
			this.completedFinally();
		}
	}
	,completedFinally: function() {
		this.finished = true;
		this.unbindHandler();
		this.onComplete.dispatch(this);
	}
	,__class__: utest_TestHandler
};
var utest_ITestHandler = function(fixture) {
	utest_TestHandler.call(this,fixture);
	if(!fixture.isITest) {
		throw haxe_Exception.thrown("Invalid fixture type for utest.ITestHandler");
	}
	this.testCase = js_Boot.__cast(fixture.target , utest_ITest);
	this.test = fixture.test;
	if(this.test == null) {
		throw haxe_Exception.thrown("Fixture is missing test data");
	}
};
utest_ITestHandler.__name__ = "utest.ITestHandler";
utest_ITestHandler.__super__ = utest_TestHandler;
utest_ITestHandler.prototype = $extend(utest_TestHandler.prototype,{
	testCase: null
	,test: null
	,setupAsync: null
	,testAsync: null
	,teardownAsync: null
	,execute: function() {
		if(utest_IgnoredFixture.get_isIgnored(this.fixture.ignoringInfo)) {
			this.executeFinally();
			return;
		}
		this.bindHandler();
		this.runSetup();
	}
	,runSetup: function() {
		try {
			this.setupAsync = this.fixture.setupMethod();
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			var _g1 = haxe_Exception.caught(_g).unwrap();
			this.results.add(utest_Assertation.SetupError(_g1,haxe_CallStack.exceptionStack()));
			this.completedFinally();
			return;
		}
		this.setupAsync.then($bind(this,this.checkSetup));
	}
	,checkSetup: function() {
		if(this.setupAsync.timedOut) {
			this.results.add(utest_Assertation.SetupError("Setup timeout",[]));
			this.completedFinally();
		} else {
			this.runTest();
		}
	}
	,runTest: function() {
		try {
			this.testAsync = this.test.execute();
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			var _g1 = haxe_Exception.caught(_g).unwrap();
			this.results.add(utest_Assertation.Error(_g1,haxe_CallStack.exceptionStack()));
			this.runTeardown();
			return;
		}
		this.testAsync.then($bind(this,this.checkTest));
	}
	,checkTest: function() {
		this.onPrecheck.dispatch(this);
		if(this.testAsync.timedOut) {
			this.results.add(utest_Assertation.TimeoutError(1,[]));
			this.onTimeout.dispatch(this);
		} else if(this.testAsync.resolved) {
			if(this.results.length == 0) {
				this.results.add(utest_Assertation.Warning("no assertions"));
			}
			this.onTested.dispatch(this);
		} else {
			throw haxe_Exception.thrown("Unexpected test state");
		}
		this.runTeardown();
	}
	,runTeardown: function() {
		try {
			this.teardownAsync = this.fixture.teardownMethod();
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			var _g1 = haxe_Exception.caught(_g).unwrap();
			this.results.add(utest_Assertation.TeardownError(_g1,haxe_CallStack.exceptionStack()));
			this.completedFinally();
			return;
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
	}
	,checkTeardown: function() {
		if(this.teardownAsync.timedOut) {
			this.results.add(utest_Assertation.TeardownError("Teardown timeout",[]));
		}
		this.completedFinally();
	}
	,bindHandler: function() {
		if(this.wasBound) {
			return;
		}
		utest_Assert.results = this.results;
		var msg = " is not allowed in tests extending utest.ITest. Add `async:utest.Async` argument to the test method instead.";
		utest_Assert.createAsync = function(f,t) {
			throw haxe_Exception.thrown("Assert.createAsync() " + msg);
		};
		utest_Assert.createEvent = function(f,t) {
			throw haxe_Exception.thrown("Assert.createEvent() " + msg);
		};
		this.wasBound = true;
	}
	,__class__: utest_ITestHandler
});
var utest_IgnoredFixture = {};
utest_IgnoredFixture.__properties__ = {get_ignoreReason:"get_ignoreReason",get_isIgnored:"get_isIgnored"};
utest_IgnoredFixture.NotIgnored = function() {
	return utest_IgnoredFixture._new(null);
};
utest_IgnoredFixture.Ignored = function(reason) {
	return utest_IgnoredFixture._new(reason != null ? reason : "");
};
utest_IgnoredFixture._new = function(reason) {
	return reason;
};
utest_IgnoredFixture.get_isIgnored = function(this1) {
	return this1 != null;
};
utest_IgnoredFixture.get_ignoreReason = function(this1) {
	return this1;
};
var utest_Runner = function() {
	this.executedFixtures = 0;
	this.pos = 0;
	this.complete = false;
	this.globalPattern = null;
	this.iTestFixtures = haxe_ds_Map.toStringMap(null);
	this.fixtures = [];
	this.onProgress = new utest_Dispatcher();
	this.onStart = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
	this.onTestStart = new utest_Dispatcher();
	this.onTestComplete = new utest_Dispatcher();
	this.length = 0;
};
utest_Runner.__name__ = "utest.Runner";
utest_Runner.prototype = {
	fixtures: null
	,iTestFixtures: null
	,onProgress: null
	,onStart: null
	,onComplete: null
	,onPrecheck: null
	,onTestStart: null
	,onTestComplete: null
	,length: null
	,globalPattern: null
	,complete: null
	,addCase: function(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync) {
		if(teardownAsync == null) {
			teardownAsync = "teardownAsync";
		}
		if(setupAsync == null) {
			setupAsync = "setupAsync";
		}
		if(prefix == null) {
			prefix = "test";
		}
		if(teardown == null) {
			teardown = "teardown";
		}
		if(setup == null) {
			setup = "setup";
		}
		if(utest_utils_Misc.isOfType(test,utest_ITest)) {
			this.addITest(test,pattern);
		} else {
			this.addCaseOld(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync);
		}
	}
	,addITest: function(testCase,pattern) {
		var className = Type.getClassName(Type.getClass(testCase));
		if(haxe_ds_Map.exists(this.iTestFixtures,className)) {
			throw haxe_Exception.thrown("Cannot add the same test twice.");
		}
		var fixtures = [];
		var init = testCase.__initializeUtest__();
		var _g = 0;
		var _g1 = init.tests;
		while(_g < _g1.length) {
			var test = _g1[_g];
			++_g;
			if(!this.isTestFixtureName(className,test.name,["test","spec"],pattern,this.globalPattern)) {
				continue;
			}
			var fixture = utest_TestFixture.ofData(testCase,test,init.accessories);
			this.addFixture(fixture);
			fixtures.push(fixture);
		}
		if(fixtures.length > 0) {
			haxe_ds_Map.set(this.iTestFixtures,className,{ caseInstance : testCase, setupClass : utest_utils_AccessoriesUtils.getSetupClass(init.accessories), dependencies : init.dependencies, fixtures : fixtures, teardownClass : utest_utils_AccessoriesUtils.getTeardownClass(init.accessories)});
		}
	}
	,addCaseOld: function(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync) {
		if(teardownAsync == null) {
			teardownAsync = "teardownAsync";
		}
		if(setupAsync == null) {
			setupAsync = "setupAsync";
		}
		if(prefix == null) {
			prefix = "test";
		}
		if(teardown == null) {
			teardown = "teardown";
		}
		if(setup == null) {
			setup = "setup";
		}
		if(!Reflect.isObject(test)) {
			throw haxe_Exception.thrown("can't add a null object as a test case");
		}
		if(!this.isMethod(test,setup)) {
			setup = null;
		}
		if(!this.isMethod(test,setupAsync)) {
			setupAsync = null;
		}
		if(!this.isMethod(test,teardown)) {
			teardown = null;
		}
		if(!this.isMethod(test,teardownAsync)) {
			teardownAsync = null;
		}
		var fields = Type.getInstanceFields(Type.getClass(test));
		var className = Type.getClassName(Type.getClass(test));
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(!this.isMethod(test,field)) {
				continue;
			}
			if(!this.isTestFixtureName(className,field,[prefix],pattern,this.globalPattern)) {
				continue;
			}
			this.addFixture(new utest_TestFixture(test,field,setup,teardown,setupAsync,teardownAsync));
		}
	}
	,isTestFixtureName: function(caseName,testName,prefixes,pattern,globalPattern) {
		if(pattern == null && globalPattern == null) {
			var _g = 0;
			while(_g < prefixes.length) if(StringTools.startsWith(testName,prefixes[_g++])) {
				return true;
			}
			return false;
		}
		if(pattern == null) {
			pattern = globalPattern;
		}
		return pattern.match("" + caseName + "." + testName);
	}
	,addFixture: function(fixture) {
		this.fixtures.push(fixture);
		this.length++;
	}
	,getFixture: function(index) {
		return this.fixtures[index];
	}
	,isMethod: function(test,name) {
		try {
			return Reflect.isFunction(Reflect.field(test,name));
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			return false;
		}
	}
	,run: function() {
		this.onStart.dispatch(this);
		new utest__$Runner_ITestRunner(this).run();
		this.waitForCompletion();
	}
	,waitForCompletion: function() {
		if(!this.complete) {
			haxe_Timer.delay($bind(this,this.waitForCompletion),100);
		}
	}
	,pos: null
	,executedFixtures: null
	,runNext: function(finishedHandler) {
		var currentCase = null;
		var _g = this.pos;
		var _g1 = this.fixtures.length;
		while(_g < _g1) {
			++_g;
			var fixture = this.fixtures[this.pos++];
			if(fixture.isITest) {
				continue;
			}
			if(currentCase != fixture.target) {
				currentCase = fixture.target;
				Type.getClassName(Type.getClass(currentCase));
			}
			var handler = this.runFixture(fixture);
			if(!handler.finished) {
				handler.onComplete.add($bind(this,this.runNext));
				return;
			}
		}
		this.complete = true;
		this.onComplete.dispatch(this);
	}
	,runFixture: function(fixture) {
		var handler = fixture.isITest ? new utest_ITestHandler(fixture) : new utest_TestHandler(fixture);
		handler.onComplete.add($bind(this,this.testComplete));
		handler.onPrecheck.add(($_=this.onPrecheck,$bind($_,$_.dispatch)));
		this.onTestStart.dispatch(handler);
		handler.execute();
		return handler;
	}
	,testComplete: function(h) {
		++this.executedFixtures;
		this.onTestComplete.dispatch(h);
		this.onProgress.dispatch({ result : utest_TestResult.ofHandler(h), done : this.executedFixtures, totals : this.length});
	}
	,__class__: utest_Runner
};
var utest__$Runner_ITestRunner = function(runner) {
	this.failedCases = [];
	this.failedTestsInCurrentCase = [];
	var _gthis = this;
	this.runner = runner;
	runner.onTestComplete.add(function(handler) {
		var _g = handler.results.iterator();
		while(_g.hasNext()) if(_g.next()._hx_index != 0) {
			_gthis.failedTestsInCurrentCase.push(handler.fixture.method);
			_gthis.failedCases.push(Type.getClassName(Type.getClass(handler.fixture.target)));
		}
	});
};
utest__$Runner_ITestRunner.__name__ = "utest._Runner.ITestRunner";
utest__$Runner_ITestRunner.prototype = {
	runner: null
	,cases: null
	,currentCaseName: null
	,currentCase: null
	,currentCaseFixtures: null
	,teardownClass: null
	,setupAsync: null
	,teardownAsync: null
	,failedTestsInCurrentCase: null
	,failedCases: null
	,run: function() {
		this.cases = this.orderClassesByDependencies();
		this.runCases();
	}
	,orderClassesByDependencies: function() {
		var _gthis = this;
		var result = [];
		var error = function(testCase,msg) {
			_gthis.runner.onProgress.dispatch({ totals : _gthis.runner.length, result : utest_TestResult.ofFailedSetupClass(testCase,utest_Assertation.SetupError(msg,[])), done : _gthis.runner.executedFixtures});
		};
		var added = haxe_ds_Map.toStringMap(null);
		var addClass = null;
		addClass = function(cls,stack) {
			if(haxe_ds_Map.exists(added,cls)) {
				return;
			}
			var data = haxe_ds_Map.get(_gthis.runner.iTestFixtures,cls);
			if(stack.indexOf(cls) >= 0) {
				error(data.caseInstance,"Circular dependencies among test classes detected: " + stack.join(" -> "));
				return;
			}
			stack.push(cls);
			var dependencies = data.dependencies;
			var _g = 0;
			while(_g < dependencies.length) {
				var dependency = dependencies[_g];
				++_g;
				if(haxe_ds_Map.exists(_gthis.runner.iTestFixtures,dependency)) {
					addClass(dependency,stack);
				} else {
					error(data.caseInstance,"This class depends on " + dependency + ", but it cannot be found. Was it added to test runner?");
					return;
				}
			}
			result.push(cls);
			haxe_ds_Map.set(added,cls,true);
		};
		var cls = haxe_ds_Map.keys(this.runner.iTestFixtures);
		while(cls.hasNext()) {
			var cls1 = cls.next();
			addClass(cls1,[]);
		}
		return new haxe_iterators_ArrayIterator(result);
	}
	,failedDependencies: function(data) {
		var _g = 0;
		var _g1 = data.dependencies;
		while(_g < _g1.length) if(this.failedCases.indexOf(_g1[_g++]) >= 0) {
			return true;
		}
		return false;
	}
	,runCases: function() {
		while(this.cases.hasNext()) {
			this.currentCaseName = this.cases.next();
			var data = haxe_ds_Map.get(this.runner.iTestFixtures,this.currentCaseName);
			this.currentCase = data.caseInstance;
			this.failedTestsInCurrentCase = [];
			if(this.failedDependencies(data)) {
				this.failedCases.push(this.currentCaseName);
				continue;
			}
			this.currentCaseFixtures = data.fixtures;
			this.teardownClass = data.teardownClass;
			try {
				this.setupAsync = data.setupClass();
			} catch( _g ) {
				haxe_NativeStackTrace.saveStack(_g);
				this.setupFailed(utest_Assertation.SetupError("setupClass failed: " + Std.string(haxe_Exception.caught(_g).unwrap()),haxe_CallStack.exceptionStack()));
				return;
			}
			if(this.setupAsync.resolved) {
				if(!this.runFixtures()) {
					return;
				}
			} else {
				this.setupAsync.then($bind(this,this.checkSetup));
				return;
			}
		}
		this.runner.runNext();
	}
	,checkSetup: function() {
		if(this.setupAsync.timedOut) {
			this.setupFailed(utest_Assertation.SetupError("setupClass timeout",[]));
		} else {
			this.runFixtures();
		}
	}
	,setupFailed: function(assertation) {
		this.runner.executedFixtures += this.currentCaseFixtures.length;
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedSetupClass(this.currentCase,assertation), done : this.runner.executedFixtures});
		this.runCases();
	}
	,runFixtures: function(finishedHandler) {
		while(this.currentCaseFixtures.length > 0) {
			var fixture = this.currentCaseFixtures.shift();
			var _g = 0;
			var _g1 = fixture.test.dependencies;
			while(_g < _g1.length) if(this.failedTestsInCurrentCase.indexOf(_g1[_g++]) >= 0) {
				fixture.ignoringInfo = utest_IgnoredFixture.Ignored("Failed dependencies");
				break;
			}
			var handler = this.runner.runFixture(fixture);
			if(!handler.finished) {
				handler.onComplete.add($bind(this,this.runFixtures));
				return false;
			}
		}
		try {
			this.teardownAsync = this.teardownClass();
		} catch( _g ) {
			haxe_NativeStackTrace.saveStack(_g);
			this.teardownFailed(utest_Assertation.TeardownError("teardownClass failed: " + Std.string(haxe_Exception.caught(_g).unwrap()),haxe_CallStack.exceptionStack()));
			return true;
		}
		if(this.teardownAsync.resolved && finishedHandler == null) {
			return true;
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
		return false;
	}
	,checkTeardown: function() {
		if(this.teardownAsync.timedOut) {
			this.teardownFailed(utest_Assertation.TeardownError("teardownClass timeout",[]));
		}
		this.runCases();
	}
	,teardownFailed: function(assertation) {
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedTeardownClass(this.currentCase,assertation), done : this.runner.executedFixtures});
	}
	,__class__: utest__$Runner_ITestRunner
};
var utest_AccessoryName = function() { };
utest_AccessoryName.__name__ = "utest.AccessoryName";
var utest_TestFixture = function(target,method,setup,teardown,setupAsync,teardownAsync) {
	this.isITest = false;
	this.target = target;
	this.method = method;
	this.setup = setup;
	this.setupAsync = setupAsync;
	this.teardown = teardown;
	this.teardownAsync = teardownAsync;
	this.ignoringInfo = this.getIgnored();
};
utest_TestFixture.__name__ = "utest.TestFixture";
utest_TestFixture.ofData = function(target,test,accessories) {
	var fixture = new utest_TestFixture(target,test.name);
	fixture.isITest = true;
	fixture.test = test;
	fixture.setupMethod = utest_utils_AccessoriesUtils.getSetup(accessories);
	fixture.teardownMethod = utest_utils_AccessoriesUtils.getTeardown(accessories);
	return fixture;
};
utest_TestFixture.prototype = {
	target: null
	,method: null
	,setup: null
	,setupAsync: null
	,teardown: null
	,teardownAsync: null
	,ignoringInfo: null
	,isITest: null
	,test: null
	,setupMethod: null
	,teardownMethod: null
	,checkMethod: function(name,arg) {
		var field = Reflect.field(this.target,name);
		if(field == null) {
			throw haxe_Exception.thrown(arg + " function " + name + " is not a field of target");
		}
		if(!Reflect.isFunction(field)) {
			throw haxe_Exception.thrown(arg + " function " + name + " is not a function");
		}
	}
	,getIgnored: function() {
		var metasForTestMetas = Reflect.getProperty(haxe_rtti_Meta.getFields(Type.getClass(this.target)),this.method);
		if(metasForTestMetas == null || !Reflect.hasField(metasForTestMetas,"Ignored")) {
			return utest_IgnoredFixture.NotIgnored();
		}
		var ignoredArgs = Reflect.getProperty(metasForTestMetas,"Ignored");
		if(ignoredArgs == null || ignoredArgs.length == 0 || ignoredArgs[0] == null) {
			return utest_IgnoredFixture.Ignored();
		}
		return utest_IgnoredFixture.Ignored(Std.string(ignoredArgs[0]));
	}
	,__class__: utest_TestFixture
};
var utest_TestResult = function() {
};
utest_TestResult.__name__ = "utest.TestResult";
utest_TestResult.ofHandler = function(handler) {
	var r = new utest_TestResult();
	var path = Type.getClassName(Type.getClass(handler.fixture.target)).split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = handler.fixture.method;
	r.setup = handler.fixture.setup;
	r.setupAsync = handler.fixture.setupAsync;
	r.teardown = handler.fixture.teardown;
	r.teardownAsync = handler.fixture.teardownAsync;
	r.assertations = handler.results;
	return r;
};
utest_TestResult.ofFailedSetupClass = function(testCase,assertation) {
	var r = new utest_TestResult();
	var path = Type.getClassName(Type.getClass(testCase)).split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = "setup";
	r.assertations = new haxe_ds_List();
	r.assertations.add(assertation);
	return r;
};
utest_TestResult.ofFailedTeardownClass = function(testCase,assertation) {
	var r = new utest_TestResult();
	var path = Type.getClassName(Type.getClass(testCase)).split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = "setup";
	r.assertations = new haxe_ds_List();
	r.assertations.add(assertation);
	return r;
};
utest_TestResult.prototype = {
	pack: null
	,cls: null
	,method: null
	,setup: null
	,setupAsync: null
	,teardown: null
	,teardownAsync: null
	,assertations: null
	,__class__: utest_TestResult
};
var utest_UTest = function() { };
utest_UTest.__name__ = "utest.UTest";
utest_UTest.run = function(cases,callback) {
	var runner = new utest_Runner();
	var _g = 0;
	while(_g < cases.length) runner.addCase(cases[_g++]);
	if(null != callback) {
		runner.onComplete.add(function(_) {
			callback();
		});
	}
	utest_ui_Report.create(runner);
	runner.run();
};
var utest_ui_Report = function() { };
utest_ui_Report.__name__ = "utest.ui.Report";
utest_ui_Report.create = function(runner,displaySuccessResults,headerDisplayMode) {
	var report;
	if(typeof window != 'undefined') {
		report = new utest_ui_text_HtmlReport(runner,null,true);
	} else {
		report = new utest_ui_text_PrintReport(runner);
	}
	if(null == displaySuccessResults) {
		report.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.ShowSuccessResultsWithNoErrors;
	} else {
		report.displaySuccessResults = displaySuccessResults;
	}
	if(null == headerDisplayMode) {
		report.displayHeader = utest_ui_common_HeaderDisplayMode.ShowHeaderWithResults;
	} else {
		report.displayHeader = headerDisplayMode;
	}
	return report;
};
var utest_ui_common_ClassResult = function(className,setupName,teardownName) {
	this.fixtures = haxe_ds_Map.toStringMap(null);
	this.className = className;
	this.setupName = setupName;
	this.hasSetup = setupName != null;
	this.teardownName = teardownName;
	this.hasTeardown = teardownName != null;
	this.methods = 0;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_ClassResult.__name__ = "utest.ui.common.ClassResult";
utest_ui_common_ClassResult.prototype = {
	fixtures: null
	,className: null
	,setupName: null
	,teardownName: null
	,hasSetup: null
	,hasTeardown: null
	,methods: null
	,stats: null
	,add: function(result) {
		if(haxe_ds_Map.exists(this.fixtures,result.methodName)) {
			throw haxe_Exception.thrown("invalid duplicated fixture: " + this.className + "." + result.methodName);
		}
		this.stats.wire(result.stats);
		this.methods++;
		haxe_ds_Map.set(this.fixtures,result.methodName,result);
	}
	,get: function(method) {
		return haxe_ds_Map.get(this.fixtures,method);
	}
	,exists: function(method) {
		return haxe_ds_Map.exists(this.fixtures,method);
	}
	,methodNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var name = haxe_ds_Map.keys(this.fixtures);
		while(name.hasNext()) names.push(name.next());
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.get(a).stats;
				var bs = me.get(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a,b) {
				return Reflect.compare(a,b);
			});
		}
		return names;
	}
	,__class__: utest_ui_common_ClassResult
};
var utest_ui_common_FixtureResult = function(methodName) {
	this.methodName = methodName;
	this.list = new haxe_ds_List();
	this.hasTestError = false;
	this.hasSetupError = false;
	this.hasTeardownError = false;
	this.hasTimeoutError = false;
	this.hasAsyncError = false;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_FixtureResult.__name__ = "utest.ui.common.FixtureResult";
utest_ui_common_FixtureResult.prototype = {
	methodName: null
	,hasTestError: null
	,hasSetupError: null
	,hasTeardownError: null
	,hasTimeoutError: null
	,hasAsyncError: null
	,stats: null
	,list: null
	,iterator: function() {
		return this.list.iterator();
	}
	,add: function(assertation) {
		this.list.add(assertation);
		switch(assertation._hx_index) {
		case 0:
			this.stats.addSuccesses(1);
			break;
		case 1:
			this.stats.addFailures(1);
			break;
		case 2:
			this.stats.addErrors(1);
			break;
		case 3:
			this.stats.addErrors(1);
			this.hasSetupError = true;
			break;
		case 4:
			this.stats.addErrors(1);
			this.hasTeardownError = true;
			break;
		case 5:
			this.stats.addErrors(1);
			this.hasTimeoutError = true;
			break;
		case 6:
			this.stats.addErrors(1);
			this.hasAsyncError = true;
			break;
		case 7:
			this.stats.addWarnings(1);
			break;
		case 8:
			this.stats.addIgnores(1);
			break;
		}
	}
	,__class__: utest_ui_common_FixtureResult
};
var utest_ui_common_HeaderDisplayMode = $hxEnums["utest.ui.common.HeaderDisplayMode"] = { __ename__:"utest.ui.common.HeaderDisplayMode",__constructs__:null
	,AlwaysShowHeader: {_hx_name:"AlwaysShowHeader",_hx_index:0,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,NeverShowHeader: {_hx_name:"NeverShowHeader",_hx_index:1,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,ShowHeaderWithResults: {_hx_name:"ShowHeaderWithResults",_hx_index:2,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
};
utest_ui_common_HeaderDisplayMode.__constructs__ = [utest_ui_common_HeaderDisplayMode.AlwaysShowHeader,utest_ui_common_HeaderDisplayMode.NeverShowHeader,utest_ui_common_HeaderDisplayMode.ShowHeaderWithResults];
var utest_ui_common_SuccessResultsDisplayMode = $hxEnums["utest.ui.common.SuccessResultsDisplayMode"] = { __ename__:"utest.ui.common.SuccessResultsDisplayMode",__constructs__:null
	,AlwaysShowSuccessResults: {_hx_name:"AlwaysShowSuccessResults",_hx_index:0,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,NeverShowSuccessResults: {_hx_name:"NeverShowSuccessResults",_hx_index:1,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,ShowSuccessResultsWithNoErrors: {_hx_name:"ShowSuccessResultsWithNoErrors",_hx_index:2,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
};
utest_ui_common_SuccessResultsDisplayMode.__constructs__ = [utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults,utest_ui_common_SuccessResultsDisplayMode.NeverShowSuccessResults,utest_ui_common_SuccessResultsDisplayMode.ShowSuccessResultsWithNoErrors];
var utest_ui_common_IReport = function() { };
utest_ui_common_IReport.__name__ = "utest.ui.common.IReport";
utest_ui_common_IReport.__isInterface__ = true;
utest_ui_common_IReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,setHandler: null
	,__class__: utest_ui_common_IReport
};
var utest_ui_common_PackageResult = function(packageName) {
	this.isEmpty = true;
	this.packageName = packageName;
	this.classes = haxe_ds_Map.toStringMap(null);
	this.packages = haxe_ds_Map.toStringMap(null);
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_PackageResult.__name__ = "utest.ui.common.PackageResult";
utest_ui_common_PackageResult.prototype = {
	packageName: null
	,isEmpty: null
	,classes: null
	,packages: null
	,stats: null
	,addResult: function(result,flattenPackage) {
		this.isEmpty = false;
		this.getOrCreateClass(this.getOrCreatePackage(result.pack,flattenPackage,this),result.cls,result.setup,result.teardown).add(this.createFixture(result.method,result.assertations));
	}
	,addClass: function(result) {
		this.isEmpty = false;
		haxe_ds_Map.set(this.classes,result.className,result);
		this.stats.wire(result.stats);
	}
	,addPackage: function(result) {
		this.isEmpty = false;
		haxe_ds_Map.set(this.packages,result.packageName,result);
		this.stats.wire(result.stats);
	}
	,existsPackage: function(name) {
		return haxe_ds_Map.exists(this.packages,name);
	}
	,existsClass: function(name) {
		return haxe_ds_Map.exists(this.classes,name);
	}
	,getPackage: function(name) {
		if(this.packageName == null && name == "") {
			return this;
		}
		return haxe_ds_Map.get(this.packages,name);
	}
	,getClass: function(name) {
		return haxe_ds_Map.get(this.classes,name);
	}
	,classNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var name = haxe_ds_Map.keys(this.classes);
		while(name.hasNext()) names.push(name.next());
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getClass(a).stats;
				var bs = me.getClass(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a,b) {
				return Reflect.compare(a,b);
			});
		}
		return names;
	}
	,packageNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		if(this.packageName == null) {
			names.push("");
		}
		var name = haxe_ds_Map.keys(this.packages);
		while(name.hasNext()) names.push(name.next());
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getPackage(a).stats;
				var bs = me.getPackage(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a,b) {
				return Reflect.compare(a,b);
			});
		}
		return names;
	}
	,createFixture: function(method,assertations) {
		var f = new utest_ui_common_FixtureResult(method);
		var assertation = $getIterator(assertations);
		while(assertation.hasNext()) f.add(assertation.next());
		return f;
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) ref = this.getOrCreatePackage(parts[_g++],true,ref);
			return ref;
		}
	}
	,__class__: utest_ui_common_PackageResult
};
var utest_ui_common_ReportTools = function() { };
utest_ui_common_ReportTools.__name__ = "utest.ui.common.ReportTools";
utest_ui_common_ReportTools.hasHeader = function(report,stats) {
	switch(report.displayHeader._hx_index) {
	case 0:
		return true;
	case 1:
		return false;
	case 2:
		if(!stats.isOk) {
			return true;
		}
		switch(report.displaySuccessResults._hx_index) {
		case 0:case 2:
			return true;
		case 1:
			return false;
		}
		break;
	}
};
utest_ui_common_ReportTools.skipResult = function(report,stats,isOk) {
	if(!stats.isOk) {
		return false;
	}
	switch(report.displaySuccessResults._hx_index) {
	case 0:
		return false;
	case 1:
		return true;
	case 2:
		return !isOk;
	}
};
utest_ui_common_ReportTools.hasOutput = function(report,stats) {
	if(!stats.isOk) {
		return true;
	}
	return utest_ui_common_ReportTools.hasHeader(report,stats);
};
var utest_ui_common_ResultAggregator = function(runner,flattenPackage) {
	if(flattenPackage == null) {
		flattenPackage = false;
	}
	if(runner == null) {
		throw haxe_Exception.thrown("runner argument is null");
	}
	this.flattenPackage = flattenPackage;
	this.runner = runner;
	runner.onStart.add($bind(this,this.start));
	runner.onProgress.add($bind(this,this.progress));
	runner.onComplete.add($bind(this,this.complete));
	this.onStart = new utest_Notifier();
	this.onComplete = new utest_Dispatcher();
	this.onProgress = new utest_Dispatcher();
};
utest_ui_common_ResultAggregator.__name__ = "utest.ui.common.ResultAggregator";
utest_ui_common_ResultAggregator.prototype = {
	runner: null
	,flattenPackage: null
	,root: null
	,onStart: null
	,onComplete: null
	,onProgress: null
	,start: function(runner) {
		this.checkNonITest();
		this.root = new utest_ui_common_PackageResult(null);
		this.onStart.dispatch();
	}
	,checkNonITest: function() {
		var first = null;
		var total = 0;
		var _g = 0;
		var _g1 = this.runner.length;
		while(_g < _g1) {
			var fixture = this.runner.getFixture(_g++);
			if(!fixture.isITest) {
				++total;
				if(first == null) {
					first = Type.getClassName(Type.getClass(fixture.target));
				}
			}
		}
		if(total > 0) {
			var msg;
			switch(total) {
			case 1:
				msg = "" + first + " doesn't " + "implement utest.ITest. Non-ITest tests are deprecated. Implement utest.ITest or extend utest.Test.";
				break;
			case 2:
				msg = "" + first + " and 1 other don't " + "implement utest.ITest. Non-ITest tests are deprecated. Implement utest.ITest or extend utest.Test.";
				break;
			default:
				msg = "" + first + " and " + total + " others don't " + "implement utest.ITest. Non-ITest tests are deprecated. Implement utest.ITest or extend utest.Test.";
			}
			haxe_Log.trace(msg,{ fileName : "utest/ui/common/ResultAggregator.hx", lineNumber : 54, className : "utest.ui.common.ResultAggregator", methodName : "checkNonITest"});
		}
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(ref == null) {
			ref = this.root;
		}
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) ref = this.getOrCreatePackage(parts[_g++],true,ref);
			return ref;
		}
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,createFixture: function(result) {
		var f = new utest_ui_common_FixtureResult(result.method);
		var _g = result.assertations.iterator();
		while(_g.hasNext()) f.add(_g.next());
		return f;
	}
	,progress: function(e) {
		this.root.addResult(e.result,this.flattenPackage);
		this.onProgress.dispatch(e);
	}
	,complete: function(runner) {
		if(this.root.isEmpty) {
			this.root.addResult(this.createNoTestsResult(),false);
		}
		this.onComplete.dispatch(this.root);
	}
	,createNoTestsResult: function() {
		var result = new utest_TestResult();
		result.pack = "";
		result.cls = "";
		result.method = "";
		result.assertations = new haxe_ds_List();
		result.assertations.add(utest_Assertation.Failure("No tests executed.",{ fileName : "", lineNumber : 1, className : "utest.Runner", methodName : "run"}));
		return result;
	}
	,__class__: utest_ui_common_ResultAggregator
};
var utest_ui_common_ResultStats = function() {
	this.assertations = 0;
	this.successes = 0;
	this.failures = 0;
	this.errors = 0;
	this.warnings = 0;
	this.ignores = 0;
	this.isOk = true;
	this.hasFailures = false;
	this.hasErrors = false;
	this.hasWarnings = false;
	this.hasIgnores = false;
	this.onAddSuccesses = new utest_Dispatcher();
	this.onAddFailures = new utest_Dispatcher();
	this.onAddErrors = new utest_Dispatcher();
	this.onAddWarnings = new utest_Dispatcher();
	this.onAddIgnores = new utest_Dispatcher();
};
utest_ui_common_ResultStats.__name__ = "utest.ui.common.ResultStats";
utest_ui_common_ResultStats.prototype = {
	assertations: null
	,successes: null
	,failures: null
	,errors: null
	,warnings: null
	,ignores: null
	,onAddSuccesses: null
	,onAddFailures: null
	,onAddErrors: null
	,onAddWarnings: null
	,onAddIgnores: null
	,isOk: null
	,hasFailures: null
	,hasErrors: null
	,hasWarnings: null
	,hasIgnores: null
	,addSuccesses: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.successes += v;
		this.onAddSuccesses.dispatch(v);
	}
	,addFailures: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.failures += v;
		this.hasFailures = this.failures > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddFailures.dispatch(v);
	}
	,addErrors: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.errors += v;
		this.hasErrors = this.errors > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddErrors.dispatch(v);
	}
	,addIgnores: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.ignores += v;
		this.hasIgnores = this.ignores > 0;
		this.onAddIgnores.dispatch(v);
	}
	,addWarnings: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.warnings += v;
		this.hasWarnings = this.warnings > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddWarnings.dispatch(v);
	}
	,sum: function(other) {
		this.addSuccesses(other.successes);
		this.addFailures(other.failures);
		this.addErrors(other.errors);
		this.addWarnings(other.warnings);
		this.addIgnores(other.ignores);
	}
	,subtract: function(other) {
		this.addSuccesses(-other.successes);
		this.addFailures(-other.failures);
		this.addErrors(-other.errors);
		this.addWarnings(-other.warnings);
		this.addIgnores(-other.ignores);
	}
	,wire: function(dependant) {
		dependant.onAddSuccesses.add($bind(this,this.addSuccesses));
		dependant.onAddFailures.add($bind(this,this.addFailures));
		dependant.onAddErrors.add($bind(this,this.addErrors));
		dependant.onAddWarnings.add($bind(this,this.addWarnings));
		dependant.onAddIgnores.add($bind(this,this.addIgnores));
		this.sum(dependant);
	}
	,unwire: function(dependant) {
		dependant.onAddSuccesses.remove($bind(this,this.addSuccesses));
		dependant.onAddFailures.remove($bind(this,this.addFailures));
		dependant.onAddErrors.remove($bind(this,this.addErrors));
		dependant.onAddWarnings.remove($bind(this,this.addWarnings));
		dependant.onAddIgnores.remove($bind(this,this.addIgnores));
		this.subtract(dependant);
	}
	,__class__: utest_ui_common_ResultStats
};
var utest_ui_text_HtmlReport = function(runner,outputHandler,traceRedirected) {
	if(traceRedirected == null) {
		traceRedirected = true;
	}
	this.aggregator = new utest_ui_common_ResultAggregator(runner,true);
	runner.onStart.add($bind(this,this.start));
	this.aggregator.onComplete.add($bind(this,this.complete));
	if(null == outputHandler) {
		this.setHandler($bind(this,this._handler));
	} else {
		this.setHandler(outputHandler);
	}
	if(traceRedirected) {
		this.redirectTrace();
	}
	this.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults;
	this.displayHeader = utest_ui_common_HeaderDisplayMode.AlwaysShowHeader;
};
utest_ui_text_HtmlReport.__name__ = "utest.ui.text.HtmlReport";
utest_ui_text_HtmlReport.__interfaces__ = [utest_ui_common_IReport];
utest_ui_text_HtmlReport.prototype = {
	traceRedirected: null
	,displaySuccessResults: null
	,displayHeader: null
	,handler: null
	,aggregator: null
	,oldTrace: null
	,_traces: null
	,setHandler: function(handler) {
		this.handler = handler;
	}
	,redirectTrace: function() {
		if(this.traceRedirected) {
			return;
		}
		this._traces = [];
		this.oldTrace = haxe_Log.trace;
		haxe_Log.trace = $bind(this,this._trace);
	}
	,restoreTrace: function() {
		if(!this.traceRedirected) {
			return;
		}
		haxe_Log.trace = this.oldTrace;
	}
	,_traceTime: null
	,_trace: function(v,infos) {
		var time = haxe_Timer.stamp();
		var delta = this._traceTime == null ? 0 : time - this._traceTime;
		this._traces.push({ msg : StringTools.htmlEscape(Std.string(v)), infos : infos, time : time - this.startTime, delta : delta, stack : haxe_CallStack.callStack()});
		this._traceTime = haxe_Timer.stamp();
	}
	,startTime: null
	,start: function(e) {
		this.startTime = haxe_Timer.stamp();
	}
	,cls: function(stats) {
		if(stats.hasErrors) {
			return "error";
		} else if(stats.hasFailures) {
			return "failure";
		} else if(stats.hasWarnings) {
			return "warn";
		} else {
			return "ok";
		}
	}
	,resultNumbers: function(buf,stats) {
		var numbers = [];
		if(stats.assertations == 1) {
			numbers.push("<strong>1</strong> test");
		} else {
			numbers.push("<strong>" + stats.assertations + "</strong> tests");
		}
		if(stats.successes != stats.assertations) {
			if(stats.successes == 1) {
				numbers.push("<strong>1</strong> pass");
			} else if(stats.successes > 0) {
				numbers.push("<strong>" + stats.successes + "</strong> passes");
			}
		}
		if(stats.errors == 1) {
			numbers.push("<strong>1</strong> error");
		} else if(stats.errors > 0) {
			numbers.push("<strong>" + stats.errors + "</strong> errors");
		}
		if(stats.failures == 1) {
			numbers.push("<strong>1</strong> failure");
		} else if(stats.failures > 0) {
			numbers.push("<strong>" + stats.failures + "</strong> failures");
		}
		if(stats.warnings == 1) {
			numbers.push("<strong>1</strong> warning");
		} else if(stats.warnings > 0) {
			numbers.push("<strong>" + stats.warnings + "</strong> warnings");
		}
		buf.add(numbers.join(", "));
	}
	,blockNumbers: function(buf,stats) {
		buf.add("<div class=\"" + this.cls(stats) + "bg statnumbers\">");
		this.resultNumbers(buf,stats);
		buf.add("</div>");
	}
	,formatStack: function(stack,addNL) {
		if(addNL == null) {
			addNL = true;
		}
		var parts = [];
		var nl = addNL ? "\n" : "";
		var last = null;
		var count = 1;
		var _g = 0;
		var _g1 = haxe_CallStack.toString(stack).split("\n");
		while(_g < _g1.length) {
			var part = _g1[_g];
			++_g;
			if(StringTools.trim(part) == "") {
				continue;
			}
			if(-1 < part.indexOf("Called from utest.")) {
				continue;
			}
			if(part == last) {
				parts[parts.length - 1] = part + " (#" + ++count + ")";
			} else {
				count = 1;
				last = part;
				parts.push(part);
			}
		}
		return "<div>" + ("<ul><li>" + parts.join("</li>" + nl + "<li>") + "</li></ul>" + nl) + "</div>" + nl;
	}
	,addFixture: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.add("<li class=\"fixture\"><div class=\"li\">");
		buf.add("<span class=\"" + this.cls(result.stats) + "bg fixtureresult\">");
		if(result.stats.isOk) {
			buf.add("OK ");
		} else if(result.stats.hasErrors) {
			buf.add("ERROR ");
		} else if(result.stats.hasFailures) {
			buf.add("FAILURE ");
		} else if(result.stats.hasWarnings) {
			buf.add("WARNING ");
		}
		buf.add("</span>");
		buf.add("<div class=\"fixturedetails\">");
		buf.add("<strong>" + name + "</strong>");
		buf.add(": ");
		this.resultNumbers(buf,result.stats);
		var messages = [];
		var _g = result.iterator();
		while(_g.hasNext()) {
			var assertation = _g.next();
			switch(assertation._hx_index) {
			case 0:
				break;
			case 1:
				messages.push("<strong>line " + assertation.pos.lineNumber + "</strong>: <em>" + StringTools.htmlEscape(assertation.msg) + "</em>");
				break;
			case 2:
				var _g1 = assertation.e;
				messages.push("<strong>error</strong>: <em>" + this.getErrorDescription(_g1) + "</em>\n<br/><strong>stack</strong>:" + this.getErrorStack(assertation.stack,_g1));
				break;
			case 3:
				var _g2 = assertation.e;
				messages.push("<strong>setup error</strong>: " + this.getErrorDescription(_g2) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(assertation.stack,_g2));
				break;
			case 4:
				var _g3 = assertation.e;
				messages.push("<strong>tear-down error</strong>: " + this.getErrorDescription(_g3) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(assertation.stack,_g3));
				break;
			case 5:
				messages.push("<strong>missed async call(s)</strong>: " + assertation.missedAsyncs);
				break;
			case 6:
				var _g4 = assertation.e;
				messages.push("<strong>async error</strong>: " + this.getErrorDescription(_g4) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(assertation.stack,_g4));
				break;
			case 7:
				messages.push(StringTools.htmlEscape(assertation.msg));
				break;
			case 8:
				messages.push(StringTools.htmlEscape(assertation.reason));
				break;
			}
		}
		if(messages.length > 0) {
			buf.add("<div class=\"testoutput\">");
			buf.add(messages.join("<br/>"));
			buf.add("</div>\n");
		}
		buf.add("</div>\n");
		buf.add("</div></li>\n");
	}
	,getErrorDescription: function(e) {
		return Std.string(e);
	}
	,getErrorStack: function(s,e) {
		return this.formatStack(s);
	}
	,addClass: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.add("<li>");
		buf.add("<h2 class=\"classname\">" + name + "</h2>");
		this.blockNumbers(buf,result.stats);
		buf.add("<ul>\n");
		var _g = 0;
		var _g1 = result.methodNames();
		while(_g < _g1.length) {
			var mname = _g1[_g];
			++_g;
			this.addFixture(buf,result.get(mname),mname,isOk);
		}
		buf.add("</ul>\n");
		buf.add("</li>\n");
	}
	,addPackages: function(buf,result,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.add("<ul id=\"utest-results-packages\">\n");
		var _g = 0;
		var _g1 = result.packageNames(false);
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.addPackage(buf,result.getPackage(name),name,isOk);
		}
		buf.add("</ul>\n");
	}
	,addPackage: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		if(name == "" && result.classNames().length == 0) {
			return;
		}
		buf.add("<li>");
		buf.add("<h2>" + name + "</h2>");
		this.blockNumbers(buf,result.stats);
		buf.add("<ul>\n");
		var _g = 0;
		var _g1 = result.classNames();
		while(_g < _g1.length) {
			var cname = _g1[_g];
			++_g;
			this.addClass(buf,result.getClass(cname),cname,isOk);
		}
		buf.add("</ul>\n");
		buf.add("</li>\n");
	}
	,getTextResults: function() {
		var newline = "\n";
		var indents = function(count) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < count) {
				++_g1;
				_g.push("  ");
			}
			return _g.join("");
		};
		var dumpStack = function(stack) {
			if(stack.length == 0) {
				return "";
			}
			var parts = haxe_CallStack.toString(stack).split("\n");
			var r = [];
			var _g = 0;
			while(_g < parts.length) {
				var part = parts[_g];
				++_g;
				if(part.indexOf(" utest.") >= 0) {
					continue;
				}
				r.push(part);
			}
			return r.join(newline);
		};
		var buf = new StringBuf();
		var _g = 0;
		var _g1 = this.result.packageNames();
		while(_g < _g1.length) {
			var pname = _g1[_g];
			++_g;
			var pack = this.result.getPackage(pname);
			if(utest_ui_common_ReportTools.skipResult(this,pack.stats,this.result.stats.isOk)) {
				continue;
			}
			var _g2 = 0;
			var _g3 = pack.classNames();
			while(_g2 < _g3.length) {
				var cname = _g3[_g2];
				++_g2;
				var cls = pack.getClass(cname);
				if(utest_ui_common_ReportTools.skipResult(this,cls.stats,this.result.stats.isOk)) {
					continue;
				}
				buf.add((pname == "" ? "" : pname + ".") + cname + newline);
				var _g4 = 0;
				var _g5 = cls.methodNames();
				while(_g4 < _g5.length) {
					var mname = _g5[_g4];
					++_g4;
					var fix = cls.get(mname);
					if(utest_ui_common_ReportTools.skipResult(this,fix.stats,this.result.stats.isOk)) {
						continue;
					}
					buf.add(indents(1) + mname + ": ");
					if(fix.stats.isOk) {
						buf.add("OK ");
					} else if(fix.stats.hasErrors) {
						buf.add("ERROR ");
					} else if(fix.stats.hasFailures) {
						buf.add("FAILURE ");
					} else if(fix.stats.hasWarnings) {
						buf.add("WARNING ");
					}
					var messages = "";
					var _g6 = fix.iterator();
					while(_g6.hasNext()) {
						var assertation = _g6.next();
						switch(assertation._hx_index) {
						case 0:
							buf.add(".");
							break;
						case 1:
							buf.add("F");
							messages += indents(2) + "line: " + assertation.pos.lineNumber + ", " + assertation.msg + newline;
							break;
						case 2:
							buf.add("E");
							messages += indents(2) + Std.string(assertation.e) + dumpStack(assertation.stack) + newline;
							break;
						case 3:
							buf.add("S");
							messages += indents(2) + Std.string(assertation.e) + dumpStack(assertation.stack) + newline;
							break;
						case 4:
							buf.add("T");
							messages += indents(2) + Std.string(assertation.e) + dumpStack(assertation.stack) + newline;
							break;
						case 5:
							buf.add("O");
							messages += indents(2) + "missed async calls: " + assertation.missedAsyncs + dumpStack(assertation.stack) + newline;
							break;
						case 6:
							buf.add("A");
							messages += indents(2) + Std.string(assertation.e) + dumpStack(assertation.stack) + newline;
							break;
						case 7:
							buf.add("W");
							messages += indents(2) + assertation.msg + newline;
							break;
						case 8:
							var _g7 = assertation.reason;
							buf.add("I");
							if(_g7 != null && _g7 != "") {
								messages += indents(2) + ("With reason: " + _g7) + newline;
							}
							break;
						}
					}
					buf.add(newline);
					buf.add(messages);
				}
			}
		}
		return buf.toString();
	}
	,getHeader: function() {
		var buf = new StringBuf();
		if(!utest_ui_common_ReportTools.hasHeader(this,this.result.stats)) {
			return "";
		}
		var time = Std.int((haxe_Timer.stamp() - this.startTime) * 1000) / 1000;
		var msg = "TEST OK";
		if(this.result.stats.hasErrors) {
			msg = "TEST ERRORS";
		} else if(this.result.stats.hasFailures) {
			msg = "TEST FAILED";
		} else if(this.result.stats.hasWarnings) {
			msg = "WARNING REPORTED";
		}
		buf.add("<h1 class=\"" + this.cls(this.result.stats) + "bg header\">" + msg + "</h1>\n");
		buf.add("<div class=\"headerinfo\">");
		this.resultNumbers(buf,this.result.stats);
		buf.add(" performed on <strong>" + utest_ui_text_HtmlReport.platform + "</strong>, executed in <strong> " + time + " sec. </strong></div >\n ");
		return buf.toString();
	}
	,getTrace: function() {
		var buf = new StringBuf();
		if(this._traces == null || this._traces.length == 0) {
			return "";
		}
		buf.add("<div class=\"trace\"><h2>traces</h2><ol>");
		var _g = 0;
		var _g1 = this._traces;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			buf.add("<li><div class=\"li\">");
			var stack = StringTools.replace(this.formatStack(t.stack,false),"'","\\'");
			var method = "<span class=\"tracepackage\">" + t.infos.className + "</span><br/>" + t.infos.methodName + "(" + t.infos.lineNumber + ")";
			buf.add("<span class=\"tracepos\" onmouseover=\"utestTooltip(this.parentNode, '" + stack + "')\" onmouseout=\"utestRemoveTooltip()\">");
			buf.add(method);
			buf.add("</span><span class=\"tracetime\">");
			buf.add("@ " + this.formatTime(t.time));
			if(Math.round(t.delta * 1000) > 0) {
				buf.add(", ~" + this.formatTime(t.delta));
			}
			buf.add("</span><span class=\"tracemsg\">");
			buf.add(StringTools.replace(StringTools.trim(t.msg),"\n","<br/>\n"));
			buf.add("</span><div class=\"clr\"></div></div></li>");
		}
		buf.add("</ol></div>");
		return buf.toString();
	}
	,getResults: function() {
		var buf = new StringBuf();
		this.addPackages(buf,this.result,this.result.stats.isOk);
		return buf.toString();
	}
	,getAll: function() {
		if(!utest_ui_common_ReportTools.hasOutput(this,this.result.stats)) {
			return "";
		} else {
			return this.getHeader() + this.getTrace() + this.getResults();
		}
	}
	,getHtml: function(title) {
		if(null == title) {
			title = "utest: " + utest_ui_text_HtmlReport.platform;
		}
		var s = this.getAll();
		if("" == s) {
			return "";
		} else {
			return this.wrapHtml(title,s);
		}
	}
	,result: null
	,complete: function(result) {
		this.result = result;
		this.handler(this);
		this.restoreTrace();
		var exposedResult = { isOk : result.stats.isOk, message : this.getTextResults()};
		if('undefined' != typeof window) {
			window.utest_result = exposedResult;
		}
	}
	,formatTime: function(t) {
		return Math.round(t * 1000) + " ms";
	}
	,cssStyle: function() {
		return "body, dd, dt {\n  font-family: Verdana, Arial, Sans-serif;\n  font-size: 12px;\n}\ndl {\n  width: 180px;\n}\ndd, dt {\n  margin : 0;\n  padding : 2px 5px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n}\ndd.value {\n  text-align: center;\n  background-color: #eeeeee;\n}\ndt {\n  text-align: left;\n  background-color: #e6e6e6;\n  float: left;\n  width: 100px;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  text-align: center;\n  font-weight: bold;\n  padding: 5px 0 4px 0;\n  font-family: Arial, Sans-serif;\n  font-size: 18px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  margin: 0 2px 0px 2px;\n}\n\nh2 {\n  font-weight: bold;\n  padding: 2px 0 2px 8px;\n  font-family: Arial, Sans-serif;\n  font-size: 13px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  margin: 0 0 0px 0;\n  background-color: #FFFFFF;\n  color: #777777;\n}\n\nh2.classname {\n  color: #000000;\n}\n\n.okbg {\n  background-color: #66FF55;\n}\n.errorbg {\n  background-color: #CC1100;\n}\n.failurebg {\n  background-color: #EE3322;\n}\n.warnbg {\n  background-color: #FFCC99;\n}\n.headerinfo {\n  text-align: right;\n  font-size: 11px;\n  font - color: 0xCCCCCC;\n  margin: 0 2px 5px 2px;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  padding: 2px;\n}\n\nli {\n  padding: 4px;\n  margin: 2px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  background-color: #e6e6e6;\n}\n\nli.fixture {\n  background-color: #f6f6f6;\n  padding-bottom: 6px;\n}\n\ndiv.fixturedetails {\n  padding-left: 108px;\n}\n\nul {\n  padding: 0;\n  margin: 6px 0 0 0;\n  list-style-type: none;\n}\n\nol {\n  padding: 0 0 0 28px;\n  margin: 0px 0 0 0;\n}\n\n.statnumbers {\n  padding: 2px 8px;\n}\n\n.fixtureresult {\n  width: 100px;\n  text-align: center;\n  display: block;\n  float: left;\n  font-weight: bold;\n  padding: 1px;\n  margin: 0 0 0 0;\n}\n\n.testoutput {\n  border: 1px dashed #CCCCCC;\n  margin: 4px 0 0 0;\n  padding: 4px 8px;\n  background-color: #eeeeee;\n}\n\nspan.tracepos, span.traceposempty {\n  display: block;\n  float: left;\n  font-weight: bold;\n  font-size: 9px;\n  width: 170px;\n  margin: 2px 0 0 2px;\n}\n\nspan.tracepos:hover {\n  cursor : pointer;\n  background-color: #ffff99;\n}\n\nspan.tracemsg {\n  display: block;\n  margin-left: 180px;\n  background-color: #eeeeee;\n  padding: 7px;\n}\n\nspan.tracetime {\n  display: block;\n  float: right;\n  margin: 2px;\n  font-size: 9px;\n  color: #777777;\n}\n\n\ndiv.trace ol {\n  padding: 0 0 0 40px;\n  color: #777777;\n}\n\ndiv.trace li {\n  padding: 0;\n}\n\ndiv.trace li div.li {\n  color: #000000;\n}\n\ndiv.trace h2 {\n  margin: 0 2px 0px 2px;\n  padding-left: 4px;\n}\n\n.tracepackage {\n  color: #777777;\n  font-weight: normal;\n}\n\n.clr {\n  clear: both;\n}\n\n#utesttip {\n  margin-top: -3px;\n  margin-left: 170px;\n  font-size: 9px;\n}\n\n#utesttip li {\n  margin: 0;\n  background-color: #ffff99;\n  padding: 2px 4px;\n  border: 0;\n  border-bottom: 1px dashed #ffff33;\n}";
	}
	,jsScript: function() {
		return "function utestTooltip(ref, text) {\n  var el = document.getElementById(\"utesttip\");\n  if(!el) {\n    var el = document.createElement(\"div\")\n    el.id = \"utesttip\";\n    el.style.position = \"absolute\";\n    document.body.appendChild(el)\n  }\n  var p = utestFindPos(ref);\n  el.style.left = (4 + p[0]) + \"px\";\n  el.style.top = (p[1] - 1) + \"px\";\n  el.innerHTML =  text;\n}\n\nfunction utestFindPos(el) {\n  var left = 0;\n  var top = 0;\n  do {\n    left += el.offsetLeft;\n    top += el.offsetTop;\n  } while(el = el.offsetParent)\n  return [left, top];\n}\n\nfunction utestRemoveTooltip() {\n  var el = document.getElementById(\"utesttip\")\n  if(el)\n    document.body.removeChild(el)\n}";
	}
	,wrapHtml: function(title,s) {
		return "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n<title>" + title + "</title>\n      <style type=\"text/css\">" + this.cssStyle() + "</style>\n      <script type=\"text/javascript\">\n" + this.jsScript() + "\n</" + "script>\n</head>\n      <body>\n" + s + "\n</body>\n</html>";
	}
	,_handler: function(report) {
		var _gthis = this;
		if(window.document.readyState == "loading") {
			var onReadyStateChange = null;
			onReadyStateChange = function() {
				if(window.document.readyState != "loading") {
					window.document.removeEventListener("readystatechange",onReadyStateChange);
					_gthis._handler(report);
				}
			};
			window.document.addEventListener("readystatechange",onReadyStateChange);
			return;
		}
		var isDef = function(v) {
			return typeof v != 'undefined';
		};
		var hasProcess = typeof process != 'undefined';
		if(hasProcess) {
			process.stdout.write(report.getHtml());
			return;
		}
		var head = window.document.getElementsByTagName("head")[0];
		var script = window.document.createElement("script");
		script.type = "text/javascript";
		var sjs = report.jsScript();
		if(isDef(script.text)) {
			script.text = sjs;
		} else {
			script.innerHTML = sjs;
		}
		head.appendChild(script);
		var style = window.document.createElement("style");
		style.type = "text/css";
		var scss = report.cssStyle();
		if(isDef(style.styleSheet)) {
			style.styleSheet.cssText = scss;
		} else if(isDef(style.cssText)) {
			style.cssText = scss;
		} else if(isDef(style.innerText)) {
			style.innerText = scss;
		} else {
			style.innerHTML = scss;
		}
		head.appendChild(style);
		var el = window.document.getElementById("utest-results");
		if(null == el) {
			el = window.document.createElement("div");
			el.id = "utest-results";
			window.document.body.appendChild(el);
		}
		el.innerHTML = report.getAll();
	}
	,__class__: utest_ui_text_HtmlReport
};
var utest_ui_text_PlainTextReport = function(runner,outputHandler) {
	this.aggregator = new utest_ui_common_ResultAggregator(runner,true);
	runner.onStart.add($bind(this,this.start));
	this.aggregator.onComplete.add($bind(this,this.complete));
	if(null != outputHandler) {
		this.setHandler(outputHandler);
	}
	this.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults;
	this.displayHeader = utest_ui_common_HeaderDisplayMode.AlwaysShowHeader;
};
utest_ui_text_PlainTextReport.__name__ = "utest.ui.text.PlainTextReport";
utest_ui_text_PlainTextReport.__interfaces__ = [utest_ui_common_IReport];
utest_ui_text_PlainTextReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,handler: null
	,aggregator: null
	,newline: null
	,indent: null
	,setHandler: function(handler) {
		this.handler = handler;
	}
	,startTime: null
	,start: function(e) {
		this.startTime = this.getTime();
	}
	,getTime: function() {
		return haxe_Timer.stamp();
	}
	,indents: function(c) {
		var s = "";
		while(--c >= 0) s += this.indent;
		return s;
	}
	,dumpStack: function(stack) {
		if(stack.length == 0) {
			return "";
		}
		var parts = haxe_CallStack.toString(stack).split("\n");
		var r = [];
		var _g = 0;
		while(_g < parts.length) {
			var part = parts[_g];
			++_g;
			if(part.indexOf(" utest.") >= 0) {
				continue;
			}
			r.push(part);
		}
		return r.join(this.newline);
	}
	,addHeader: function(buf,result) {
		if(!utest_ui_common_ReportTools.hasHeader(this,result.stats)) {
			return;
		}
		var time = Std.int((this.getTime() - this.startTime) * 1000) / 1000;
		buf.add("\nassertations: " + result.stats.assertations + this.newline);
		buf.add("successes: " + result.stats.successes + this.newline);
		buf.add("errors: " + result.stats.errors + this.newline);
		buf.add("failures: " + result.stats.failures + this.newline);
		buf.add("warnings: " + result.stats.warnings + this.newline);
		buf.add("execution time: " + time + this.newline);
		buf.add(this.newline);
		buf.add("results: " + (result.stats.isOk ? "ALL TESTS OK (success: true)" : "SOME TESTS FAILURES (success: false)"));
		buf.add(this.newline);
	}
	,result: null
	,getResults: function() {
		var buf = new StringBuf();
		this.addHeader(buf,this.result);
		var _g = 0;
		var _g1 = this.result.packageNames();
		while(_g < _g1.length) {
			var pname = _g1[_g];
			++_g;
			var pack = this.result.getPackage(pname);
			if(utest_ui_common_ReportTools.skipResult(this,pack.stats,this.result.stats.isOk)) {
				continue;
			}
			var _g2 = 0;
			var _g3 = pack.classNames();
			while(_g2 < _g3.length) {
				var cname = _g3[_g2];
				++_g2;
				var cls = pack.getClass(cname);
				if(utest_ui_common_ReportTools.skipResult(this,cls.stats,this.result.stats.isOk)) {
					continue;
				}
				buf.add((pname == "" ? "" : pname + ".") + cname + this.newline);
				var _g4 = 0;
				var _g5 = cls.methodNames();
				while(_g4 < _g5.length) {
					var mname = _g5[_g4];
					++_g4;
					var fix = cls.get(mname);
					if(utest_ui_common_ReportTools.skipResult(this,fix.stats,this.result.stats.isOk)) {
						continue;
					}
					buf.add(this.indents(1) + mname + ": ");
					if(fix.stats.isOk) {
						buf.add("OK ");
					} else if(fix.stats.hasErrors) {
						buf.add("ERROR ");
					} else if(fix.stats.hasFailures) {
						buf.add("FAILURE ");
					} else if(fix.stats.hasWarnings) {
						buf.add("WARNING ");
					}
					var messages = "";
					var _g6 = fix.iterator();
					while(_g6.hasNext()) {
						var assertation = _g6.next();
						switch(assertation._hx_index) {
						case 0:
							buf.add(".");
							break;
						case 1:
							buf.add("F");
							messages += this.indents(2) + "line: " + assertation.pos.lineNumber + ", " + assertation.msg + this.newline;
							break;
						case 2:
							buf.add("E");
							messages += this.indents(2) + Std.string(assertation.e) + this.dumpStack(assertation.stack) + this.newline;
							break;
						case 3:
							buf.add("S");
							messages += this.indents(2) + Std.string(assertation.e) + this.dumpStack(assertation.stack) + this.newline;
							break;
						case 4:
							buf.add("T");
							messages += this.indents(2) + Std.string(assertation.e) + this.dumpStack(assertation.stack) + this.newline;
							break;
						case 5:
							buf.add("O");
							messages += this.indents(2) + "missed async calls: " + assertation.missedAsyncs + this.dumpStack(assertation.stack) + this.newline;
							break;
						case 6:
							buf.add("A");
							messages += this.indents(2) + Std.string(assertation.e) + this.dumpStack(assertation.stack) + this.newline;
							break;
						case 7:
							buf.add("W");
							messages += this.indents(2) + assertation.msg + this.newline;
							break;
						case 8:
							var _g7 = assertation.reason;
							buf.add("I");
							if(_g7 != null && _g7 != "") {
								messages += this.indents(2) + ("With reason: " + _g7) + this.newline;
							}
							break;
						}
					}
					buf.add(this.newline);
					buf.add(messages);
				}
			}
		}
		return buf.toString();
	}
	,complete: function(result) {
		this.result = result;
		if(this.handler != null) {
			this.handler(this);
		}
		if(typeof phantom != "undefined") {
			var tmp = result.stats.isOk ? 0 : 1;
			phantom.exit(tmp);
		}
		if(typeof process != "undefined") {
			var tmp = result.stats.isOk ? 0 : 1;
			process.exit(tmp);
		}
	}
	,__class__: utest_ui_text_PlainTextReport
};
var utest_ui_text_PrintReport = function(runner) {
	utest_ui_text_PlainTextReport.call(this,runner,$bind(this,this._handler));
	this.newline = "\n";
	this.indent = "  ";
};
utest_ui_text_PrintReport.__name__ = "utest.ui.text.PrintReport";
utest_ui_text_PrintReport.__super__ = utest_ui_text_PlainTextReport;
utest_ui_text_PrintReport.prototype = $extend(utest_ui_text_PlainTextReport.prototype,{
	_handler: function(report) {
		this._trace(report.getResults());
	}
	,_trace: function(s) {
		s = StringTools.replace(s,"  ",this.indent);
		s = StringTools.replace(s,"\n",this.newline);
		haxe_Log.trace(s,{ fileName : "utest/ui/text/PrintReport.hx", lineNumber : 52, className : "utest.ui.text.PrintReport", methodName : "_trace"});
	}
	,__class__: utest_ui_text_PrintReport
});
var utest_utils_AccessoriesUtils = function() { };
utest_utils_AccessoriesUtils.__name__ = "utest.utils.AccessoriesUtils";
utest_utils_AccessoriesUtils.getSetupClass = function(accessories) {
	if(accessories.setupClass == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.setupClass;
	}
};
utest_utils_AccessoriesUtils.getSetup = function(accessories) {
	if(accessories.setup == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.setup;
	}
};
utest_utils_AccessoriesUtils.getTeardown = function(accessories) {
	if(accessories.teardown == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.teardown;
	}
};
utest_utils_AccessoriesUtils.getTeardownClass = function(accessories) {
	if(accessories.teardownClass == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.teardownClass;
	}
};
var utest_utils_AsyncUtils = function() { };
utest_utils_AsyncUtils.__name__ = "utest.utils.AsyncUtils";
utest_utils_AsyncUtils.orResolved = function(_async) {
	if(_async == null) {
		return utest_Async.getResolved();
	} else {
		return _async;
	}
};
var utest_utils_Misc = function() { };
utest_utils_Misc.__name__ = "utest.utils.Misc";
utest_utils_Misc.isOfType = function(v,t) {
	return Std.isOfType(v,t);
};
var utest_utils_Print = function() { };
utest_utils_Print.__name__ = "utest.utils.Print";
utest_utils_Print.immediately = function(msg) {
	console.log(msg);
};
utest_utils_Print.startCase = function(caseName) {
};
utest_utils_Print.startTest = function(name) {
};
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $keyValueIterator(o) { if( o instanceof Array ) return function() { return HxOverrides.keyValueIter(o); }; return typeof(o.keyValueIterator) == 'function' ? $bind(o,o.keyValueIterator) : o.keyValueIterator; }
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [];
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
var facade = stx_log_Facade.unit();
stx_log_Signal._new().attach(stx_log_Facade.toLoggerApi(facade));
stx_log_Signal.is_custom = false;
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
hre_RegExp.LATIN_SMALL_LETTER_G = 103;
hre_RegExp.LATIN_SMALL_LETTER_I = 105;
hre_RegExp.LATIN_SMALL_LETTER_M = 109;
hre_RegExp.LATIN_SMALL_LETTER_U = 117;
hre_RegExp.LATIN_SMALL_LETTER_Y = 121;
hre_RegExpMatcher.lineTerminators = [10,13,8232,8233];
hre_RegExpMatcher.whiteSpaces = [9,11,12,32,160,65279];
hre_RegExpMatcher.separators = hre_RegExpMatcher.lineTerminators.concat(hre_RegExpMatcher.whiteSpaces);
stx_log_Logic._ = stx_log_LogicLift;
stx_log_Facade.ZERO = stx_log_Facade.unit();
stx_log_Signal.ZERO = stx_log_Signal._new();
stx_log_Signal.is_custom = false;
stx_log_LogPosition.id = "306cccf1-89a7-44a4-b99a-7c69772a528d";
stx_Log._ = stx_LogLift;
stx_Log.ZERO = stx_Log.LOG;
stx_Test.pokey = "poke";
stx_arw_Arrange._ = stx_arw_ArrangeLift;
stx_arw_arrowlet_Lift.__meta__ = { statics : { then : { doc : ["left to right composition of Arrowlets. Produces an Arrowlet running `before` and placing it's value in `after`."]}, first : { doc : ["Takes an ArrowletDef<A,B>, and produces one taking a Couple that runs the Arrowlet on the left-hand side, leaving the right-handside liftuched."]}, second : { doc : ["Takes an ArrowletDef<A,B>, and produces one taking a Couple that runs the Arrowlet on the right-hand side, leaving the left-hand side liftuched."]}, split : { doc : ["Takes two Arrowlets with the same input type, and produces one which applies each Arrowlet with the same input."]}, both : { doc : ["Takes two Arrowlets and produces on that runs them in parallel, waiting for both responses before output."]}, swap : { doc : ["Changes <B,C> to <C,B> on the output of an Arrowlet"]}, fan : { doc : ["Produces a Couple output of any Arrowlet."]}, joint : { doc : ["Runs the first Arrowlet, then the second, preserving the output of the first on the left-hand side."]}, bound : { doc : ["Runs the first Arrowlet and places the input of that Arrowlet and the output in the second Arrowlet."]}, or : { doc : ["Produces an Arrowlet that will run `or_` if the input is Left(in), or '_or' if the input is Right(in);"]}, left : { doc : ["Produces an Arrowlet that will run only if the input is Left."]}, right : { doc : ["Produces an Arrowlet that will run only if the input is Right."]}}};
stx_arw_Arrowlet._ = stx_arw_arrowlet_Lift;
stx_arw_Attempt._ = stx_arw_AttemptLift;
stx_arw_Cascade._ = stx_arw_CascadeLift;
stx_arw_Command._ = stx_arw_CommandLift;
stx_arw_ConventionSum.SYNC = false;
stx_arw_ConventionSum.ASYNC = true;
stx_arw_Convert._ = stx_arw_ConvertLift;
stx_arw_Diffuse._ = stx_arw_DiffuseLift;
stx_arw_Produce._ = stx_arw_ProduceLift;
stx_arw_Propose._ = stx_arw_ProposeLift;
stx_arw_Provide._ = stx_arw_ProvideLift;
stx_arw_Reframe._ = stx_arw_ReframeLift;
stx_arw_arrowlet_term_Applier._ = stx_arw_arrowlet_term_ApplierLift;
stx_arw_arrowlet_term_Fiber._ = stx_arw_arrowlet_term_FiberLift;
stx_arw_test_AfterRewriteTest.__meta__ = { fields : { testAsync : { Ignored : null}, test_arrowlet_error : { Ignored : null}}};
stx_nano_Err.UUID = "e30e1389-4a72-41fe-ba9f-d7ddf3d1e247";
stx_assert_EqualedSum.AreEqual = true;
stx_assert_EqualedSum.NotEqual = false;
stx_assert_Equaled.AreEqual = true;
stx_assert_Equaled.NotEqual = false;
stx_assert_OrderedSum.LessThan = true;
stx_assert_OrderedSum.NotLessThan = false;
stx_assert_Predicate._ = stx_assert_PredicateLift;
stx_async_Counter.val = 0;
stx_async_LogicalClock.lifetime = 0;
stx_async_LogicalClock.counter = 0;
stx_async_Loop.ZERO = stx_async_Loop.Event();
stx_async_Task.counter = 0;
stx_async_Task._ = stx_async_TaskLift;
stx_async_Work.ZERO = stx_async_Work.Unit();
stx_async_Terminal.ZERO = stx_async_Terminal._new(null,{ fileName : "stx/async/Terminal.hx", lineNumber : 11, className : "stx.async._Terminal.Terminal_Impl_", methodName : "ZERO"});
stx_ext_CharsLift.__meta__ = { statics : { underscore : { thx : null}}};
stx_ext_Chars._ = stx_ext_CharsLift;
stx_ext_Chunk._ = stx_ext_ChunkLift;
stx_ext_Contract._ = stx_ext_ContractLift;
stx_ext__$ErrorCode_Constructor.ZERO = new stx_ext__$ErrorCode_Constructor();
stx_ext_Floats.__meta__ = { statics : { clamp : { doc : ["Produce a number based on `n` that is `min` if less than `min`, \n\t\t`max` if `n` is greater than `max` and is left untouched if\n\t\tbetween the two."]}}};
stx_ext_Ints.__meta__ = { statics : { xor : { doc : ["Returns `a ^ b`"]}}};
stx_ext_Ints.ZERO = 0;
stx_ext_Ints.ONE = 1;
stx_ext_Math.PRIMES = [1,3,7,13,31,61,127,251,509,1021,2039,4093,8191,16381,32749,65521,131071,262139,524287,1048573,2097143,4194301,8388593,16777213,33554393,67108859,134217689,268435399,536870909,1073741789,2147483647];
stx_ext_Pledge._ = stx_ext_PledgeLift;
stx_fn_Binary._ = stx_fn_BinaryLift;
stx_fn_Block.ZERO = function() {
};
stx_fn_Block._ = stx_fn_BlockLift;
stx_fn_Dual._ = stx_fn_DualLift;
stx_fn_Sink._ = stx_fn_SinkLift;
stx_fn_Ternary._ = stx_fn_TernaryLift;
stx_fn__$Thunk_Constructor.ZERO = new stx_fn__$Thunk_Constructor();
stx_fn_Destructure.__meta__ = { fields : { cache : { params : ["The Thunk to call once"], returns : ["A Thunk which will call the input Thunk once."]}}};
stx_fn_Unary._ = stx_fn_UnaryLift;
stx_fp_Continuation._ = stx_fp_ContinuationLift;
stx_fp_LazyStream.ZERO = stx_fp_LazyStream.unit();
stx_fp_StateLift.__meta__ = { statics : { exec : { doc : ["Run `State` with `s`, dropping the result and returning `s`."]}, 'eval' : { doc : ["Run `State` with `s`, returning the result."]}}};
stx_log_Stamp.ZERO = new stx_log_Stamp();
stx_nano_Couple._ = stx_nano_CoupleLift;
stx_nano_FailCode.E_ResourceNotFound = "E_ResourceNotFound";
stx_nano_FailCode.E_IteratorExhaustedUnexpectedly = "E_IteratorExhaustedUnexpectedly";
stx_nano_FailCode.E_UnexpectedNullValueEncountered = "E_UnexpectedNullValueEncountered";
stx_nano_FailCode.E_OptionForcedError = "E_OptionForcedError";
stx_nano_FailCode.E_ValueNotReady = "E_ValueNotReady";
stx_nano_FailCode.E_AbstractMethod = "E_AbstractMethod";
stx_nano_FailCode.E_IndexOutOfBounds = "E_IndexOutOfBounds";
stx_nano_FailCode.E_UndefinedError = "E_UndefinedError";
stx_nano_Failure._ = stx_nano_FailureLift;
stx_nano_Iter._ = stx_nano_IterLift;
stx_nano_Position.ZERO = stx_nano_Position.make(null,null,null,null);
stx_nano_Position._ = stx_nano_PositionLift;
stx_nano_Res._ = stx_nano_ResLift;
stx_nano_Slot._ = stx_nano_SlotLift;
stx_nano_Triple._ = stx_nano_TripleLift;
stx_pico_Either._ = stx_pico_EitherLift;
stx_pico_Option._ = stx_pico_OptionLift;
stx_pico_Outcome._ = stx_pico_OutcomeLift;
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
tink_core_AlreadyDisposed.INST = new tink_core_AlreadyDisposed();
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core_Lazy.NOISE = tink_core_Lazy.ofConst(null);
tink_core_Lazy.NULL = tink_core_Lazy.NOISE;
tink_core_Future.NOISE = tink_core_Future.sync(null);
tink_core_Future.NULL = tink_core_Future.NOISE;
tink_core_Future.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_Noise.Noise = null;
tink_core_ProgressValue.ZERO = tink_core_ProgressValue._new(0,haxe_ds_Option.None);
tink_core_Progress.INIT = tink_core_ProgressValue.ZERO;
tink_core_Promise.NOISE = tink_core_Future.sync(tink_core_Outcome.Success(null));
tink_core_Promise.NULL = tink_core_Promise.NOISE;
tink_core_Promise.NEVER = tink_core_Promise.ofFuture(tink_core_Future.NEVER);
tink_core__$Signal_Disposed.INST = new tink_core__$Signal_Disposed();
utest_TestHandler.POLLING_TIME = 10;
utest_AccessoryName.SETUP_NAME = "setup";
utest_AccessoryName.SETUP_CLASS_NAME = "setupClass";
utest_AccessoryName.TEARDOWN_NAME = "teardown";
utest_AccessoryName.TEARDOWN_CLASS_NAME = "teardownClass";
utest_ui_text_HtmlReport.platform = "javascript";
{
	Main.main();
	haxe_EntryPoint.run();
}
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
