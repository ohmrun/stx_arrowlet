package stx.arw;

import stx.arw.left_choice.term.Choice;
import stx.arw.left_choice.term.Base;

@:allow(stx.arw)
@:forward abstract LeftChoice<I,Oi,Oii>(LeftChoiceDef<I,Oi,Oii>) from LeftChoiceDef<I,Oi,Oii> to LeftChoiceDef<I,Oi,Oii>{
	static public inline function _() return Constructor.ZERO;

	private function new(self:ArrowletDef<Either<I,Oii>,Either<Oi,Oii>>){
		this = self;
	}
	static public function fromChoice<I,Oi,Oii>(arw:Arrowlet<I,Either<Oi,Oii>>):LeftChoice<I,Oi,Oii>
		return _().fromChoice(arw);
}
private class Constructor extends Clazz{
  static public var ZERO(default,never) = new Constructor();
  public function make<I,Oi,Oii>(arw:Arrowlet<I,Oi>):LeftChoice<I,Oi,Oii>{
		return new Base(arw);
	}
	public function fromChoice<I,Oi,Oii>(arw:Arrowlet<I,Either<Oi,Oii>>):LeftChoice<I,Oi,Oii>{
		return new Choice(arw);
	}
}
