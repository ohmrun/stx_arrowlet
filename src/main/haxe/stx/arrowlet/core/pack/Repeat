package stx.arrowlet.core.pack;

using stx.arrowlet.core.pack.Repeat;

import stx.arrowlet.core.head.data.Repeat in TRepeat;

@:forward @:callable abstract Repeat<I,O>(Arrowlet<I,O>) from Arrowlet<I,O> to Arrowlet<I,O>{
	public function new(arw:Arrowlet<I,Either<I,O>>){
		this = __.arw().cont(method.bind(arw));
	}
	static function method<I,O>(arw:Arrowlet<I,Either<I,O>>,i:I,cont:Sink<O>){
		function rec(o) {
			return switch (o) {
				case Left(rv) 	: arw.prepare(rv,
					Sink.unit().command(
						rec.trampoline()
					)	
				);
				case Right(dn) 	: cont(dn);
			}
		}
		return arw.prepare(i,Sink.unit().command(rec));
	}

	static public function sample<I,O,Z>(arw:Arrowlet<I,O>,selector:O->Bool,fold:O->Z->Z,init:Z):Arrowlet<I,Z>{
		var op = init;
		return return new Repeat(arw.bound(
			(t:Tuple2<I,O>) -> t.into(
				(i,o) -> switch (selector(o)) {
					case true 	: op = fold(o,op); 		
						Left(i);
					case false  :
						Right(op);
				}
			)
		));
	}

}