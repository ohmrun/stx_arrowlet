package stx.channel.head;

class Proceeds extends Clazz{
  static public var _(default,null) = new stx.channel.body.Proceeds();

  @:noUsing static public function lift<O,E>(self:ProceedDef<O,E>):Proceed<O,E> return new Proceed(self);
  @:noUsing static public function unto<O,E>(self:Arrowlet<Noise,Res<O,E>>):Proceed<O,E> return new Proceed(self.asRecallDef());

  @:noUsing static public function pure<O,E>(v:O):Proceed<O,E>{
    return unto(Arrowlet.fromFun1R((_:Noise) -> __.success(v)));
  }
  @:noUsing static public function fromThunkT<O,E>(fn:Void->O):Proceed<O,E>{
    return unto(
      Arrowlet.fromFun1R(
        (_:Noise) -> __.success(fn())
      )
    );
  }
  @:noUsing static public function fromIO<O,E>(io:IO<O,E>):Proceed<O,E>{
    return lift(Recall.Anon(
      (_:Noise,cont:Sink<Res<O,E>>) ->  io.applyII(
        Automation.unit(),
        cont
      )
    ));
  }
}